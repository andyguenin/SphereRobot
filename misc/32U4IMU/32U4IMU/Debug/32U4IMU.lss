
32U4IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002c34  00002cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00002cd8  2**0
                  ALLOC
  3 .stab         00000ef4  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000281  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003e2  00000000  00000000  00003fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028a7  00000000  00000000  000043af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000107a  00000000  00000000  00006c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002569  00000000  00000000  00007cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003b0  00000000  00000000  0000a23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000782  00000000  00000000  0000a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a79  00000000  00000000  0000ad6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000613  00000000  00000000  0000b7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  0000bdfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_10>
      2c:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_11>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      ac:	9b 09       	sbc	r25, r11
      ae:	8e 09       	sbc	r24, r14
      b0:	81 09       	sbc	r24, r1
      b2:	74 09       	sbc	r23, r4
      b4:	67 09       	sbc	r22, r7
      b6:	5a 09       	sbc	r21, r10
      b8:	4d 09       	sbc	r20, r13
      ba:	40 09       	sbc	r20, r0
      bc:	33 09       	sbc	r19, r3
      be:	26 09       	sbc	r18, r6
      c0:	19 09       	sbc	r17, r9
      c2:	0c 09       	sbc	r16, r12
      c4:	ff 08       	sbc	r15, r15
      c6:	f2 08       	sbc	r15, r2
      c8:	e5 08       	sbc	r14, r5
      ca:	d8 08       	sbc	r13, r8
      cc:	cb 08       	sbc	r12, r11
      ce:	be 08       	sbc	r11, r14
      d0:	b1 08       	sbc	r11, r1
      d2:	a4 08       	sbc	r10, r4
      d4:	97 08       	sbc	r9, r7
      d6:	8a 08       	sbc	r8, r10
      d8:	7d 08       	sbc	r7, r13
      da:	70 08       	sbc	r7, r0
      dc:	63 08       	sbc	r6, r3
      de:	56 08       	sbc	r5, r6
      e0:	49 08       	sbc	r4, r9
      e2:	3c 08       	sbc	r3, r12
      e4:	2f 08       	sbc	r2, r15
      e6:	22 08       	sbc	r2, r2
      e8:	15 08       	sbc	r1, r5
      ea:	08 08       	sbc	r0, r8
      ec:	fb 07       	cpc	r31, r27
      ee:	ee 07       	cpc	r30, r30
      f0:	e1 07       	cpc	r30, r17
      f2:	d4 07       	cpc	r29, r20
      f4:	c7 07       	cpc	r28, r23
      f6:	ba 07       	cpc	r27, r26
      f8:	ad 07       	cpc	r26, r29
      fa:	a0 07       	cpc	r26, r16
      fc:	93 07       	cpc	r25, r19
      fe:	86 07       	cpc	r24, r22
     100:	79 07       	cpc	r23, r25
     102:	6c 07       	cpc	r22, r28
     104:	5f 07       	cpc	r21, r31
     106:	52 07       	cpc	r21, r18
     108:	45 07       	cpc	r20, r21
     10a:	38 07       	cpc	r19, r24
     10c:	2b 07       	cpc	r18, r27
     10e:	1e 07       	cpc	r17, r30
     110:	11 07       	cpc	r17, r17
     112:	04 07       	cpc	r16, r20
     114:	f7 06       	cpc	r15, r23
     116:	ea 06       	cpc	r14, r26
     118:	dd 06       	cpc	r13, r29
     11a:	d0 06       	cpc	r13, r16
     11c:	c3 06       	cpc	r12, r19
     11e:	b6 06       	cpc	r11, r22
     120:	a9 06       	cpc	r10, r25
     122:	9c 06       	cpc	r9, r28
     124:	8f 06       	cpc	r8, r31
     126:	82 06       	cpc	r8, r18
     128:	75 06       	cpc	r7, r21
     12a:	68 06       	cpc	r6, r24
     12c:	5b 06       	cpc	r5, r27

0000012e <endpoint_config_table>:
     12e:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000138 <device_descriptor>:
     138:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     148:	03 01                                               ..

0000014a <config1_descriptor>:
     14a:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15a:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16a:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17a:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18a:	40 00 00                                            @..

0000018d <string0>:
     18d:	04 03 09 04                                         ....

00000191 <string1>:
     191:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1a1:	65 00 00 00                                         e...

000001a5 <string2>:
     1a5:	06 03 4d 00 32 00 00 00                             ..M.2...

000001ad <string3>:
     1ad:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001b7 <descriptor_list>:
     1b7:	00 01 00 00 38 01 12 00 02 00 00 4a 01 43 00 03     ....8......J.C..
     1c7:	00 00 8d 01 04 01 03 09 04 91 01 12 02 03 09 04     ................
     1d7:	a5 01 06 03 03 09 04 ad 01 08 00                    ...........

000001e2 <__ctors_end>:
     1e2:	11 24       	eor	r1, r1
     1e4:	1f be       	out	0x3f, r1	; 63
     1e6:	cf ef       	ldi	r28, 0xFF	; 255
     1e8:	da e0       	ldi	r29, 0x0A	; 10
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
     1ee:	11 e0       	ldi	r17, 0x01	; 1
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	e4 e3       	ldi	r30, 0x34	; 52
     1f6:	fc e2       	ldi	r31, 0x2C	; 44
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x10>
     1fa:	05 90       	lpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	a0 31       	cpi	r26, 0x10	; 16
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0xc>

00000204 <__do_clear_bss>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a0 e1       	ldi	r26, 0x10	; 16
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	a4 31       	cpi	r26, 0x14	; 20
     210:	b1 07       	cpc	r27, r17
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 10 01 	call	0x220	; 0x220 <main>
     218:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
char set_register_val(char address, char reg, char val);
void init(void);
void write(int);

int main(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	init();
     228:	0e 94 2d 01 	call	0x25a	; 0x25a <init>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0

}
     230:	cf 91       	pop	r28
     232:	df 91       	pop	r29
     234:	08 95       	ret

00000236 <write>:

void write(int a)
{
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	00 d0       	rcall	.+0      	; 0x23c <write+0x6>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	9a 83       	std	Y+2, r25	; 0x02
     242:	89 83       	std	Y+1, r24	; 0x01
	m_usb_tx_int(a);
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	9a 81       	ldd	r25, Y+2	; 0x02
     248:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <m_usb_tx_int>
	m_usb_tx_push();
     24c:	0e 94 c1 09 	call	0x1382	; 0x1382 <m_usb_tx_push>
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	cf 91       	pop	r28
     256:	df 91       	pop	r29
     258:	08 95       	ret

0000025a <init>:
void init()
{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	df 93       	push	r29
     260:	cf 93       	push	r28
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	a0 97       	sbiw	r28, 0x20	; 32
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     272:	81 e6       	ldi	r24, 0x61	; 97
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	20 e8       	ldi	r18, 0x80	; 128
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
     27c:	81 e6       	ldi	r24, 0x61	; 97
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	10 82       	st	Z, r1
	
	// ENABLE PULLUPS
	set(PORTD,0);
     284:	8b e2       	ldi	r24, 0x2B	; 43
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	2b e2       	ldi	r18, 0x2B	; 43
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	21 60       	ori	r18, 0x01	; 1
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
	set(PORTD,1);
     296:	8b e2       	ldi	r24, 0x2B	; 43
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	2b e2       	ldi	r18, 0x2B	; 43
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	f9 01       	movw	r30, r18
     2a0:	20 81       	ld	r18, Z
     2a2:	22 60       	ori	r18, 0x02	; 2
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
	set(PORTD,2);
     2a8:	8b e2       	ldi	r24, 0x2B	; 43
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2b e2       	ldi	r18, 0x2B	; 43
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	24 60       	ori	r18, 0x04	; 4
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	m_usb_init();
     2ba:	0e 94 0d 04 	call	0x81a	; 0x81a <m_usb_init>
	while(!m_usb_isconnected());
     2be:	00 00       	nop
     2c0:	0e 94 41 04 	call	0x882	; 0x882 <m_usb_isconnected>
     2c4:	88 23       	and	r24, r24
     2c6:	e1 f3       	breq	.-8      	; 0x2c0 <init+0x66>
	m_green(ON);
     2c8:	8d e2       	ldi	r24, 0x2D	; 45
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2d e2       	ldi	r18, 0x2D	; 45
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	20 81       	ld	r18, Z
     2d4:	24 60       	ori	r18, 0x04	; 4
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
     2da:	8e e2       	ldi	r24, 0x2E	; 46
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	2e e2       	ldi	r18, 0x2E	; 46
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	f9 01       	movw	r30, r18
     2e4:	20 81       	ld	r18, Z
     2e6:	2b 7f       	andi	r18, 0xFB	; 251
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a8 e4       	ldi	r26, 0x48	; 72
     2f2:	b3 e4       	ldi	r27, 0x43	; 67
     2f4:	8f 83       	std	Y+7, r24	; 0x07
     2f6:	98 87       	std	Y+8, r25	; 0x08
     2f8:	a9 87       	std	Y+9, r26	; 0x09
     2fa:	ba 87       	std	Y+10, r27	; 0x0a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2fc:	6f 81       	ldd	r22, Y+7	; 0x07
     2fe:	78 85       	ldd	r23, Y+8	; 0x08
     300:	89 85       	ldd	r24, Y+9	; 0x09
     302:	9a 85       	ldd	r25, Y+10	; 0x0a
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	4a e7       	ldi	r20, 0x7A	; 122
     30a:	55 e4       	ldi	r21, 0x45	; 69
     30c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__mulsf3>
     310:	dc 01       	movw	r26, r24
     312:	cb 01       	movw	r24, r22
     314:	8b 87       	std	Y+11, r24	; 0x0b
     316:	9c 87       	std	Y+12, r25	; 0x0c
     318:	ad 87       	std	Y+13, r26	; 0x0d
     31a:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	6b 85       	ldd	r22, Y+11	; 0x0b
     320:	7c 85       	ldd	r23, Y+12	; 0x0c
     322:	8d 85       	ldd	r24, Y+13	; 0x0d
     324:	9e 85       	ldd	r25, Y+14	; 0x0e
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e8       	ldi	r20, 0x80	; 128
     32c:	5f e3       	ldi	r21, 0x3F	; 63
     32e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__ltsf2>
     332:	88 23       	and	r24, r24
     334:	0c f0       	brlt	.+2      	; 0x338 <init+0xde>
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	11 23       	and	r17, r17
     33a:	29 f0       	breq	.+10     	; 0x346 <init+0xec>
		__ticks = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	98 8b       	std	Y+16, r25	; 0x10
     342:	8f 87       	std	Y+15, r24	; 0x0f
     344:	46 c0       	rjmp	.+140    	; 0x3d2 <init+0x178>
	else if (__tmp > 65535)
     346:	11 e0       	ldi	r17, 0x01	; 1
     348:	6b 85       	ldd	r22, Y+11	; 0x0b
     34a:	7c 85       	ldd	r23, Y+12	; 0x0c
     34c:	8d 85       	ldd	r24, Y+13	; 0x0d
     34e:	9e 85       	ldd	r25, Y+14	; 0x0e
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	4f e7       	ldi	r20, 0x7F	; 127
     356:	57 e4       	ldi	r21, 0x47	; 71
     358:	0e 94 86 12 	call	0x250c	; 0x250c <__gtsf2>
     35c:	18 16       	cp	r1, r24
     35e:	0c f0       	brlt	.+2      	; 0x362 <init+0x108>
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	11 23       	and	r17, r17
     364:	61 f1       	breq	.+88     	; 0x3be <init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     366:	6f 81       	ldd	r22, Y+7	; 0x07
     368:	78 85       	ldd	r23, Y+8	; 0x08
     36a:	89 85       	ldd	r24, Y+9	; 0x09
     36c:	9a 85       	ldd	r25, Y+10	; 0x0a
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e2       	ldi	r20, 0x20	; 32
     374:	51 e4       	ldi	r21, 0x41	; 65
     376:	0e 94 8c 11 	call	0x2318	; 0x2318 <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fixunssfsi>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	98 8b       	std	Y+16, r25	; 0x10
     38c:	8f 87       	std	Y+15, r24	; 0x0f
     38e:	12 c0       	rjmp	.+36     	; 0x3b4 <init+0x15a>
     390:	80 e9       	ldi	r24, 0x90	; 144
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	9a 8b       	std	Y+18, r25	; 0x12
     396:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     398:	89 89       	ldd	r24, Y+17	; 0x11
     39a:	9a 89       	ldd	r25, Y+18	; 0x12
     39c:	8c 01       	movw	r16, r24
     39e:	c8 01       	movw	r24, r16
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <init+0x146>
     3a4:	8c 01       	movw	r16, r24
     3a6:	1a 8b       	std	Y+18, r17	; 0x12
     3a8:	09 8b       	std	Y+17, r16	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ac:	98 89       	ldd	r25, Y+16	; 0x10
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	98 8b       	std	Y+16, r25	; 0x10
     3b2:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3b6:	98 89       	ldd	r25, Y+16	; 0x10
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	51 f7       	brne	.-44     	; 0x390 <init+0x136>
     3bc:	17 c0       	rjmp	.+46     	; 0x3ec <init+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3be:	6b 85       	ldd	r22, Y+11	; 0x0b
     3c0:	7c 85       	ldd	r23, Y+12	; 0x0c
     3c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     3c6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	98 8b       	std	Y+16, r25	; 0x10
     3d0:	8f 87       	std	Y+15, r24	; 0x0f
     3d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d4:	98 89       	ldd	r25, Y+16	; 0x10
     3d6:	9c 8b       	std	Y+20, r25	; 0x14
     3d8:	8b 8b       	std	Y+19, r24	; 0x13
     3da:	8b 89       	ldd	r24, Y+19	; 0x13
     3dc:	9c 89       	ldd	r25, Y+20	; 0x14
     3de:	8c 01       	movw	r16, r24
     3e0:	f8 01       	movw	r30, r16
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <init+0x188>
     3e6:	8f 01       	movw	r16, r30
     3e8:	1c 8b       	std	Y+20, r17	; 0x14
     3ea:	0b 8b       	std	Y+19, r16	; 0x13
	m_wait(200);
	m_green(OFF);
     3ec:	8d e2       	ldi	r24, 0x2D	; 45
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2d e2       	ldi	r18, 0x2D	; 45
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	24 60       	ori	r18, 0x04	; 4
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
     3fe:	8e e2       	ldi	r24, 0x2E	; 46
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	2e e2       	ldi	r18, 0x2E	; 46
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	f9 01       	movw	r30, r18
     408:	20 81       	ld	r18, Z
     40a:	24 60       	ori	r18, 0x04	; 4
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     410:	88 eb       	ldi	r24, 0xB8	; 184
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	2c e0       	ldi	r18, 0x0C	; 12
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     41a:	89 e6       	ldi	r24, 0x69	; 105
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	29 e6       	ldi	r18, 0x69	; 105
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	20 81       	ld	r18, Z
     426:	20 62       	ori	r18, 0x20	; 32
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
     42c:	89 e6       	ldi	r24, 0x69	; 105
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	29 e6       	ldi	r18, 0x69	; 105
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	2f 7e       	andi	r18, 0xEF	; 239
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
	set(EIMSK,INT2); // demask the interrupt
     43e:	8d e3       	ldi	r24, 0x3D	; 61
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	2d e3       	ldi	r18, 0x3D	; 61
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	24 60       	ori	r18, 0x04	; 4
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	sei(); // enable global interrupts
     450:	78 94       	sei
	char address = 0x69;
     452:	89 e6       	ldi	r24, 0x69	; 105
     454:	8d 83       	std	Y+5, r24	; 0x05
	char reg  = 59;
     456:	8b e3       	ldi	r24, 0x3B	; 59
     458:	8e 83       	std	Y+6, r24	; 0x06
	char list[12];
	set_register_val(address, 107,0);
     45a:	8d 81       	ldd	r24, Y+5	; 0x05
     45c:	6b e6       	ldi	r22, 0x6B	; 107
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	0e 94 c3 02 	call	0x586	; 0x586 <set_register_val>
	set_register_val(address, 27, 8);
     464:	8d 81       	ldd	r24, Y+5	; 0x05
     466:	6b e1       	ldi	r22, 0x1B	; 27
     468:	48 e0       	ldi	r20, 0x08	; 8
     46a:	0e 94 c3 02 	call	0x586	; 0x586 <set_register_val>
     46e:	01 c0       	rjmp	.+2      	; 0x472 <init+0x218>
			m_usb_tx_char(list[8]);
			m_usb_tx_char(list[9]);
			m_usb_tx_char(list[10]);
			m_usb_tx_char(list[11]);
		}			
	}
     470:	00 00       	nop
	char list[12];
	set_register_val(address, 107,0);
	set_register_val(address, 27, 8);
	while(1)
	{
		if(m_usb_rx_available())
     472:	0e 94 95 04 	call	0x92a	; 0x92a <m_usb_rx_available>
     476:	88 23       	and	r24, r24
     478:	d9 f3       	breq	.-10     	; 0x470 <init+0x216>
		{
			m_green(TOGGLE);
     47a:	8d e2       	ldi	r24, 0x2D	; 45
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	2d e2       	ldi	r18, 0x2D	; 45
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	24 60       	ori	r18, 0x04	; 4
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
     48c:	8e e2       	ldi	r24, 0x2E	; 46
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	2e e2       	ldi	r18, 0x2E	; 46
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	30 81       	ld	r19, Z
     498:	24 e0       	ldi	r18, 0x04	; 4
     49a:	23 27       	eor	r18, r19
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
			m_usb_rx_char();
     4a0:	0e 94 4a 04 	call	0x894	; 0x894 <m_usb_rx_char>
			int offset= 59;
     4a4:	8b e3       	ldi	r24, 0x3B	; 59
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
			int start = 0;
     4ac:	1c 82       	std	Y+4, r1	; 0x04
     4ae:	1b 82       	std	Y+3, r1	; 0x03
			for(start; start+offset <= 72; start++)
     4b0:	3b c0       	rjmp	.+118    	; 0x528 <init+0x2ce>
			{
				if(start+offset == 65)
     4b2:	2b 81       	ldd	r18, Y+3	; 0x03
     4b4:	3c 81       	ldd	r19, Y+4	; 0x04
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	82 0f       	add	r24, r18
     4bc:	93 1f       	adc	r25, r19
     4be:	81 34       	cpi	r24, 0x41	; 65
     4c0:	91 05       	cpc	r25, r1
     4c2:	29 f4       	brne	.+10     	; 0x4ce <init+0x274>
				{
					offset +=2;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	02 96       	adiw	r24, 0x02	; 2
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	89 83       	std	Y+1, r24	; 0x01
				}
				list[(start/2)*2 + (1-start%2)] = get_register_val(address, start + offset);
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	9c 81       	ldd	r25, Y+4	; 0x04
     4d2:	99 23       	and	r25, r25
     4d4:	0c f4       	brge	.+2      	; 0x4d8 <init+0x27e>
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	95 95       	asr	r25
     4da:	87 95       	ror	r24
     4dc:	9c 01       	movw	r18, r24
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	8b 81       	ldd	r24, Y+3	; 0x03
     4e4:	9c 81       	ldd	r25, Y+4	; 0x04
     4e6:	42 e0       	ldi	r20, 0x02	; 2
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	ba 01       	movw	r22, r20
     4ec:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__divmodhi4>
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	ba 01       	movw	r22, r20
     4f6:	68 1b       	sub	r22, r24
     4f8:	79 0b       	sbc	r23, r25
     4fa:	cb 01       	movw	r24, r22
     4fc:	89 01       	movw	r16, r18
     4fe:	08 0f       	add	r16, r24
     500:	19 1f       	adc	r17, r25
     502:	9b 81       	ldd	r25, Y+3	; 0x03
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	98 0f       	add	r25, r24
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	69 2f       	mov	r22, r25
     50c:	0e 94 4e 03 	call	0x69c	; 0x69c <get_register_val>
     510:	28 2f       	mov	r18, r24
     512:	ce 01       	movw	r24, r28
     514:	45 96       	adiw	r24, 0x15	; 21
     516:	80 0f       	add	r24, r16
     518:	91 1f       	adc	r25, r17
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
		{
			m_green(TOGGLE);
			m_usb_rx_char();
			int offset= 59;
			int start = 0;
			for(start; start+offset <= 72; start++)
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	9c 83       	std	Y+4, r25	; 0x04
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	2b 81       	ldd	r18, Y+3	; 0x03
     52a:	3c 81       	ldd	r19, Y+4	; 0x04
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	89 34       	cpi	r24, 0x49	; 73
     536:	91 05       	cpc	r25, r1
     538:	0c f4       	brge	.+2      	; 0x53c <init+0x2e2>
     53a:	bb cf       	rjmp	.-138    	; 0x4b2 <init+0x258>
					offset +=2;
				}
				list[(start/2)*2 + (1-start%2)] = get_register_val(address, start + offset);
				
			}
			m_usb_tx_char(list[0]);
     53c:	8d 89       	ldd	r24, Y+21	; 0x15
     53e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[1]);
     542:	8e 89       	ldd	r24, Y+22	; 0x16
     544:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[2]);
     548:	8f 89       	ldd	r24, Y+23	; 0x17
     54a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[3]);
     54e:	88 8d       	ldd	r24, Y+24	; 0x18
     550:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[4]);
     554:	89 8d       	ldd	r24, Y+25	; 0x19
     556:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[5]);
     55a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     55c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[6]);
     560:	8b 8d       	ldd	r24, Y+27	; 0x1b
     562:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[7]);
     566:	8c 8d       	ldd	r24, Y+28	; 0x1c
     568:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[8]);
     56c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     56e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[9]);
     572:	8e 8d       	ldd	r24, Y+30	; 0x1e
     574:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[10]);
     578:	8f 8d       	ldd	r24, Y+31	; 0x1f
     57a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
			m_usb_tx_char(list[11]);
     57e:	88 a1       	ldd	r24, Y+32	; 0x20
     580:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
		}			
	}
     584:	76 cf       	rjmp	.-276    	; 0x472 <init+0x218>

00000586 <set_register_val>:
	
}
char set_register_val(char address, char reg, char val)
{
     586:	df 93       	push	r29
     588:	cf 93       	push	r28
     58a:	00 d0       	rcall	.+0      	; 0x58c <set_register_val+0x6>
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	6a 83       	std	Y+2, r22	; 0x02
     596:	4b 83       	std	Y+3, r20	; 0x03
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     598:	8c eb       	ldi	r24, 0xBC	; 188
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	24 ea       	ldi	r18, 0xA4	; 164
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     5a2:	00 00       	nop
     5a4:	8c eb       	ldi	r24, 0xBC	; 188
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	88 23       	and	r24, r24
     5ae:	d4 f7       	brge	.-12     	; 0x5a4 <set_register_val+0x1e>
	
	// ADDRESS
	TWDR = address<<1;
     5b0:	8b eb       	ldi	r24, 0xBB	; 187
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	22 0f       	add	r18, r18
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     5bc:	8c eb       	ldi	r24, 0xBC	; 188
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	24 e8       	ldi	r18, 0x84	; 132
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     5c6:	00 00       	nop
     5c8:	8c eb       	ldi	r24, 0xBC	; 188
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	88 23       	and	r24, r24
     5d2:	d4 f7       	brge	.-12     	; 0x5c8 <set_register_val+0x42>
	if((TWSR & 0xF8) != 0x18){ // ACK was not received - may not be connected/listening
     5d4:	89 eb       	ldi	r24, 0xB9	; 185
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	fc 01       	movw	r30, r24
     5da:	80 81       	ld	r24, Z
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	90 70       	andi	r25, 0x00	; 0
     5e4:	88 31       	cpi	r24, 0x18	; 24
     5e6:	91 05       	cpc	r25, r1
     5e8:	39 f0       	breq	.+14     	; 0x5f8 <set_register_val+0x72>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     5ea:	8c eb       	ldi	r24, 0xBC	; 188
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	24 e9       	ldi	r18, 0x94	; 148
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
		return 0;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	4c c0       	rjmp	.+152    	; 0x690 <set_register_val+0x10a>
	}
	// send the register address
	TWDR = reg;
     5f8:	8b eb       	ldi	r24, 0xBB	; 187
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2a 81       	ldd	r18, Y+2	; 0x02
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
		
	TWCR = (1<<TWINT) | (1<<TWEN);
     602:	8c eb       	ldi	r24, 0xBC	; 188
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	24 e8       	ldi	r18, 0x84	; 132
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     60c:	00 00       	nop
     60e:	8c eb       	ldi	r24, 0xBC	; 188
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	d4 f7       	brge	.-12     	; 0x60e <set_register_val+0x88>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     61a:	89 eb       	ldi	r24, 0xB9	; 185
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 7f       	andi	r24, 0xF8	; 248
     628:	90 70       	andi	r25, 0x00	; 0
     62a:	88 32       	cpi	r24, 0x28	; 40
     62c:	91 05       	cpc	r25, r1
     62e:	39 f0       	breq	.+14     	; 0x63e <set_register_val+0xb8>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     630:	8c eb       	ldi	r24, 0xBC	; 188
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	24 e9       	ldi	r18, 0x94	; 148
     636:	fc 01       	movw	r30, r24
     638:	20 83       	st	Z, r18
		return 0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	29 c0       	rjmp	.+82     	; 0x690 <set_register_val+0x10a>
	}
	
	TWDR = val;
     63e:	8b eb       	ldi	r24, 0xBB	; 187
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	2b 81       	ldd	r18, Y+3	; 0x03
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     648:	8c eb       	ldi	r24, 0xBC	; 188
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	24 e8       	ldi	r18, 0x84	; 132
     64e:	fc 01       	movw	r30, r24
     650:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     652:	00 00       	nop
     654:	8c eb       	ldi	r24, 0xBC	; 188
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	d4 f7       	brge	.-12     	; 0x654 <set_register_val+0xce>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     660:	89 eb       	ldi	r24, 0xB9	; 185
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	88 7f       	andi	r24, 0xF8	; 248
     66e:	90 70       	andi	r25, 0x00	; 0
     670:	88 32       	cpi	r24, 0x28	; 40
     672:	91 05       	cpc	r25, r1
     674:	39 f0       	breq	.+14     	; 0x684 <set_register_val+0xfe>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     676:	8c eb       	ldi	r24, 0xBC	; 188
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	24 e9       	ldi	r18, 0x94	; 148
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
		return 0;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	06 c0       	rjmp	.+12     	; 0x690 <set_register_val+0x10a>
	}
	
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     684:	8c eb       	ldi	r24, 0xBC	; 188
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	24 e9       	ldi	r18, 0x94	; 148
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
	return 1;	
     68e:	81 e0       	ldi	r24, 0x01	; 1
}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <get_register_val>:

char get_register_val(char address, char reg)
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <get_register_val+0x6>
     6a2:	0f 92       	push	r0
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	8a 83       	std	Y+2, r24	; 0x02
     6aa:	6b 83       	std	Y+3, r22	; 0x03
	char data = 0;
     6ac:	19 82       	std	Y+1, r1	; 0x01
		
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     6ae:	8c eb       	ldi	r24, 0xBC	; 188
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	24 ea       	ldi	r18, 0xA4	; 164
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     6b8:	00 00       	nop
     6ba:	8c eb       	ldi	r24, 0xBC	; 188
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	88 23       	and	r24, r24
     6c4:	d4 f7       	brge	.-12     	; 0x6ba <get_register_val+0x1e>
	
	// ADDRESS
	TWDR = address<<1;
     6c6:	8b eb       	ldi	r24, 0xBB	; 187
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2a 81       	ldd	r18, Y+2	; 0x02
     6cc:	22 0f       	add	r18, r18
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     6d2:	8c eb       	ldi	r24, 0xBC	; 188
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	24 e8       	ldi	r18, 0x84	; 132
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     6dc:	00 00       	nop
     6de:	8c eb       	ldi	r24, 0xBC	; 188
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	88 23       	and	r24, r24
     6e8:	d4 f7       	brge	.-12     	; 0x6de <get_register_val+0x42>
	if((TWSR & 0xF8) != 0x18){ // ACK was not received - may not be connected/listening
     6ea:	89 eb       	ldi	r24, 0xB9	; 185
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	88 7f       	andi	r24, 0xF8	; 248
     6f8:	90 70       	andi	r25, 0x00	; 0
     6fa:	88 31       	cpi	r24, 0x18	; 24
     6fc:	91 05       	cpc	r25, r1
     6fe:	39 f0       	breq	.+14     	; 0x70e <get_register_val+0x72>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     700:	8c eb       	ldi	r24, 0xBC	; 188
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	24 e9       	ldi	r18, 0x94	; 148
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
		return 0;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	80 c0       	rjmp	.+256    	; 0x80e <get_register_val+0x172>
	}
	// send the register address
	TWDR = reg;
     70e:	8b eb       	ldi	r24, 0xBB	; 187
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2b 81       	ldd	r18, Y+3	; 0x03
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
		
	TWCR = (1<<TWINT) | (1<<TWEN);
     718:	8c eb       	ldi	r24, 0xBC	; 188
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	24 e8       	ldi	r18, 0x84	; 132
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     722:	00 00       	nop
     724:	8c eb       	ldi	r24, 0xBC	; 188
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	88 23       	and	r24, r24
     72e:	d4 f7       	brge	.-12     	; 0x724 <get_register_val+0x88>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     730:	89 eb       	ldi	r24, 0xB9	; 185
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	88 7f       	andi	r24, 0xF8	; 248
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	88 32       	cpi	r24, 0x28	; 40
     742:	91 05       	cpc	r25, r1
     744:	39 f0       	breq	.+14     	; 0x754 <get_register_val+0xb8>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     746:	8c eb       	ldi	r24, 0xBC	; 188
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	24 e9       	ldi	r18, 0x94	; 148
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
		return 0;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	5d c0       	rjmp	.+186    	; 0x80e <get_register_val+0x172>
	}
	// send repeat address and enter master receiver mode
	TWCR = (1<<TWSTA) | (1<<TWINT) | (1<<TWEN);
     754:	8c eb       	ldi	r24, 0xBC	; 188
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	24 ea       	ldi	r18, 0xA4	; 164
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     75e:	00 00       	nop
     760:	8c eb       	ldi	r24, 0xBC	; 188
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	88 23       	and	r24, r24
     76a:	d4 f7       	brge	.-12     	; 0x760 <get_register_val+0xc4>
			
			
	TWDR = 	(address << 1) | 1;
     76c:	8b eb       	ldi	r24, 0xBB	; 187
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	22 2f       	mov	r18, r18
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	22 0f       	add	r18, r18
     778:	33 1f       	adc	r19, r19
     77a:	21 60       	ori	r18, 0x01	; 1
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     780:	8c eb       	ldi	r24, 0xBC	; 188
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	24 e8       	ldi	r18, 0x84	; 132
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     78a:	00 00       	nop
     78c:	8c eb       	ldi	r24, 0xBC	; 188
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	d4 f7       	brge	.-12     	; 0x78c <get_register_val+0xf0>
	if((TWSR & 0xF8) != 0x40){ // ACK was not received - may not be connected/listening
     798:	89 eb       	ldi	r24, 0xB9	; 185
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	88 7f       	andi	r24, 0xF8	; 248
     7a6:	90 70       	andi	r25, 0x00	; 0
     7a8:	80 34       	cpi	r24, 0x40	; 64
     7aa:	91 05       	cpc	r25, r1
     7ac:	39 f0       	breq	.+14     	; 0x7bc <get_register_val+0x120>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     7ae:	8c eb       	ldi	r24, 0xBC	; 188
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	24 e9       	ldi	r18, 0x94	; 148
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
		return 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	29 c0       	rjmp	.+82     	; 0x80e <get_register_val+0x172>
	}
		
	TWCR = (1<<TWINT) | (0<<TWEA) | (1<<TWEN);
     7bc:	8c eb       	ldi	r24, 0xBC	; 188
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	24 e8       	ldi	r18, 0x84	; 132
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){};
     7c6:	00 00       	nop
     7c8:	8c eb       	ldi	r24, 0xBC	; 188
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	88 23       	and	r24, r24
     7d2:	d4 f7       	brge	.-12     	; 0x7c8 <get_register_val+0x12c>
	if((TWSR & 0xF8) != 0x58){ // ACK was not received - may not be connected/listening
     7d4:	89 eb       	ldi	r24, 0xB9	; 185
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	88 7f       	andi	r24, 0xF8	; 248
     7e2:	90 70       	andi	r25, 0x00	; 0
     7e4:	88 35       	cpi	r24, 0x58	; 88
     7e6:	91 05       	cpc	r25, r1
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <get_register_val+0x15c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     7ea:	8c eb       	ldi	r24, 0xBC	; 188
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	24 e9       	ldi	r18, 0x94	; 148
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
		return 0;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0b c0       	rjmp	.+22     	; 0x80e <get_register_val+0x172>
	}		
		
	data = TWDR;
     7f8:	8b eb       	ldi	r24, 0xBB	; 187
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);	
     802:	8c eb       	ldi	r24, 0xBC	; 188
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	24 e9       	ldi	r18, 0x94	; 148
     808:	fc 01       	movw	r30, r24
     80a:	20 83       	st	Z, r18
	return data;	
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <m_usb_init>:
 *
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
	HW_CONFIG();
     822:	87 ed       	ldi	r24, 0xD7	; 215
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
        USB_FREEZE();				// enable USB
     82c:	88 ed       	ldi	r24, 0xD8	; 216
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	20 ea       	ldi	r18, 0xA0	; 160
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     836:	89 e4       	ldi	r24, 0x49	; 73
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	22 e1       	ldi	r18, 0x12	; 18
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     840:	00 00       	nop
     842:	89 e4       	ldi	r24, 0x49	; 73
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	88 2f       	mov	r24, r24
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	81 70       	andi	r24, 0x01	; 1
     850:	90 70       	andi	r25, 0x00	; 0
     852:	00 97       	sbiw	r24, 0x00	; 0
     854:	b1 f3       	breq	.-20     	; 0x842 <m_usb_init+0x28>
        USB_CONFIG();				// start USB clock
     856:	88 ed       	ldi	r24, 0xD8	; 216
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	20 e9       	ldi	r18, 0x90	; 144
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
        UDCON = 0;				// enable attach resistor
     860:	80 ee       	ldi	r24, 0xE0	; 224
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	10 82       	st	Z, r1
	usb_configuration = 0;
     868:	10 92 10 01 	sts	0x0110, r1
	cdc_line_rtsdtr = 0;
     86c:	10 92 13 01 	sts	0x0113, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     870:	82 ee       	ldi	r24, 0xE2	; 226
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2c e0       	ldi	r18, 0x0C	; 12
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
	sei();
     87a:	78 94       	sei
}
     87c:	cf 91       	pop	r28
     87e:	df 91       	pop	r29
     880:	08 95       	ret

00000882 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
	return (char)usb_configuration;
     88a:	80 91 10 01 	lds	r24, 0x0110
}
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <m_usb_rx_char>:

// get the next character, or -1 if nothing received
char m_usb_rx_char(void)
{
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	00 d0       	rcall	.+0      	; 0x89a <m_usb_rx_char+0x6>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     89e:	8f e5       	ldi	r24, 0x5F	; 95
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	89 83       	std	Y+1, r24	; 0x01
	cli();
     8a8:	f8 94       	cli
	if (!usb_configuration) {
     8aa:	80 91 10 01 	lds	r24, 0x0110
     8ae:	88 23       	and	r24, r24
     8b0:	39 f4       	brne	.+14     	; 0x8c0 <m_usb_rx_char+0x2c>
		SREG = intr_state;
     8b2:	8f e5       	ldi	r24, 0x5F	; 95
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	29 81       	ldd	r18, Y+1	; 0x01
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
		return -1;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	30 c0       	rjmp	.+96     	; 0x920 <m_usb_rx_char+0x8c>
	}
	UENUM = CDC_RX_ENDPOINT;
     8c0:	89 ee       	ldi	r24, 0xE9	; 233
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	23 e0       	ldi	r18, 0x03	; 3
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
     8ca:	88 ee       	ldi	r24, 0xE8	; 232
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	80 72       	andi	r24, 0x20	; 32
     8d8:	90 70       	andi	r25, 0x00	; 0
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	39 f4       	brne	.+14     	; 0x8ec <m_usb_rx_char+0x58>
		// no data in buffer
		SREG = intr_state;
     8de:	8f e5       	ldi	r24, 0x5F	; 95
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	29 81       	ldd	r18, Y+1	; 0x01
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
		return -1;
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	1a c0       	rjmp	.+52     	; 0x920 <m_usb_rx_char+0x8c>
	}
	// take one byte out of the buffer
	c = UEDATX;
     8ec:	81 ef       	ldi	r24, 0xF1	; 241
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	8a 83       	std	Y+2, r24	; 0x02
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     8f6:	88 ee       	ldi	r24, 0xE8	; 232
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 72       	andi	r24, 0x20	; 32
     904:	90 70       	andi	r25, 0x00	; 0
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	29 f4       	brne	.+10     	; 0x914 <m_usb_rx_char+0x80>
     90a:	88 ee       	ldi	r24, 0xE8	; 232
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	2b e6       	ldi	r18, 0x6B	; 107
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
	SREG = intr_state;
     914:	8f e5       	ldi	r24, 0x5F	; 95
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
	return (char)c;
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <m_usb_rx_available>:

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	00 d0       	rcall	.+0      	; 0x930 <m_usb_rx_available+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	uint8_t n=0, intr_state;
     934:	19 82       	std	Y+1, r1	; 0x01

	intr_state = SREG;
     936:	8f e5       	ldi	r24, 0x5F	; 95
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	8a 83       	std	Y+2, r24	; 0x02
	cli();
     940:	f8 94       	cli
	if (usb_configuration) {
     942:	80 91 10 01 	lds	r24, 0x0110
     946:	88 23       	and	r24, r24
     948:	51 f0       	breq	.+20     	; 0x95e <m_usb_rx_available+0x34>
		UENUM = CDC_RX_ENDPOINT;
     94a:	89 ee       	ldi	r24, 0xE9	; 233
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	23 e0       	ldi	r18, 0x03	; 3
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18
		n = UEBCLX;
     954:	82 ef       	ldi	r24, 0xF2	; 242
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	89 83       	std	Y+1, r24	; 0x01
	}
	SREG = intr_state;
     95e:	8f e5       	ldi	r24, 0x5F	; 95
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2a 81       	ldd	r18, Y+2	; 0x02
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
	return (unsigned char)n;
     968:	89 81       	ldd	r24, Y+1	; 0x01
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <m_usb_rx_flush>:

// discard any buffered input
void m_usb_rx_flush(void)
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	0f 92       	push	r0
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	uint8_t intr_state;

	if (usb_configuration) {
     97e:	80 91 10 01 	lds	r24, 0x0110
     982:	88 23       	and	r24, r24
     984:	01 f1       	breq	.+64     	; 0x9c6 <m_usb_rx_flush+0x52>
		intr_state = SREG;
     986:	8f e5       	ldi	r24, 0x5F	; 95
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	80 81       	ld	r24, Z
     98e:	89 83       	std	Y+1, r24	; 0x01
		cli();
     990:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     992:	89 ee       	ldi	r24, 0xE9	; 233
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	23 e0       	ldi	r18, 0x03	; 3
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
		while ((UEINTX & (1<<RWAL))) {
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <m_usb_rx_flush+0x34>
			UEINTX = 0x6B; 
     99e:	88 ee       	ldi	r24, 0xE8	; 232
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2b e6       	ldi	r18, 0x6B	; 107
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     9a8:	88 ee       	ldi	r24, 0xE8	; 232
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	fc 01       	movw	r30, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 72       	andi	r24, 0x20	; 32
     9b6:	90 70       	andi	r25, 0x00	; 0
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	89 f7       	brne	.-30     	; 0x99e <m_usb_rx_flush+0x2a>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     9bc:	8f e5       	ldi	r24, 0x5F	; 95
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	29 81       	ldd	r18, Y+1	; 0x01
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
	}
}
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <m_usb_tx_char>:

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <m_usb_tx_char+0x6>
     9d4:	0f 92       	push	r0
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     9dc:	80 91 10 01 	lds	r24, 0x0110
     9e0:	88 23       	and	r24, r24
     9e2:	11 f4       	brne	.+4      	; 0x9e8 <m_usb_tx_char+0x1a>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	73 c0       	rjmp	.+230    	; 0xace <m_usb_tx_char+0x100>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     9e8:	8f e5       	ldi	r24, 0x5F	; 95
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	80 81       	ld	r24, Z
     9f0:	89 83       	std	Y+1, r24	; 0x01
	cli();
     9f2:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     9f4:	89 ee       	ldi	r24, 0xE9	; 233
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	24 e0       	ldi	r18, 0x04	; 4
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     9fe:	80 91 12 01 	lds	r24, 0x0112
     a02:	88 23       	and	r24, r24
     a04:	99 f0       	breq	.+38     	; 0xa2c <m_usb_tx_char+0x5e>
		if (!(UEINTX & (1<<RWAL))) {
     a06:	88 ee       	ldi	r24, 0xE8	; 232
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	80 72       	andi	r24, 0x20	; 32
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	39 f4       	brne	.+14     	; 0xa28 <m_usb_tx_char+0x5a>
			SREG = intr_state;
     a1a:	8f e5       	ldi	r24, 0x5F	; 95
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	29 81       	ldd	r18, Y+1	; 0x01
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
			return -1;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	53 c0       	rjmp	.+166    	; 0xace <m_usb_tx_char+0x100>
		}
		transmit_previous_timeout = 0;
     a28:	10 92 12 01 	sts	0x0112, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     a2c:	84 ee       	ldi	r24, 0xE4	; 228
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	87 5e       	subi	r24, 0xE7	; 231
     a36:	8a 83       	std	Y+2, r24	; 0x02
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     a38:	88 ee       	ldi	r24, 0xE8	; 232
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	80 72       	andi	r24, 0x20	; 32
     a46:	90 70       	andi	r25, 0x00	; 0
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	81 f0       	breq	.+32     	; 0xa6c <m_usb_tx_char+0x9e>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     a4c:	81 ef       	ldi	r24, 0xF1	; 241
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2b 81       	ldd	r18, Y+3	; 0x03
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     a56:	88 ee       	ldi	r24, 0xE8	; 232
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	80 72       	andi	r24, 0x20	; 32
     a64:	90 70       	andi	r25, 0x00	; 0
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	21 f1       	breq	.+72     	; 0xab2 <m_usb_tx_char+0xe4>
     a6a:	28 c0       	rjmp	.+80     	; 0xabc <m_usb_tx_char+0xee>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     a6c:	8f e5       	ldi	r24, 0x5F	; 95
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	29 81       	ldd	r18, Y+1	; 0x01
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     a76:	84 ee       	ldi	r24, 0xE4	; 228
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	fc 01       	movw	r30, r24
     a7c:	90 81       	ld	r25, Z
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	98 17       	cp	r25, r24
     a82:	29 f4       	brne	.+10     	; 0xa8e <m_usb_tx_char+0xc0>
			transmit_previous_timeout = 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 12 01 	sts	0x0112, r24
			return -1;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	20 c0       	rjmp	.+64     	; 0xace <m_usb_tx_char+0x100>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     a8e:	80 91 10 01 	lds	r24, 0x0110
     a92:	88 23       	and	r24, r24
     a94:	11 f4       	brne	.+4      	; 0xa9a <m_usb_tx_char+0xcc>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	1a c0       	rjmp	.+52     	; 0xace <m_usb_tx_char+0x100>
		// get ready to try checking again
		intr_state = SREG;
     a9a:	8f e5       	ldi	r24, 0x5F	; 95
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	89 83       	std	Y+1, r24	; 0x01
		cli();
     aa4:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     aa6:	89 ee       	ldi	r24, 0xE9	; 233
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	24 e0       	ldi	r18, 0x04	; 4
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
	}
     ab0:	c3 cf       	rjmp	.-122    	; 0xa38 <m_usb_tx_char+0x6a>
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     ab2:	88 ee       	ldi	r24, 0xE8	; 232
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	2a e3       	ldi	r18, 0x3A	; 58
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     abc:	85 e0       	ldi	r24, 0x05	; 5
     abe:	80 93 11 01 	sts	0x0111, r24
	SREG = intr_state;
     ac2:	8f e5       	ldi	r24, 0x5F	; 95
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
	return 0;
     acc:	80 e0       	ldi	r24, 0x00	; 0
}
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	08 95       	ret

00000ada <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	00 d0       	rcall	.+0      	; 0xae0 <usb_serial_putchar_nowait+0x6>
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t intr_state;

	if (!usb_configuration) return -1;
     ae6:	80 91 10 01 	lds	r24, 0x0110
     aea:	88 23       	and	r24, r24
     aec:	11 f4       	brne	.+4      	; 0xaf2 <usb_serial_putchar_nowait+0x18>
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	39 c0       	rjmp	.+114    	; 0xb64 <__stack+0x65>
	intr_state = SREG;
     af2:	8f e5       	ldi	r24, 0x5F	; 95
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	89 83       	std	Y+1, r24	; 0x01
	cli();
     afc:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     afe:	89 ee       	ldi	r24, 0xE9	; 233
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	24 e0       	ldi	r18, 0x04	; 4
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
     b08:	88 ee       	ldi	r24, 0xE8	; 232
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	80 72       	andi	r24, 0x20	; 32
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	39 f4       	brne	.+14     	; 0xb2a <__stack+0x2b>
		// buffer is full
		SREG = intr_state;
     b1c:	8f e5       	ldi	r24, 0x5F	; 95
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	29 81       	ldd	r18, Y+1	; 0x01
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18
		return -1;
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	1d c0       	rjmp	.+58     	; 0xb64 <__stack+0x65>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     b2a:	81 ef       	ldi	r24, 0xF1	; 241
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	2a 81       	ldd	r18, Y+2	; 0x02
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     b34:	88 ee       	ldi	r24, 0xE8	; 232
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	80 72       	andi	r24, 0x20	; 32
     b42:	90 70       	andi	r25, 0x00	; 0
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	29 f4       	brne	.+10     	; 0xb52 <__stack+0x53>
     b48:	88 ee       	ldi	r24, 0xE8	; 232
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	2a e3       	ldi	r18, 0x3A	; 58
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     b52:	85 e0       	ldi	r24, 0x05	; 5
     b54:	80 93 11 01 	sts	0x0111, r24
	SREG = intr_state;
     b58:	8f e5       	ldi	r24, 0x5F	; 95
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	29 81       	ldd	r18, Y+1	; 0x01
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
	return 0;
     b62:	80 e0       	ldi	r24, 0x00	; 0
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	27 97       	sbiw	r28, 0x07	; 7
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	9d 83       	std	Y+5, r25	; 0x05
     b84:	8c 83       	std	Y+4, r24	; 0x04
     b86:	7f 83       	std	Y+7, r23	; 0x07
     b88:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b8a:	80 91 10 01 	lds	r24, 0x0110
     b8e:	88 23       	and	r24, r24
     b90:	11 f4       	brne	.+4      	; 0xb96 <usb_serial_write+0x28>
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	ed c3       	rjmp	.+2010   	; 0x1370 <usb_serial_write+0x802>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b96:	8f e5       	ldi	r24, 0x5F	; 95
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
     ba0:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     ba2:	89 ee       	ldi	r24, 0xE9	; 233
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	24 e0       	ldi	r18, 0x04	; 4
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     bac:	80 91 12 01 	lds	r24, 0x0112
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <usb_serial_write+0x48>
     bb4:	d2 c3       	rjmp	.+1956   	; 0x135a <usb_serial_write+0x7ec>
		if (!(UEINTX & (1<<RWAL))) {
     bb6:	88 ee       	ldi	r24, 0xE8	; 232
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	80 72       	andi	r24, 0x20	; 32
     bc4:	90 70       	andi	r25, 0x00	; 0
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <usb_serial_write+0x6a>
			SREG = intr_state;
     bca:	8f e5       	ldi	r24, 0x5F	; 95
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
			return -1;
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	cc c3       	rjmp	.+1944   	; 0x1370 <usb_serial_write+0x802>
		}
		transmit_previous_timeout = 0;
     bd8:	10 92 12 01 	sts	0x0112, r1
	}
	// each iteration of this loop transmits a packet
	while (size) {
     bdc:	be c3       	rjmp	.+1916   	; 0x135a <usb_serial_write+0x7ec>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     bde:	84 ee       	ldi	r24, 0xE4	; 228
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	87 5e       	subi	r24, 0xE7	; 231
     be8:	8b 83       	std	Y+3, r24	; 0x03
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     bea:	88 ee       	ldi	r24, 0xE8	; 232
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	80 72       	andi	r24, 0x20	; 32
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	91 f0       	breq	.+36     	; 0xc22 <usb_serial_write+0xb4>
			cli();
			UENUM = CDC_TX_ENDPOINT;
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     bfe:	82 ef       	ldi	r24, 0xF2	; 242
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	90 e4       	ldi	r25, 0x40	; 64
     c08:	f9 2f       	mov	r31, r25
     c0a:	f8 1b       	sub	r31, r24
     c0c:	8f 2f       	mov	r24, r31
     c0e:	8a 83       	std	Y+2, r24	; 0x02
		if (write_size > size) write_size = size;
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	82 17       	cp	r24, r18
     c1c:	93 07       	cpc	r25, r19
     c1e:	20 f1       	brcs	.+72     	; 0xc68 <usb_serial_write+0xfa>
     c20:	25 c0       	rjmp	.+74     	; 0xc6c <usb_serial_write+0xfe>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
     c22:	8f e5       	ldi	r24, 0x5F	; 95
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	29 81       	ldd	r18, Y+1	; 0x01
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     c2c:	84 ee       	ldi	r24, 0xE4	; 228
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	90 81       	ld	r25, Z
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	98 17       	cp	r25, r24
     c38:	29 f4       	brne	.+10     	; 0xc44 <usb_serial_write+0xd6>
				transmit_previous_timeout = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 12 01 	sts	0x0112, r24
				return -1;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	96 c3       	rjmp	.+1836   	; 0x1370 <usb_serial_write+0x802>
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     c44:	80 91 10 01 	lds	r24, 0x0110
     c48:	88 23       	and	r24, r24
     c4a:	11 f4       	brne	.+4      	; 0xc50 <usb_serial_write+0xe2>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	90 c3       	rjmp	.+1824   	; 0x1370 <usb_serial_write+0x802>
			// get ready to try checking again
			intr_state = SREG;
     c50:	8f e5       	ldi	r24, 0x5F	; 95
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	80 81       	ld	r24, Z
     c58:	89 83       	std	Y+1, r24	; 0x01
			cli();
     c5a:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     c5c:	89 ee       	ldi	r24, 0xE9	; 233
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	24 e0       	ldi	r18, 0x04	; 4
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
		}
     c66:	c1 cf       	rjmp	.-126    	; 0xbea <usb_serial_write+0x7c>

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
     c68:	8e 81       	ldd	r24, Y+6	; 0x06
     c6a:	8a 83       	std	Y+2, r24	; 0x02
		size -= write_size;
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	2e 81       	ldd	r18, Y+6	; 0x06
     c74:	3f 81       	ldd	r19, Y+7	; 0x07
     c76:	a9 01       	movw	r20, r18
     c78:	48 1b       	sub	r20, r24
     c7a:	59 0b       	sbc	r21, r25
     c7c:	ca 01       	movw	r24, r20
     c7e:	9f 83       	std	Y+7, r25	; 0x07
     c80:	8e 83       	std	Y+6, r24	; 0x06

		// write the packet
		switch (write_size) {
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	aa 27       	eor	r26, r26
     c8a:	97 fd       	sbrc	r25, 7
     c8c:	a0 95       	com	r26
     c8e:	ba 2f       	mov	r27, r26
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	20 e4       	ldi	r18, 0x40	; 64
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	84 1b       	sub	r24, r20
     c9a:	95 0b       	sbc	r25, r21
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <usb_serial_write+0x136>
     ca2:	3c c3       	rjmp	.+1656   	; 0x131c <usb_serial_write+0x7ae>
     ca4:	8a 5a       	subi	r24, 0xAA	; 170
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	fc 01       	movw	r30, r24
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	05 90       	lpm	r0, Z+
     cb0:	f4 91       	lpm	r31, Z+
     cb2:	e0 2d       	mov	r30, r0
     cb4:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     cb6:	81 ef       	ldi	r24, 0xF1	; 241
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
     cbc:	3d 81       	ldd	r19, Y+5	; 0x05
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	9d 83       	std	Y+5, r25	; 0x05
     cce:	8c 83       	std	Y+4, r24	; 0x04
			case 63: UEDATX = *buffer++;
     cd0:	81 ef       	ldi	r24, 0xF1	; 241
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	2c 81       	ldd	r18, Y+4	; 0x04
     cd6:	3d 81       	ldd	r19, Y+5	; 0x05
     cd8:	f9 01       	movw	r30, r18
     cda:	20 81       	ld	r18, Z
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	9d 83       	std	Y+5, r25	; 0x05
     ce8:	8c 83       	std	Y+4, r24	; 0x04
			case 62: UEDATX = *buffer++;
     cea:	81 ef       	ldi	r24, 0xF1	; 241
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	3d 81       	ldd	r19, Y+5	; 0x05
     cf2:	f9 01       	movw	r30, r18
     cf4:	20 81       	ld	r18, Z
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	9d 83       	std	Y+5, r25	; 0x05
     d02:	8c 83       	std	Y+4, r24	; 0x04
			case 61: UEDATX = *buffer++;
     d04:	81 ef       	ldi	r24, 0xF1	; 241
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2c 81       	ldd	r18, Y+4	; 0x04
     d0a:	3d 81       	ldd	r19, Y+5	; 0x05
     d0c:	f9 01       	movw	r30, r18
     d0e:	20 81       	ld	r18, Z
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	9d 83       	std	Y+5, r25	; 0x05
     d1c:	8c 83       	std	Y+4, r24	; 0x04
			case 60: UEDATX = *buffer++;
     d1e:	81 ef       	ldi	r24, 0xF1	; 241
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	3d 81       	ldd	r19, Y+5	; 0x05
     d26:	f9 01       	movw	r30, r18
     d28:	20 81       	ld	r18, Z
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	9d 83       	std	Y+5, r25	; 0x05
     d36:	8c 83       	std	Y+4, r24	; 0x04
			case 59: UEDATX = *buffer++;
     d38:	81 ef       	ldi	r24, 0xF1	; 241
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	2c 81       	ldd	r18, Y+4	; 0x04
     d3e:	3d 81       	ldd	r19, Y+5	; 0x05
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	fc 01       	movw	r30, r24
     d46:	20 83       	st	Z, r18
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	9d 83       	std	Y+5, r25	; 0x05
     d50:	8c 83       	std	Y+4, r24	; 0x04
			case 58: UEDATX = *buffer++;
     d52:	81 ef       	ldi	r24, 0xF1	; 241
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	9d 83       	std	Y+5, r25	; 0x05
     d6a:	8c 83       	std	Y+4, r24	; 0x04
			case 57: UEDATX = *buffer++;
     d6c:	81 ef       	ldi	r24, 0xF1	; 241
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	2c 81       	ldd	r18, Y+4	; 0x04
     d72:	3d 81       	ldd	r19, Y+5	; 0x05
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	9d 83       	std	Y+5, r25	; 0x05
     d84:	8c 83       	std	Y+4, r24	; 0x04
			case 56: UEDATX = *buffer++;
     d86:	81 ef       	ldi	r24, 0xF1	; 241
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	2c 81       	ldd	r18, Y+4	; 0x04
     d8c:	3d 81       	ldd	r19, Y+5	; 0x05
     d8e:	f9 01       	movw	r30, r18
     d90:	20 81       	ld	r18, Z
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	9d 81       	ldd	r25, Y+5	; 0x05
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	9d 83       	std	Y+5, r25	; 0x05
     d9e:	8c 83       	std	Y+4, r24	; 0x04
			case 55: UEDATX = *buffer++;
     da0:	81 ef       	ldi	r24, 0xF1	; 241
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	2c 81       	ldd	r18, Y+4	; 0x04
     da6:	3d 81       	ldd	r19, Y+5	; 0x05
     da8:	f9 01       	movw	r30, r18
     daa:	20 81       	ld	r18, Z
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	9d 83       	std	Y+5, r25	; 0x05
     db8:	8c 83       	std	Y+4, r24	; 0x04
			case 54: UEDATX = *buffer++;
     dba:	81 ef       	ldi	r24, 0xF1	; 241
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	f9 01       	movw	r30, r18
     dc4:	20 81       	ld	r18, Z
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	9d 83       	std	Y+5, r25	; 0x05
     dd2:	8c 83       	std	Y+4, r24	; 0x04
			case 53: UEDATX = *buffer++;
     dd4:	81 ef       	ldi	r24, 0xF1	; 241
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	f9 01       	movw	r30, r18
     dde:	20 81       	ld	r18, Z
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	9d 83       	std	Y+5, r25	; 0x05
     dec:	8c 83       	std	Y+4, r24	; 0x04
			case 52: UEDATX = *buffer++;
     dee:	81 ef       	ldi	r24, 0xF1	; 241
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	f9 01       	movw	r30, r18
     df8:	20 81       	ld	r18, Z
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	9d 81       	ldd	r25, Y+5	; 0x05
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	9d 83       	std	Y+5, r25	; 0x05
     e06:	8c 83       	std	Y+4, r24	; 0x04
			case 51: UEDATX = *buffer++;
     e08:	81 ef       	ldi	r24, 0xF1	; 241
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2c 81       	ldd	r18, Y+4	; 0x04
     e0e:	3d 81       	ldd	r19, Y+5	; 0x05
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	9d 81       	ldd	r25, Y+5	; 0x05
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	9d 83       	std	Y+5, r25	; 0x05
     e20:	8c 83       	std	Y+4, r24	; 0x04
			case 50: UEDATX = *buffer++;
     e22:	81 ef       	ldi	r24, 0xF1	; 241
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2c 81       	ldd	r18, Y+4	; 0x04
     e28:	3d 81       	ldd	r19, Y+5	; 0x05
     e2a:	f9 01       	movw	r30, r18
     e2c:	20 81       	ld	r18, Z
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	9d 81       	ldd	r25, Y+5	; 0x05
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9d 83       	std	Y+5, r25	; 0x05
     e3a:	8c 83       	std	Y+4, r24	; 0x04
			case 49: UEDATX = *buffer++;
     e3c:	81 ef       	ldi	r24, 0xF1	; 241
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	2c 81       	ldd	r18, Y+4	; 0x04
     e42:	3d 81       	ldd	r19, Y+5	; 0x05
     e44:	f9 01       	movw	r30, r18
     e46:	20 81       	ld	r18, Z
     e48:	fc 01       	movw	r30, r24
     e4a:	20 83       	st	Z, r18
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	9d 83       	std	Y+5, r25	; 0x05
     e54:	8c 83       	std	Y+4, r24	; 0x04
			case 48: UEDATX = *buffer++;
     e56:	81 ef       	ldi	r24, 0xF1	; 241
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	f9 01       	movw	r30, r18
     e60:	20 81       	ld	r18, Z
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	9d 83       	std	Y+5, r25	; 0x05
     e6e:	8c 83       	std	Y+4, r24	; 0x04
			case 47: UEDATX = *buffer++;
     e70:	81 ef       	ldi	r24, 0xF1	; 241
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	9d 83       	std	Y+5, r25	; 0x05
     e88:	8c 83       	std	Y+4, r24	; 0x04
			case 46: UEDATX = *buffer++;
     e8a:	81 ef       	ldi	r24, 0xF1	; 241
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	2c 81       	ldd	r18, Y+4	; 0x04
     e90:	3d 81       	ldd	r19, Y+5	; 0x05
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	9d 83       	std	Y+5, r25	; 0x05
     ea2:	8c 83       	std	Y+4, r24	; 0x04
			case 45: UEDATX = *buffer++;
     ea4:	81 ef       	ldi	r24, 0xF1	; 241
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	2c 81       	ldd	r18, Y+4	; 0x04
     eaa:	3d 81       	ldd	r19, Y+5	; 0x05
     eac:	f9 01       	movw	r30, r18
     eae:	20 81       	ld	r18, Z
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9d 83       	std	Y+5, r25	; 0x05
     ebc:	8c 83       	std	Y+4, r24	; 0x04
			case 44: UEDATX = *buffer++;
     ebe:	81 ef       	ldi	r24, 0xF1	; 241
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	9d 83       	std	Y+5, r25	; 0x05
     ed6:	8c 83       	std	Y+4, r24	; 0x04
			case 43: UEDATX = *buffer++;
     ed8:	81 ef       	ldi	r24, 0xF1	; 241
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	f9 01       	movw	r30, r18
     ee2:	20 81       	ld	r18, Z
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 83       	st	Z, r18
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	9d 83       	std	Y+5, r25	; 0x05
     ef0:	8c 83       	std	Y+4, r24	; 0x04
			case 42: UEDATX = *buffer++;
     ef2:	81 ef       	ldi	r24, 0xF1	; 241
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	3d 81       	ldd	r19, Y+5	; 0x05
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9d 83       	std	Y+5, r25	; 0x05
     f0a:	8c 83       	std	Y+4, r24	; 0x04
			case 41: UEDATX = *buffer++;
     f0c:	81 ef       	ldi	r24, 0xF1	; 241
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	9d 83       	std	Y+5, r25	; 0x05
     f24:	8c 83       	std	Y+4, r24	; 0x04
			case 40: UEDATX = *buffer++;
     f26:	81 ef       	ldi	r24, 0xF1	; 241
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	9d 83       	std	Y+5, r25	; 0x05
     f3e:	8c 83       	std	Y+4, r24	; 0x04
			case 39: UEDATX = *buffer++;
     f40:	81 ef       	ldi	r24, 0xF1	; 241
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	2c 81       	ldd	r18, Y+4	; 0x04
     f46:	3d 81       	ldd	r19, Y+5	; 0x05
     f48:	f9 01       	movw	r30, r18
     f4a:	20 81       	ld	r18, Z
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	9d 83       	std	Y+5, r25	; 0x05
     f58:	8c 83       	std	Y+4, r24	; 0x04
			case 38: UEDATX = *buffer++;
     f5a:	81 ef       	ldi	r24, 0xF1	; 241
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	fc 01       	movw	r30, r24
     f68:	20 83       	st	Z, r18
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	9d 81       	ldd	r25, Y+5	; 0x05
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	9d 83       	std	Y+5, r25	; 0x05
     f72:	8c 83       	std	Y+4, r24	; 0x04
			case 37: UEDATX = *buffer++;
     f74:	81 ef       	ldi	r24, 0xF1	; 241
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	9d 83       	std	Y+5, r25	; 0x05
     f8c:	8c 83       	std	Y+4, r24	; 0x04
			case 36: UEDATX = *buffer++;
     f8e:	81 ef       	ldi	r24, 0xF1	; 241
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	9d 83       	std	Y+5, r25	; 0x05
     fa6:	8c 83       	std	Y+4, r24	; 0x04
			case 35: UEDATX = *buffer++;
     fa8:	81 ef       	ldi	r24, 0xF1	; 241
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	9d 83       	std	Y+5, r25	; 0x05
     fc0:	8c 83       	std	Y+4, r24	; 0x04
			case 34: UEDATX = *buffer++;
     fc2:	81 ef       	ldi	r24, 0xF1	; 241
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	f9 01       	movw	r30, r18
     fcc:	20 81       	ld	r18, Z
     fce:	fc 01       	movw	r30, r24
     fd0:	20 83       	st	Z, r18
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	9d 83       	std	Y+5, r25	; 0x05
     fda:	8c 83       	std	Y+4, r24	; 0x04
			case 33: UEDATX = *buffer++;
     fdc:	81 ef       	ldi	r24, 0xF1	; 241
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	3d 81       	ldd	r19, Y+5	; 0x05
     fe4:	f9 01       	movw	r30, r18
     fe6:	20 81       	ld	r18, Z
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9d 83       	std	Y+5, r25	; 0x05
     ff4:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     ff6:	81 ef       	ldi	r24, 0xF1	; 241
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	2c 81       	ldd	r18, Y+4	; 0x04
     ffc:	3d 81       	ldd	r19, Y+5	; 0x05
     ffe:	f9 01       	movw	r30, r18
    1000:	20 81       	ld	r18, Z
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	9d 83       	std	Y+5, r25	; 0x05
    100e:	8c 83       	std	Y+4, r24	; 0x04
			case 31: UEDATX = *buffer++;
    1010:	81 ef       	ldi	r24, 0xF1	; 241
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	9d 83       	std	Y+5, r25	; 0x05
    1028:	8c 83       	std	Y+4, r24	; 0x04
			case 30: UEDATX = *buffer++;
    102a:	81 ef       	ldi	r24, 0xF1	; 241
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	f9 01       	movw	r30, r18
    1034:	20 81       	ld	r18, Z
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
			case 29: UEDATX = *buffer++;
    1044:	81 ef       	ldi	r24, 0xF1	; 241
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	f9 01       	movw	r30, r18
    104e:	20 81       	ld	r18, Z
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	9d 83       	std	Y+5, r25	; 0x05
    105c:	8c 83       	std	Y+4, r24	; 0x04
			case 28: UEDATX = *buffer++;
    105e:	81 ef       	ldi	r24, 0xF1	; 241
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	f9 01       	movw	r30, r18
    1068:	20 81       	ld	r18, Z
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	9d 83       	std	Y+5, r25	; 0x05
    1076:	8c 83       	std	Y+4, r24	; 0x04
			case 27: UEDATX = *buffer++;
    1078:	81 ef       	ldi	r24, 0xF1	; 241
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	f9 01       	movw	r30, r18
    1082:	20 81       	ld	r18, Z
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9d 83       	std	Y+5, r25	; 0x05
    1090:	8c 83       	std	Y+4, r24	; 0x04
			case 26: UEDATX = *buffer++;
    1092:	81 ef       	ldi	r24, 0xF1	; 241
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	f9 01       	movw	r30, r18
    109c:	20 81       	ld	r18, Z
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	9d 83       	std	Y+5, r25	; 0x05
    10aa:	8c 83       	std	Y+4, r24	; 0x04
			case 25: UEDATX = *buffer++;
    10ac:	81 ef       	ldi	r24, 0xF1	; 241
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	f9 01       	movw	r30, r18
    10b6:	20 81       	ld	r18, Z
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	9d 83       	std	Y+5, r25	; 0x05
    10c4:	8c 83       	std	Y+4, r24	; 0x04
			case 24: UEDATX = *buffer++;
    10c6:	81 ef       	ldi	r24, 0xF1	; 241
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	9d 83       	std	Y+5, r25	; 0x05
    10de:	8c 83       	std	Y+4, r24	; 0x04
			case 23: UEDATX = *buffer++;
    10e0:	81 ef       	ldi	r24, 0xF1	; 241
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	2c 81       	ldd	r18, Y+4	; 0x04
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	f9 01       	movw	r30, r18
    10ea:	20 81       	ld	r18, Z
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
			case 22: UEDATX = *buffer++;
    10fa:	81 ef       	ldi	r24, 0xF1	; 241
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	9d 83       	std	Y+5, r25	; 0x05
    1112:	8c 83       	std	Y+4, r24	; 0x04
			case 21: UEDATX = *buffer++;
    1114:	81 ef       	ldi	r24, 0xF1	; 241
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	9d 83       	std	Y+5, r25	; 0x05
    112c:	8c 83       	std	Y+4, r24	; 0x04
			case 20: UEDATX = *buffer++;
    112e:	81 ef       	ldi	r24, 0xF1	; 241
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	2c 81       	ldd	r18, Y+4	; 0x04
    1134:	3d 81       	ldd	r19, Y+5	; 0x05
    1136:	f9 01       	movw	r30, r18
    1138:	20 81       	ld	r18, Z
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	9d 83       	std	Y+5, r25	; 0x05
    1146:	8c 83       	std	Y+4, r24	; 0x04
			case 19: UEDATX = *buffer++;
    1148:	81 ef       	ldi	r24, 0xF1	; 241
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	f9 01       	movw	r30, r18
    1152:	20 81       	ld	r18, Z
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	9d 83       	std	Y+5, r25	; 0x05
    1160:	8c 83       	std	Y+4, r24	; 0x04
			case 18: UEDATX = *buffer++;
    1162:	81 ef       	ldi	r24, 0xF1	; 241
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	2c 81       	ldd	r18, Y+4	; 0x04
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	9d 83       	std	Y+5, r25	; 0x05
    117a:	8c 83       	std	Y+4, r24	; 0x04
			case 17: UEDATX = *buffer++;
    117c:	81 ef       	ldi	r24, 0xF1	; 241
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    1196:	81 ef       	ldi	r24, 0xF1	; 241
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2c 81       	ldd	r18, Y+4	; 0x04
    119c:	3d 81       	ldd	r19, Y+5	; 0x05
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	9d 81       	ldd	r25, Y+5	; 0x05
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	9d 83       	std	Y+5, r25	; 0x05
    11ae:	8c 83       	std	Y+4, r24	; 0x04
			case 15: UEDATX = *buffer++;
    11b0:	81 ef       	ldi	r24, 0xF1	; 241
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	f9 01       	movw	r30, r18
    11ba:	20 81       	ld	r18, Z
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	9d 83       	std	Y+5, r25	; 0x05
    11c8:	8c 83       	std	Y+4, r24	; 0x04
			case 14: UEDATX = *buffer++;
    11ca:	81 ef       	ldi	r24, 0xF1	; 241
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	2c 81       	ldd	r18, Y+4	; 0x04
    11d0:	3d 81       	ldd	r19, Y+5	; 0x05
    11d2:	f9 01       	movw	r30, r18
    11d4:	20 81       	ld	r18, Z
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	9d 83       	std	Y+5, r25	; 0x05
    11e2:	8c 83       	std	Y+4, r24	; 0x04
			case 13: UEDATX = *buffer++;
    11e4:	81 ef       	ldi	r24, 0xF1	; 241
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	9d 83       	std	Y+5, r25	; 0x05
    11fc:	8c 83       	std	Y+4, r24	; 0x04
			case 12: UEDATX = *buffer++;
    11fe:	81 ef       	ldi	r24, 0xF1	; 241
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	f9 01       	movw	r30, r18
    1208:	20 81       	ld	r18, Z
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	9d 83       	std	Y+5, r25	; 0x05
    1216:	8c 83       	std	Y+4, r24	; 0x04
			case 11: UEDATX = *buffer++;
    1218:	81 ef       	ldi	r24, 0xF1	; 241
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	f9 01       	movw	r30, r18
    1222:	20 81       	ld	r18, Z
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	9d 83       	std	Y+5, r25	; 0x05
    1230:	8c 83       	std	Y+4, r24	; 0x04
			case 10: UEDATX = *buffer++;
    1232:	81 ef       	ldi	r24, 0xF1	; 241
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	f9 01       	movw	r30, r18
    123c:	20 81       	ld	r18, Z
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	9d 83       	std	Y+5, r25	; 0x05
    124a:	8c 83       	std	Y+4, r24	; 0x04
			case  9: UEDATX = *buffer++;
    124c:	81 ef       	ldi	r24, 0xF1	; 241
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	3d 81       	ldd	r19, Y+5	; 0x05
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	9d 83       	std	Y+5, r25	; 0x05
    1264:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			case  8: UEDATX = *buffer++;
    1266:	81 ef       	ldi	r24, 0xF1	; 241
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	f9 01       	movw	r30, r18
    1270:	20 81       	ld	r18, Z
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9d 83       	std	Y+5, r25	; 0x05
    127e:	8c 83       	std	Y+4, r24	; 0x04
			case  7: UEDATX = *buffer++;
    1280:	81 ef       	ldi	r24, 0xF1	; 241
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	f9 01       	movw	r30, r18
    128a:	20 81       	ld	r18, Z
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	9d 83       	std	Y+5, r25	; 0x05
    1298:	8c 83       	std	Y+4, r24	; 0x04
			case  6: UEDATX = *buffer++;
    129a:	81 ef       	ldi	r24, 0xF1	; 241
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	9d 83       	std	Y+5, r25	; 0x05
    12b2:	8c 83       	std	Y+4, r24	; 0x04
			case  5: UEDATX = *buffer++;
    12b4:	81 ef       	ldi	r24, 0xF1	; 241
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ba:	3d 81       	ldd	r19, Y+5	; 0x05
    12bc:	f9 01       	movw	r30, r18
    12be:	20 81       	ld	r18, Z
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	9d 83       	std	Y+5, r25	; 0x05
    12cc:	8c 83       	std	Y+4, r24	; 0x04
			case  4: UEDATX = *buffer++;
    12ce:	81 ef       	ldi	r24, 0xF1	; 241
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	9d 83       	std	Y+5, r25	; 0x05
    12e6:	8c 83       	std	Y+4, r24	; 0x04
			case  3: UEDATX = *buffer++;
    12e8:	81 ef       	ldi	r24, 0xF1	; 241
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2c 81       	ldd	r18, Y+4	; 0x04
    12ee:	3d 81       	ldd	r19, Y+5	; 0x05
    12f0:	f9 01       	movw	r30, r18
    12f2:	20 81       	ld	r18, Z
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	9d 83       	std	Y+5, r25	; 0x05
    1300:	8c 83       	std	Y+4, r24	; 0x04
			case  2: UEDATX = *buffer++;
    1302:	81 ef       	ldi	r24, 0xF1	; 241
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	2c 81       	ldd	r18, Y+4	; 0x04
    1308:	3d 81       	ldd	r19, Y+5	; 0x05
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	9d 83       	std	Y+5, r25	; 0x05
    131a:	8c 83       	std	Y+4, r24	; 0x04
			default:
			case  1: UEDATX = *buffer++;
    131c:	81 ef       	ldi	r24, 0xF1	; 241
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	9d 83       	std	Y+5, r25	; 0x05
    1334:	8c 83       	std	Y+4, r24	; 0x04
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1336:	88 ee       	ldi	r24, 0xE8	; 232
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fc 01       	movw	r30, r24
    133c:	80 81       	ld	r24, Z
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	80 72       	andi	r24, 0x20	; 32
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	29 f4       	brne	.+10     	; 0x1354 <usb_serial_write+0x7e6>
    134a:	88 ee       	ldi	r24, 0xE8	; 232
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	2a e3       	ldi	r18, 0x3A	; 58
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	80 93 11 01 	sts	0x0111, r24
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	09 f0       	breq	.+2      	; 0x1364 <usb_serial_write+0x7f6>
    1362:	3d cc       	rjmp	.-1926   	; 0xbde <usb_serial_write+0x70>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    1364:	8f e5       	ldi	r24, 0x5F	; 95
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	29 81       	ldd	r18, Y+1	; 0x01
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
	return 0;
    136e:	80 e0       	ldi	r24, 0x00	; 0
}
    1370:	27 96       	adiw	r28, 0x07	; 7
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <m_usb_tx_push>:
// immediately transmit any buffered output.
// This doesn't actually transmit the data - that is impossible!
// USB devices only transmit when the host allows, so the best
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	uint8_t intr_state;

	intr_state = SREG;
    138c:	8f e5       	ldi	r24, 0x5F	; 95
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	fc 01       	movw	r30, r24
    1392:	80 81       	ld	r24, Z
    1394:	89 83       	std	Y+1, r24	; 0x01
	cli();
    1396:	f8 94       	cli
	if (transmit_flush_timer) {
    1398:	80 91 11 01 	lds	r24, 0x0111
    139c:	88 23       	and	r24, r24
    139e:	61 f0       	breq	.+24     	; 0x13b8 <m_usb_tx_push+0x36>
		UENUM = CDC_TX_ENDPOINT;
    13a0:	89 ee       	ldi	r24, 0xE9	; 233
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	24 e0       	ldi	r18, 0x04	; 4
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
		UEINTX = 0x3A;
    13aa:	88 ee       	ldi	r24, 0xE8	; 232
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	2a e3       	ldi	r18, 0x3A	; 58
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
		transmit_flush_timer = 0;
    13b4:	10 92 11 01 	sts	0x0111, r1
	}
	SREG = intr_state;
    13b8:	8f e5       	ldi	r24, 0x5F	; 95
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	29 81       	ldd	r18, Y+1	; 0x01
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
}
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	return *(uint32_t *)cdc_line_coding;
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	a2 81       	ldd	r26, Z+2	; 0x02
    13de:	b3 81       	ldd	r27, Z+3	; 0x03
}
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[4];
    13f2:	80 91 04 01 	lds	r24, 0x0104
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[5];
    1404:	80 91 05 01 	lds	r24, 0x0105
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[6];
    1416:	80 91 06 01 	lds	r24, 0x0106
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_rtsdtr;
    1428:	80 91 13 01 	lds	r24, 0x0113
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <usb_serial_set_control+0x6>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t intr_state;

	intr_state = SREG;
    143e:	8f e5       	ldi	r24, 0x5F	; 95
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	fc 01       	movw	r30, r24
    1444:	80 81       	ld	r24, Z
    1446:	89 83       	std	Y+1, r24	; 0x01
	cli();
    1448:	f8 94       	cli
	if (!usb_configuration) {
    144a:	80 91 10 01 	lds	r24, 0x0110
    144e:	88 23       	and	r24, r24
    1450:	39 f4       	brne	.+14     	; 0x1460 <usb_serial_set_control+0x2e>
		// we're not enumerated/configured
		SREG = intr_state;
    1452:	8f e5       	ldi	r24, 0x5F	; 95
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	29 81       	ldd	r18, Y+1	; 0x01
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
		return -1;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	4d c0       	rjmp	.+154    	; 0x14fa <usb_serial_set_control+0xc8>
	}

	UENUM = CDC_ACM_ENDPOINT;
    1460:	89 ee       	ldi	r24, 0xE9	; 233
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	22 e0       	ldi	r18, 0x02	; 2
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
    146a:	88 ee       	ldi	r24, 0xE8	; 232
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	80 72       	andi	r24, 0x20	; 32
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	39 f4       	brne	.+14     	; 0x148c <usb_serial_set_control+0x5a>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    147e:	8f e5       	ldi	r24, 0x5F	; 95
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
		return -1;
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	37 c0       	rjmp	.+110    	; 0x14fa <usb_serial_set_control+0xc8>
	}
	UEDATX = 0xA1;
    148c:	81 ef       	ldi	r24, 0xF1	; 241
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	21 ea       	ldi	r18, 0xA1	; 161
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
	UEDATX = 0x20;
    1496:	81 ef       	ldi	r24, 0xF1	; 241
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	20 e2       	ldi	r18, 0x20	; 32
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
	UEDATX = 0;
    14a0:	81 ef       	ldi	r24, 0xF1	; 241
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	fc 01       	movw	r30, r24
    14a6:	10 82       	st	Z, r1
	UEDATX = 0;
    14a8:	81 ef       	ldi	r24, 0xF1	; 241
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	fc 01       	movw	r30, r24
    14ae:	10 82       	st	Z, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    14b0:	81 ef       	ldi	r24, 0xF1	; 241
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	fc 01       	movw	r30, r24
    14b6:	10 82       	st	Z, r1
	UEDATX = 0;
    14b8:	81 ef       	ldi	r24, 0xF1	; 241
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	fc 01       	movw	r30, r24
    14be:	10 82       	st	Z, r1
	UEDATX = 2;
    14c0:	81 ef       	ldi	r24, 0xF1	; 241
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	22 e0       	ldi	r18, 0x02	; 2
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
	UEDATX = 0;
    14ca:	81 ef       	ldi	r24, 0xF1	; 241
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	fc 01       	movw	r30, r24
    14d0:	10 82       	st	Z, r1
	UEDATX = signals;
    14d2:	81 ef       	ldi	r24, 0xF1	; 241
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	2a 81       	ldd	r18, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
	UEDATX = 0;
    14dc:	81 ef       	ldi	r24, 0xF1	; 241
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	10 82       	st	Z, r1
	UEINTX = 0x3A;
    14e4:	88 ee       	ldi	r24, 0xE8	; 232
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	2a e3       	ldi	r18, 0x3A	; 58
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 83       	st	Z, r18
	SREG = intr_state;
    14ee:	8f e5       	ldi	r24, 0x5F	; 95
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	29 81       	ldd	r18, Y+1	; 0x01
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
	return 0;
    14f8:	80 e0       	ldi	r24, 0x00	; 0
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	2f 93       	push	r18
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <__vector_10+0x1a>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	uint8_t intbits, t;

        intbits = UDINT;
    1522:	81 ee       	ldi	r24, 0xE1	; 225
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	fc 01       	movw	r30, r24
    1528:	80 81       	ld	r24, Z
    152a:	89 83       	std	Y+1, r24	; 0x01
        UDINT = 0;
    152c:	81 ee       	ldi	r24, 0xE1	; 225
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	fc 01       	movw	r30, r24
    1532:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	88 70       	andi	r24, 0x08	; 8
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	d9 f0       	breq	.+54     	; 0x1578 <__vector_10+0x74>
		UENUM = 0;
    1542:	89 ee       	ldi	r24, 0xE9	; 233
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	fc 01       	movw	r30, r24
    1548:	10 82       	st	Z, r1
		UECONX = 1;
    154a:	8b ee       	ldi	r24, 0xEB	; 235
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
		UECFG0X = EP_TYPE_CONTROL;
    1554:	8c ee       	ldi	r24, 0xEC	; 236
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	fc 01       	movw	r30, r24
    155a:	10 82       	st	Z, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    155c:	8d ee       	ldi	r24, 0xED	; 237
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	22 e1       	ldi	r18, 0x12	; 18
    1562:	fc 01       	movw	r30, r24
    1564:	20 83       	st	Z, r18
		UEIENX = (1<<RXSTPE);
    1566:	80 ef       	ldi	r24, 0xF0	; 240
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	28 e0       	ldi	r18, 0x08	; 8
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
		usb_configuration = 0;
    1570:	10 92 10 01 	sts	0x0110, r1
		cdc_line_rtsdtr = 0;
    1574:	10 92 13 01 	sts	0x0113, r1
        }
	if (intbits & (1<<SOFI)) {
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	84 70       	andi	r24, 0x04	; 4
    1580:	90 70       	andi	r25, 0x00	; 0
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	e9 f0       	breq	.+58     	; 0x15c0 <__vector_10+0xbc>
		if (usb_configuration) {
    1586:	80 91 10 01 	lds	r24, 0x0110
    158a:	88 23       	and	r24, r24
    158c:	c9 f0       	breq	.+50     	; 0x15c0 <__vector_10+0xbc>
			t = transmit_flush_timer;
    158e:	80 91 11 01 	lds	r24, 0x0111
    1592:	8a 83       	std	Y+2, r24	; 0x02
			if (t) {
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 23       	and	r24, r24
    1598:	99 f0       	breq	.+38     	; 0x15c0 <__vector_10+0xbc>
				transmit_flush_timer = --t;
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	81 50       	subi	r24, 0x01	; 1
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	80 93 11 01 	sts	0x0111, r24
				if (!t) {
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 23       	and	r24, r24
    15aa:	51 f4       	brne	.+20     	; 0x15c0 <__vector_10+0xbc>
					UENUM = CDC_TX_ENDPOINT;
    15ac:	89 ee       	ldi	r24, 0xE9	; 233
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	24 e0       	ldi	r18, 0x04	; 4
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
					UEINTX = 0x3A;
    15b6:	88 ee       	ldi	r24, 0xE8	; 232
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	2a e3       	ldi	r18, 0x3A	; 58
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
				}
			}
		}
	}
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	while (!(UEINTX & (1<<TXINI))) ;
    15e4:	00 00       	nop
    15e6:	88 ee       	ldi	r24, 0xE8	; 232
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	b1 f3       	breq	.-20     	; 0x15e6 <usb_wait_in_ready+0xa>
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <usb_send_in>:
static inline void usb_send_in(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	UEINTX = ~(1<<TXINI);
    1608:	88 ee       	ldi	r24, 0xE8	; 232
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	2e ef       	ldi	r18, 0xFE	; 254
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <usb_wait_receive_out>:
static inline void usb_wait_receive_out(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	while (!(UEINTX & (1<<RXOUTI))) ;
    1620:	00 00       	nop
    1622:	88 ee       	ldi	r24, 0xE8	; 232
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	84 70       	andi	r24, 0x04	; 4
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	b1 f3       	breq	.-20     	; 0x1622 <usb_wait_receive_out+0xa>
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <usb_ack_out>:
static inline void usb_ack_out(void)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	UEINTX = ~(1<<RXOUTI);
    1644:	88 ee       	ldi	r24, 0xE8	; 232
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	2b ef       	ldi	r18, 0xFB	; 251
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	e3 97       	sbiw	r28, 0x33	; 51
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	cd bf       	out	0x3d, r28	; 61
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    168c:	89 ee       	ldi	r24, 0xE9	; 233
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	fc 01       	movw	r30, r24
    1692:	10 82       	st	Z, r1
        intbits = UEINTX;
    1694:	88 ee       	ldi	r24, 0xE8	; 232
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	fc 01       	movw	r30, r24
    169a:	80 81       	ld	r24, Z
    169c:	8b 87       	std	Y+11, r24	; 0x0b
        if (intbits & (1<<RXSTPI)) {
    169e:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	88 70       	andi	r24, 0x08	; 8
    16a6:	90 70       	andi	r25, 0x00	; 0
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	09 f4       	brne	.+2      	; 0x16ae <__vector_11+0x5a>
    16ac:	79 c2       	rjmp	.+1266   	; 0x1ba0 <__vector_11+0x54c>
                bmRequestType = UEDATX;
    16ae:	81 ef       	ldi	r24, 0xF1	; 241
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	80 81       	ld	r24, Z
    16b6:	8c 87       	std	Y+12, r24	; 0x0c
                bRequest = UEDATX;
    16b8:	81 ef       	ldi	r24, 0xF1	; 241
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	8d 87       	std	Y+13, r24	; 0x0d
                wValue = UEDATX;
    16c2:	81 ef       	ldi	r24, 0xF1	; 241
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	80 81       	ld	r24, Z
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9f 87       	std	Y+15, r25	; 0x0f
    16d0:	8e 87       	std	Y+14, r24	; 0x0e
                wValue |= (UEDATX << 8);
    16d2:	81 ef       	ldi	r24, 0xF1	; 241
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	fc 01       	movw	r30, r24
    16d8:	80 81       	ld	r24, Z
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	98 2f       	mov	r25, r24
    16e0:	88 27       	eor	r24, r24
    16e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    16e4:	3f 85       	ldd	r19, Y+15	; 0x0f
    16e6:	82 2b       	or	r24, r18
    16e8:	93 2b       	or	r25, r19
    16ea:	9f 87       	std	Y+15, r25	; 0x0f
    16ec:	8e 87       	std	Y+14, r24	; 0x0e
                wIndex = UEDATX;
    16ee:	81 ef       	ldi	r24, 0xF1	; 241
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 81       	ld	r24, Z
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	99 8b       	std	Y+17, r25	; 0x11
    16fc:	88 8b       	std	Y+16, r24	; 0x10
                wIndex |= (UEDATX << 8);
    16fe:	81 ef       	ldi	r24, 0xF1	; 241
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	fc 01       	movw	r30, r24
    1704:	80 81       	ld	r24, Z
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	98 2f       	mov	r25, r24
    170c:	88 27       	eor	r24, r24
    170e:	28 89       	ldd	r18, Y+16	; 0x10
    1710:	39 89       	ldd	r19, Y+17	; 0x11
    1712:	82 2b       	or	r24, r18
    1714:	93 2b       	or	r25, r19
    1716:	99 8b       	std	Y+17, r25	; 0x11
    1718:	88 8b       	std	Y+16, r24	; 0x10
                wLength = UEDATX;
    171a:	81 ef       	ldi	r24, 0xF1	; 241
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	fc 01       	movw	r30, r24
    1720:	80 81       	ld	r24, Z
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9b 8b       	std	Y+19, r25	; 0x13
    1728:	8a 8b       	std	Y+18, r24	; 0x12
                wLength |= (UEDATX << 8);
    172a:	81 ef       	ldi	r24, 0xF1	; 241
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	98 2f       	mov	r25, r24
    1738:	88 27       	eor	r24, r24
    173a:	2a 89       	ldd	r18, Y+18	; 0x12
    173c:	3b 89       	ldd	r19, Y+19	; 0x13
    173e:	82 2b       	or	r24, r18
    1740:	93 2b       	or	r25, r19
    1742:	9b 8b       	std	Y+19, r25	; 0x13
    1744:	8a 8b       	std	Y+18, r24	; 0x12
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1746:	88 ee       	ldi	r24, 0xE8	; 232
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	22 ef       	ldi	r18, 0xF2	; 242
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
                if (bRequest == GET_DESCRIPTOR) {
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	86 30       	cpi	r24, 0x06	; 6
    1754:	09 f0       	breq	.+2      	; 0x1758 <__vector_11+0x104>
    1756:	d6 c0       	rjmp	.+428    	; 0x1904 <__vector_11+0x2b0>
			list = (const uint8_t *)descriptor_list;
    1758:	87 eb       	ldi	r24, 0xB7	; 183
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
			for (i=0; ; i++) {
    1760:	1d 82       	std	Y+5, r1	; 0x05
				if (i >= NUM_DESC_LIST) {
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	86 30       	cpi	r24, 0x06	; 6
    1766:	30 f0       	brcs	.+12     	; 0x1774 <__vector_11+0x120>
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1768:	8b ee       	ldi	r24, 0xEB	; 235
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	21 e2       	ldi	r18, 0x21	; 33
    176e:	fc 01       	movw	r30, r24
    1770:	20 83       	st	Z, r18
					return;
    1772:	1d c2       	rjmp	.+1082   	; 0x1bae <__vector_11+0x55a>
				}
				desc_val = pgm_read_word(list);
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	9d 8b       	std	Y+21, r25	; 0x15
    177a:	8c 8b       	std	Y+20, r24	; 0x14
    177c:	8c 89       	ldd	r24, Y+20	; 0x14
    177e:	9d 89       	ldd	r25, Y+21	; 0x15
    1780:	8c 01       	movw	r16, r24
    1782:	f8 01       	movw	r30, r16
    1784:	e5 90       	lpm	r14, Z+
    1786:	f4 90       	lpm	r15, Z+
    1788:	8f 01       	movw	r16, r30
    178a:	ff 8a       	std	Y+23, r15	; 0x17
    178c:	ee 8a       	std	Y+22, r14	; 0x16
    178e:	1d 8b       	std	Y+21, r17	; 0x15
    1790:	0c 8b       	std	Y+20, r16	; 0x14
    1792:	8e 89       	ldd	r24, Y+22	; 0x16
    1794:	9f 89       	ldd	r25, Y+23	; 0x17
    1796:	99 8f       	std	Y+25, r25	; 0x19
    1798:	88 8f       	std	Y+24, r24	; 0x18
				if (desc_val != wValue) {
    179a:	28 8d       	ldd	r18, Y+24	; 0x18
    179c:	39 8d       	ldd	r19, Y+25	; 0x19
    179e:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a2:	28 17       	cp	r18, r24
    17a4:	39 07       	cpc	r19, r25
    17a6:	31 f0       	breq	.+12     	; 0x17b4 <__vector_11+0x160>
					list += sizeof(struct descriptor_list_struct);
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	07 96       	adiw	r24, 0x07	; 7
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
					continue;
    17b2:	5b c0       	rjmp	.+182    	; 0x186a <__vector_11+0x216>
				}
				list += 2;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	02 96       	adiw	r24, 0x02	; 2
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
				desc_val = pgm_read_word(list);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	9b 8f       	std	Y+27, r25	; 0x1b
    17c4:	8a 8f       	std	Y+26, r24	; 0x1a
    17c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17ca:	8c 01       	movw	r16, r24
    17cc:	f8 01       	movw	r30, r16
    17ce:	e5 90       	lpm	r14, Z+
    17d0:	f4 90       	lpm	r15, Z+
    17d2:	8f 01       	movw	r16, r30
    17d4:	fd 8e       	std	Y+29, r15	; 0x1d
    17d6:	ec 8e       	std	Y+28, r14	; 0x1c
    17d8:	1b 8f       	std	Y+27, r17	; 0x1b
    17da:	0a 8f       	std	Y+26, r16	; 0x1a
    17dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17e0:	99 8f       	std	Y+25, r25	; 0x19
    17e2:	88 8f       	std	Y+24, r24	; 0x18
				if (desc_val != wIndex) {
    17e4:	28 8d       	ldd	r18, Y+24	; 0x18
    17e6:	39 8d       	ldd	r19, Y+25	; 0x19
    17e8:	88 89       	ldd	r24, Y+16	; 0x10
    17ea:	99 89       	ldd	r25, Y+17	; 0x11
    17ec:	28 17       	cp	r18, r24
    17ee:	39 07       	cpc	r19, r25
    17f0:	31 f0       	breq	.+12     	; 0x17fe <__vector_11+0x1aa>
					list += sizeof(struct descriptor_list_struct)-2;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	05 96       	adiw	r24, 0x05	; 5
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
					continue;
    17fc:	36 c0       	rjmp	.+108    	; 0x186a <__vector_11+0x216>
				}
				list += 2;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	02 96       	adiw	r24, 0x02	; 2
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	9f 8f       	std	Y+31, r25	; 0x1f
    180e:	8e 8f       	std	Y+30, r24	; 0x1e
    1810:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1812:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1814:	8c 01       	movw	r16, r24
    1816:	f8 01       	movw	r30, r16
    1818:	e5 90       	lpm	r14, Z+
    181a:	f4 90       	lpm	r15, Z+
    181c:	8f 01       	movw	r16, r30
    181e:	f9 a2       	std	Y+33, r15	; 0x21
    1820:	e8 a2       	std	Y+32, r14	; 0x20
    1822:	1f 8f       	std	Y+31, r17	; 0x1f
    1824:	0e 8f       	std	Y+30, r16	; 0x1e
    1826:	88 a1       	ldd	r24, Y+32	; 0x20
    1828:	99 a1       	ldd	r25, Y+33	; 0x21
    182a:	9a 87       	std	Y+10, r25	; 0x0a
    182c:	89 87       	std	Y+9, r24	; 0x09
				list += 2;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
				desc_length = pgm_read_byte(list);
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	9b a3       	std	Y+35, r25	; 0x23
    183e:	8a a3       	std	Y+34, r24	; 0x22
    1840:	8a a1       	ldd	r24, Y+34	; 0x22
    1842:	9b a1       	ldd	r25, Y+35	; 0x23
    1844:	fc 01       	movw	r30, r24
    1846:	14 91       	lpm	r17, Z+
    1848:	1c a3       	std	Y+36, r17	; 0x24
    184a:	8c a1       	ldd	r24, Y+36	; 0x24
    184c:	8d a3       	std	Y+37, r24	; 0x25
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    184e:	8a 89       	ldd	r24, Y+18	; 0x12
    1850:	9b 89       	ldd	r25, Y+19	; 0x13
    1852:	8f 3f       	cpi	r24, 0xFF	; 255
    1854:	91 05       	cpc	r25, r1
    1856:	19 f0       	breq	.+6      	; 0x185e <__vector_11+0x20a>
    1858:	10 f0       	brcs	.+4      	; 0x185e <__vector_11+0x20a>
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	8e 83       	std	Y+6, r24	; 0x06
			if (len > desc_length) len = desc_length;
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	89 17       	cp	r24, r25
    1866:	28 f0       	brcs	.+10     	; 0x1872 <__vector_11+0x21e>
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <__vector_11+0x222>
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	8d 83       	std	Y+5, r24	; 0x05
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    1870:	78 cf       	rjmp	.-272    	; 0x1762 <__vector_11+0x10e>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
    1872:	8d a1       	ldd	r24, Y+37	; 0x25
    1874:	8e 83       	std	Y+6, r24	; 0x06
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1876:	88 ee       	ldi	r24, 0xE8	; 232
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	8d 83       	std	Y+5, r24	; 0x05
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	85 70       	andi	r24, 0x05	; 5
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	a1 f3       	breq	.-24     	; 0x1876 <__vector_11+0x222>
				if (i & (1<<RXOUTI)) return;	// abort
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	84 70       	andi	r24, 0x04	; 4
    1896:	90 70       	andi	r25, 0x00	; 0
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	09 f0       	breq	.+2      	; 0x189e <__vector_11+0x24a>
    189c:	87 c1       	rjmp	.+782    	; 0x1bac <__vector_11+0x558>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	81 31       	cpi	r24, 0x11	; 17
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <__vector_11+0x252>
    18a4:	80 e1       	ldi	r24, 0x10	; 16
    18a6:	8e a3       	std	Y+38, r24	; 0x26
				for (i = n; i; i--) {
    18a8:	8e a1       	ldd	r24, Y+38	; 0x26
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <__vector_11+0x288>
					UEDATX = pgm_read_byte(desc_addr++);
    18ae:	81 ef       	ldi	r24, 0xF1	; 241
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	29 85       	ldd	r18, Y+9	; 0x09
    18b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b6:	38 a7       	std	Y+40, r19	; 0x28
    18b8:	2f a3       	std	Y+39, r18	; 0x27
    18ba:	29 85       	ldd	r18, Y+9	; 0x09
    18bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    18be:	2f 5f       	subi	r18, 0xFF	; 255
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	3a 87       	std	Y+10, r19	; 0x0a
    18c4:	29 87       	std	Y+9, r18	; 0x09
    18c6:	2f a1       	ldd	r18, Y+39	; 0x27
    18c8:	38 a5       	ldd	r19, Y+40	; 0x28
    18ca:	f9 01       	movw	r30, r18
    18cc:	14 91       	lpm	r17, Z+
    18ce:	19 a7       	std	Y+41, r17	; 0x29
    18d0:	29 a5       	ldd	r18, Y+41	; 0x29
    18d2:	fc 01       	movw	r30, r24
    18d4:	20 83       	st	Z, r18
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	81 50       	subi	r24, 0x01	; 1
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	88 23       	and	r24, r24
    18e0:	31 f7       	brne	.-52     	; 0x18ae <__vector_11+0x25a>
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	8e a1       	ldd	r24, Y+38	; 0x26
    18e6:	f9 2f       	mov	r31, r25
    18e8:	f8 1b       	sub	r31, r24
    18ea:	8f 2f       	mov	r24, r31
    18ec:	8e 83       	std	Y+6, r24	; 0x06
				usb_send_in();
    18ee:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			} while (len || n == ENDPOINT0_SIZE);
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	88 23       	and	r24, r24
    18f6:	09 f0       	breq	.+2      	; 0x18fa <__vector_11+0x2a6>
    18f8:	be cf       	rjmp	.-132    	; 0x1876 <__vector_11+0x222>
    18fa:	8e a1       	ldd	r24, Y+38	; 0x26
    18fc:	80 31       	cpi	r24, 0x10	; 16
    18fe:	09 f4       	brne	.+2      	; 0x1902 <__vector_11+0x2ae>
    1900:	ba cf       	rjmp	.-140    	; 0x1876 <__vector_11+0x222>
			return;
    1902:	55 c1       	rjmp	.+682    	; 0x1bae <__vector_11+0x55a>
                }
		if (bRequest == SET_ADDRESS) {
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	85 30       	cpi	r24, 0x05	; 5
    1908:	59 f4       	brne	.+22     	; 0x1920 <__vector_11+0x2cc>
			usb_send_in();
    190a:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			usb_wait_in_ready();
    190e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    1912:	83 ee       	ldi	r24, 0xE3	; 227
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	2e 85       	ldd	r18, Y+14	; 0x0e
    1918:	20 68       	ori	r18, 0x80	; 128
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
			return;
    191e:	47 c1       	rjmp	.+654    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1920:	8d 85       	ldd	r24, Y+13	; 0x0d
    1922:	89 30       	cpi	r24, 0x09	; 9
    1924:	09 f0       	breq	.+2      	; 0x1928 <__vector_11+0x2d4>
    1926:	6a c0       	rjmp	.+212    	; 0x19fc <__vector_11+0x3a8>
    1928:	8c 85       	ldd	r24, Y+12	; 0x0c
    192a:	88 23       	and	r24, r24
    192c:	09 f0       	breq	.+2      	; 0x1930 <__vector_11+0x2dc>
    192e:	66 c0       	rjmp	.+204    	; 0x19fc <__vector_11+0x3a8>
			usb_configuration = wValue;
    1930:	8e 85       	ldd	r24, Y+14	; 0x0e
    1932:	80 93 10 01 	sts	0x0110, r24
			cdc_line_rtsdtr = 0;
    1936:	10 92 13 01 	sts	0x0113, r1
			transmit_flush_timer = 0;
    193a:	10 92 11 01 	sts	0x0111, r1
			usb_send_in();
    193e:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			cfg = endpoint_config_table;
    1942:	8e e2       	ldi	r24, 0x2E	; 46
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
			for (i=1; i<5; i++) {
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	48 c0       	rjmp	.+144    	; 0x19e0 <__vector_11+0x38c>
				UENUM = i;
    1950:	89 ee       	ldi	r24, 0xE9	; 233
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	2d 81       	ldd	r18, Y+5	; 0x05
    1956:	fc 01       	movw	r30, r24
    1958:	20 83       	st	Z, r18
				en = pgm_read_byte(cfg++);
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	9b a7       	std	Y+43, r25	; 0x2b
    1960:	8a a7       	std	Y+42, r24	; 0x2a
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8a a5       	ldd	r24, Y+42	; 0x2a
    196e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1970:	fc 01       	movw	r30, r24
    1972:	14 91       	lpm	r17, Z+
    1974:	1c a7       	std	Y+44, r17	; 0x2c
    1976:	8c a5       	ldd	r24, Y+44	; 0x2c
    1978:	8d a7       	std	Y+45, r24	; 0x2d
				UECONX = en;
    197a:	8b ee       	ldi	r24, 0xEB	; 235
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
				if (en) {
    1984:	8d a5       	ldd	r24, Y+45	; 0x2d
    1986:	88 23       	and	r24, r24
    1988:	41 f1       	breq	.+80     	; 0x19da <__vector_11+0x386>
					UECFG0X = pgm_read_byte(cfg++);
    198a:	8c ee       	ldi	r24, 0xEC	; 236
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	3f a7       	std	Y+47, r19	; 0x2f
    1994:	2e a7       	std	Y+46, r18	; 0x2e
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	3c 83       	std	Y+4, r19	; 0x04
    19a0:	2b 83       	std	Y+3, r18	; 0x03
    19a2:	2e a5       	ldd	r18, Y+46	; 0x2e
    19a4:	3f a5       	ldd	r19, Y+47	; 0x2f
    19a6:	f9 01       	movw	r30, r18
    19a8:	14 91       	lpm	r17, Z+
    19aa:	18 ab       	std	Y+48, r17	; 0x30
    19ac:	28 a9       	ldd	r18, Y+48	; 0x30
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    19b2:	8d ee       	ldi	r24, 0xED	; 237
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	3a ab       	std	Y+50, r19	; 0x32
    19bc:	29 ab       	std	Y+49, r18	; 0x31
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	3c 83       	std	Y+4, r19	; 0x04
    19c8:	2b 83       	std	Y+3, r18	; 0x03
    19ca:	29 a9       	ldd	r18, Y+49	; 0x31
    19cc:	3a a9       	ldd	r19, Y+50	; 0x32
    19ce:	f9 01       	movw	r30, r18
    19d0:	14 91       	lpm	r17, Z+
    19d2:	1b ab       	std	Y+51, r17	; 0x33
    19d4:	2b a9       	ldd	r18, Y+51	; 0x33
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 83       	st	Z, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	08 f4       	brcc	.+2      	; 0x19e8 <__vector_11+0x394>
    19e6:	b4 cf       	rjmp	.-152    	; 0x1950 <__vector_11+0x2fc>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    19e8:	8a ee       	ldi	r24, 0xEA	; 234
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	2e e1       	ldi	r18, 0x1E	; 30
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 83       	st	Z, r18
        		UERST = 0;
    19f2:	8a ee       	ldi	r24, 0xEA	; 234
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	10 82       	st	Z, r1
			return;
    19fa:	d9 c0       	rjmp	.+434    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    19fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fe:	88 30       	cpi	r24, 0x08	; 8
    1a00:	71 f4       	brne	.+28     	; 0x1a1e <__vector_11+0x3ca>
    1a02:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a04:	80 38       	cpi	r24, 0x80	; 128
    1a06:	59 f4       	brne	.+22     	; 0x1a1e <__vector_11+0x3ca>
			usb_wait_in_ready();
    1a08:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <usb_wait_in_ready>
			UEDATX = usb_configuration;
    1a0c:	81 ef       	ldi	r24, 0xF1	; 241
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	20 91 10 01 	lds	r18, 0x0110
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
			usb_send_in();
    1a18:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			return;
    1a1c:	c8 c0       	rjmp	.+400    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	81 32       	cpi	r24, 0x21	; 33
    1a22:	09 f5       	brne	.+66     	; 0x1a66 <__vector_11+0x412>
    1a24:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a26:	81 3a       	cpi	r24, 0xA1	; 161
    1a28:	f1 f4       	brne	.+60     	; 0x1a66 <__vector_11+0x412>
			usb_wait_in_ready();
    1a2a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <usb_wait_in_ready>
			p = cdc_line_coding;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	8f 83       	std	Y+7, r24	; 0x07
			for (i=0; i<7; i++) {
    1a36:	1d 82       	std	Y+5, r1	; 0x05
    1a38:	10 c0       	rjmp	.+32     	; 0x1a5a <__vector_11+0x406>
				UEDATX = *p++;
    1a3a:	81 ef       	ldi	r24, 0xF1	; 241
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a40:	38 85       	ldd	r19, Y+8	; 0x08
    1a42:	f9 01       	movw	r30, r18
    1a44:	20 81       	ld	r18, Z
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
    1a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4c:	98 85       	ldd	r25, Y+8	; 0x08
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	8f 83       	std	Y+7, r24	; 0x07
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	87 30       	cpi	r24, 0x07	; 7
    1a5e:	68 f3       	brcs	.-38     	; 0x1a3a <__vector_11+0x3e6>
				UEDATX = *p++;
			}
			usb_send_in();
    1a60:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			return;
    1a64:	a4 c0       	rjmp	.+328    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	80 32       	cpi	r24, 0x20	; 32
    1a6a:	19 f5       	brne	.+70     	; 0x1ab2 <__vector_11+0x45e>
    1a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6e:	81 32       	cpi	r24, 0x21	; 33
    1a70:	01 f5       	brne	.+64     	; 0x1ab2 <__vector_11+0x45e>
			usb_wait_receive_out();
    1a72:	0e 94 0c 0b 	call	0x1618	; 0x1618 <usb_wait_receive_out>
			p = cdc_line_coding;
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	98 87       	std	Y+8, r25	; 0x08
    1a7c:	8f 83       	std	Y+7, r24	; 0x07
			for (i=0; i<7; i++) {
    1a7e:	1d 82       	std	Y+5, r1	; 0x05
    1a80:	10 c0       	rjmp	.+32     	; 0x1aa2 <__vector_11+0x44e>
				*p++ = UEDATX;
    1a82:	81 ef       	ldi	r24, 0xF1	; 241
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	20 81       	ld	r18, Z
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 85       	ldd	r25, Y+8	; 0x08
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	87 30       	cpi	r24, 0x07	; 7
    1aa6:	68 f3       	brcs	.-38     	; 0x1a82 <__vector_11+0x42e>
				*p++ = UEDATX;
			}
			usb_ack_out();
    1aa8:	0e 94 1e 0b 	call	0x163c	; 0x163c <usb_ack_out>
			usb_send_in();
    1aac:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			return;
    1ab0:	7e c0       	rjmp	.+252    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	82 32       	cpi	r24, 0x22	; 34
    1ab6:	59 f4       	brne	.+22     	; 0x1ace <__vector_11+0x47a>
    1ab8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aba:	81 32       	cpi	r24, 0x21	; 33
    1abc:	41 f4       	brne	.+16     	; 0x1ace <__vector_11+0x47a>
			cdc_line_rtsdtr = wValue;
    1abe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac0:	80 93 13 01 	sts	0x0113, r24
			usb_wait_in_ready();
    1ac4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <usb_wait_in_ready>
			usb_send_in();
    1ac8:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			return;
    1acc:	70 c0       	rjmp	.+224    	; 0x1bae <__vector_11+0x55a>
		}
		if (bRequest == GET_STATUS) {
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	88 23       	and	r24, r24
    1ad2:	39 f5       	brne	.+78     	; 0x1b22 <__vector_11+0x4ce>
			usb_wait_in_ready();
    1ad4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <usb_wait_in_ready>
			i = 0;
    1ad8:	1d 82       	std	Y+5, r1	; 0x05
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1ada:	8c 85       	ldd	r24, Y+12	; 0x0c
    1adc:	82 38       	cpi	r24, 0x82	; 130
    1ade:	a9 f4       	brne	.+42     	; 0x1b0a <__vector_11+0x4b6>
				UENUM = wIndex;
    1ae0:	89 ee       	ldi	r24, 0xE9	; 233
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	28 89       	ldd	r18, Y+16	; 0x10
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 83       	st	Z, r18
				if (UECONX & (1<<STALLRQ)) i = 1;
    1aea:	8b ee       	ldi	r24, 0xEB	; 235
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	80 81       	ld	r24, Z
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	80 72       	andi	r24, 0x20	; 32
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <__vector_11+0x4ae>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8d 83       	std	Y+5, r24	; 0x05
				UENUM = 0;
    1b02:	89 ee       	ldi	r24, 0xE9	; 233
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	fc 01       	movw	r30, r24
    1b08:	10 82       	st	Z, r1
			}
			#endif
			UEDATX = i;
    1b0a:	81 ef       	ldi	r24, 0xF1	; 241
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18
			UEDATX = 0;
    1b14:	81 ef       	ldi	r24, 0xF1	; 241
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	fc 01       	movw	r30, r24
    1b1a:	10 82       	st	Z, r1
			usb_send_in();
    1b1c:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
			return;
    1b20:	46 c0       	rjmp	.+140    	; 0x1bae <__vector_11+0x55a>
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <__vector_11+0x4da>
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	c9 f5       	brne	.+114    	; 0x1ba0 <__vector_11+0x54c>
		  && bmRequestType == 0x02 && wValue == 0) {
    1b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	b1 f5       	brne	.+108    	; 0x1ba0 <__vector_11+0x54c>
    1b34:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b36:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	91 f5       	brne	.+100    	; 0x1ba0 <__vector_11+0x54c>
			i = wIndex & 0x7F;
    1b3c:	88 89       	ldd	r24, Y+16	; 0x10
    1b3e:	8f 77       	andi	r24, 0x7F	; 127
    1b40:	8d 83       	std	Y+5, r24	; 0x05
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	88 23       	and	r24, r24
    1b46:	61 f1       	breq	.+88     	; 0x1ba0 <__vector_11+0x54c>
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	85 30       	cpi	r24, 0x05	; 5
    1b4c:	48 f5       	brcc	.+82     	; 0x1ba0 <__vector_11+0x54c>
				usb_send_in();
    1b4e:	0e 94 00 0b 	call	0x1600	; 0x1600 <usb_send_in>
				UENUM = i;
    1b52:	89 ee       	ldi	r24, 0xE9	; 233
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	2d 81       	ldd	r18, Y+5	; 0x05
    1b58:	fc 01       	movw	r30, r24
    1b5a:	20 83       	st	Z, r18
				if (bRequest == SET_FEATURE) {
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	31 f4       	brne	.+12     	; 0x1b6e <__vector_11+0x51a>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1b62:	8b ee       	ldi	r24, 0xEB	; 235
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	21 e2       	ldi	r18, 0x21	; 33
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
					UERST = 0;
				}
				return;
    1b6c:	20 c0       	rjmp	.+64     	; 0x1bae <__vector_11+0x55a>
				usb_send_in();
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1b6e:	8b ee       	ldi	r24, 0xEB	; 235
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	29 e1       	ldi	r18, 0x19	; 25
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
					UERST = (1 << i);
    1b78:	8a ee       	ldi	r24, 0xEA	; 234
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7e:	42 2f       	mov	r20, r18
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	21 e0       	ldi	r18, 0x01	; 1
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	04 2e       	mov	r0, r20
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <__vector_11+0x53a>
    1b8a:	22 0f       	add	r18, r18
    1b8c:	33 1f       	adc	r19, r19
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <__vector_11+0x536>
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
					UERST = 0;
    1b96:	8a ee       	ldi	r24, 0xEA	; 234
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	10 82       	st	Z, r1
				}
				return;
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <__vector_11+0x55a>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1ba0:	8b ee       	ldi	r24, 0xEB	; 235
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	21 e2       	ldi	r18, 0x21	; 33
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 83       	st	Z, r18
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <__vector_11+0x55a>
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
    1bac:	00 00       	nop
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1bae:	e3 96       	adiw	r28, 0x33	; 51
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1be2:	1f 93       	push	r17
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <print_P+0x8>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <print_P+0xa>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <print_P+0xc>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	14 91       	lpm	r17, Z+
    1c10:	1b 83       	std	Y+3, r17	; 0x03
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	8c 83       	std	Y+4, r24	; 0x04
		if (!c) break;
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	88 23       	and	r24, r24
    1c1a:	51 f0       	breq	.+20     	; 0x1c30 <print_P+0x4e>
		if (c == '\n') usb_tx_char('\r');
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	8a 30       	cpi	r24, 0x0A	; 10
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <print_P+0x46>
    1c22:	8d e0       	ldi	r24, 0x0D	; 13
    1c24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
		usb_tx_char(c);
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
	}
    1c2e:	e3 cf       	rjmp	.-58     	; 0x1bf6 <print_P+0x14>
}
    1c30:	00 00       	nop
    1c32:	26 96       	adiw	r28, 0x06	; 6
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	1f 91       	pop	r17
    1c44:	08 95       	ret

00001c46 <phex1>:

void phex1(unsigned char c)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	89 83       	std	Y+1, r24	; 0x01
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	8a 30       	cpi	r24, 0x0A	; 10
    1c56:	10 f4       	brcc	.+4      	; 0x1c5c <phex1+0x16>
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <phex1+0x18>
    1c5c:	87 e3       	ldi	r24, 0x37	; 55
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	89 0f       	add	r24, r25
    1c62:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>
}
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <phex>:

void phex(unsigned char c)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	0f 92       	push	r0
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	89 83       	std	Y+1, r24	; 0x01
	phex1(c >> 4);
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	82 95       	swap	r24
    1c7e:	8f 70       	andi	r24, 0x0F	; 15
    1c80:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <phex1>
	phex1(c & 15);
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	8f 70       	andi	r24, 0x0F	; 15
    1c88:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <phex1>
}
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <m_usb_tx_hex+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	phex(i >> 8);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	99 27       	eor	r25, r25
    1caa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <phex>
	phex(i);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <phex>
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <m_usb_tx_hexchar>:

void m_usb_tx_hexchar(unsigned char i)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	0f 92       	push	r0
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	phex(i);
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <phex>
}
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <m_usb_tx_int>:

void m_usb_tx_int(int i)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	28 97       	sbiw	r28, 0x08	; 8
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	8f 83       	std	Y+7, r24	; 0x07
	char string[6] = {0,0,0,0,0,0};
    1cf0:	26 e0       	ldi	r18, 0x06	; 6
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	32 2f       	mov	r19, r18
    1cfa:	11 92       	st	Z+, r1
    1cfc:	3a 95       	dec	r19
    1cfe:	e9 f7       	brne	.-6      	; 0x1cfa <m_usb_tx_int+0x22>
	itoa(i,string,10);
    1d00:	8f 81       	ldd	r24, Y+7	; 0x07
    1d02:	98 85       	ldd	r25, Y+8	; 0x08
    1d04:	9e 01       	movw	r18, r28
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	b9 01       	movw	r22, r18
    1d0c:	4a e0       	ldi	r20, 0x0A	; 10
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 56 15 	call	0x2aac	; 0x2aac <itoa>
	for(i=0;i<6;i++){
    1d14:	18 86       	std	Y+8, r1	; 0x08
    1d16:	1f 82       	std	Y+7, r1	; 0x07
    1d18:	1b c0       	rjmp	.+54     	; 0x1d50 <m_usb_tx_int+0x78>
        if(string[i]){
    1d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1c:	98 85       	ldd	r25, Y+8	; 0x08
    1d1e:	9e 01       	movw	r18, r28
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 23       	and	r24, r24
    1d2e:	59 f0       	breq	.+22     	; 0x1d46 <m_usb_tx_int+0x6e>
            m_usb_tx_char(string[i]);
    1d30:	8f 81       	ldd	r24, Y+7	; 0x07
    1d32:	98 85       	ldd	r25, Y+8	; 0x08
    1d34:	9e 01       	movw	r18, r28
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	fc 01       	movw	r30, r24
    1d40:	80 81       	ld	r24, Z
    1d42:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
    1d46:	8f 81       	ldd	r24, Y+7	; 0x07
    1d48:	98 85       	ldd	r25, Y+8	; 0x08
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	8f 83       	std	Y+7, r24	; 0x07
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	86 30       	cpi	r24, 0x06	; 6
    1d56:	91 05       	cpc	r25, r1
    1d58:	04 f3       	brlt	.-64     	; 0x1d1a <m_usb_tx_int+0x42>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1d5a:	28 96       	adiw	r28, 0x08	; 8
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <m_usb_tx_uint>:

void m_usb_tx_uint(unsigned int i)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	27 97       	sbiw	r28, 0x07	; 7
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	9f 83       	std	Y+7, r25	; 0x07
    1d82:	8e 83       	std	Y+6, r24	; 0x06
	char string[5] = {0,0,0,0,0};
    1d84:	25 e0       	ldi	r18, 0x05	; 5
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	32 2f       	mov	r19, r18
    1d8e:	11 92       	st	Z+, r1
    1d90:	3a 95       	dec	r19
    1d92:	e9 f7       	brne	.-6      	; 0x1d8e <m_usb_tx_uint+0x22>
	utoa(i,string,10);
    1d94:	8e 81       	ldd	r24, Y+6	; 0x06
    1d96:	9f 81       	ldd	r25, Y+7	; 0x07
    1d98:	9e 01       	movw	r18, r28
    1d9a:	2f 5f       	subi	r18, 0xFF	; 255
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9e:	b9 01       	movw	r22, r18
    1da0:	4a e0       	ldi	r20, 0x0A	; 10
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <utoa>
	for(i=0;i<5;i++){
    1da8:	1f 82       	std	Y+7, r1	; 0x07
    1daa:	1e 82       	std	Y+6, r1	; 0x06
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <m_usb_tx_uint+0x78>
        if(string[i]){
    1dae:	8e 81       	ldd	r24, Y+6	; 0x06
    1db0:	9f 81       	ldd	r25, Y+7	; 0x07
    1db2:	9e 01       	movw	r18, r28
    1db4:	2f 5f       	subi	r18, 0xFF	; 255
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 23       	and	r24, r24
    1dc2:	59 f0       	breq	.+22     	; 0x1dda <m_usb_tx_uint+0x6e>
            m_usb_tx_char(string[i]);
    1dc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc8:	9e 01       	movw	r18, r28
    1dca:	2f 5f       	subi	r18, 0xFF	; 255
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dce:	82 0f       	add	r24, r18
    1dd0:	93 1f       	adc	r25, r19
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    1dda:	8e 81       	ldd	r24, Y+6	; 0x06
    1ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	9f 83       	std	Y+7, r25	; 0x07
    1de2:	8e 83       	std	Y+6, r24	; 0x06
    1de4:	8e 81       	ldd	r24, Y+6	; 0x06
    1de6:	9f 81       	ldd	r25, Y+7	; 0x07
    1de8:	85 30       	cpi	r24, 0x05	; 5
    1dea:	91 05       	cpc	r25, r1
    1dec:	00 f3       	brcs	.-64     	; 0x1dae <m_usb_tx_uint+0x42>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1dee:	27 96       	adiw	r28, 0x07	; 7
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <m_usb_tx_long>:

void m_usb_tx_long(long i)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	2f 97       	sbiw	r28, 0x0f	; 15
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	6c 87       	std	Y+12, r22	; 0x0c
    1e16:	7d 87       	std	Y+13, r23	; 0x0d
    1e18:	8e 87       	std	Y+14, r24	; 0x0e
    1e1a:	9f 87       	std	Y+15, r25	; 0x0f
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    1e1c:	2b e0       	ldi	r18, 0x0B	; 11
    1e1e:	ce 01       	movw	r24, r28
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	fc 01       	movw	r30, r24
    1e24:	32 2f       	mov	r19, r18
    1e26:	11 92       	st	Z+, r1
    1e28:	3a 95       	dec	r19
    1e2a:	e9 f7       	brne	.-6      	; 0x1e26 <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    1e2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e30:	ae 85       	ldd	r26, Y+14	; 0x0e
    1e32:	bf 85       	ldd	r27, Y+15	; 0x0f
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	9e 01       	movw	r18, r28
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	a9 01       	movw	r20, r18
    1e40:	2a e0       	ldi	r18, 0x0A	; 10
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	0e 94 77 15 	call	0x2aee	; 0x2aee <ltoa>
	for(i=0;i<11;i++){
    1e48:	1c 86       	std	Y+12, r1	; 0x0c
    1e4a:	1d 86       	std	Y+13, r1	; 0x0d
    1e4c:	1e 86       	std	Y+14, r1	; 0x0e
    1e4e:	1f 86       	std	Y+15, r1	; 0x0f
    1e50:	21 c0       	rjmp	.+66     	; 0x1e94 <m_usb_tx_long+0x94>
        if(string[i]){
    1e52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e56:	9e 01       	movw	r18, r28
    1e58:	2f 5f       	subi	r18, 0xFF	; 255
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	82 0f       	add	r24, r18
    1e5e:	93 1f       	adc	r25, r19
    1e60:	fc 01       	movw	r30, r24
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	59 f0       	breq	.+22     	; 0x1e7e <m_usb_tx_long+0x7e>
            m_usb_tx_char(string[i]);
    1e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	fc 01       	movw	r30, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    1e7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e80:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e82:	ae 85       	ldd	r26, Y+14	; 0x0e
    1e84:	bf 85       	ldd	r27, Y+15	; 0x0f
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	a1 1d       	adc	r26, r1
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	8c 87       	std	Y+12, r24	; 0x0c
    1e8e:	9d 87       	std	Y+13, r25	; 0x0d
    1e90:	ae 87       	std	Y+14, r26	; 0x0e
    1e92:	bf 87       	std	Y+15, r27	; 0x0f
    1e94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e98:	ae 85       	ldd	r26, Y+14	; 0x0e
    1e9a:	bf 85       	ldd	r27, Y+15	; 0x0f
    1e9c:	8b 30       	cpi	r24, 0x0B	; 11
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	a1 05       	cpc	r26, r1
    1ea2:	b1 05       	cpc	r27, r1
    1ea4:	b4 f2       	brlt	.-84     	; 0x1e52 <m_usb_tx_long+0x52>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1ea6:	2f 96       	adiw	r28, 0x0f	; 15
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <m_usb_tx_ulong>:

void m_usb_tx_ulong(unsigned long i)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	6b 87       	std	Y+11, r22	; 0x0b
    1ece:	7c 87       	std	Y+12, r23	; 0x0c
    1ed0:	8d 87       	std	Y+13, r24	; 0x0d
    1ed2:	9e 87       	std	Y+14, r25	; 0x0e
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    1ed4:	2a e0       	ldi	r18, 0x0A	; 10
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	fc 01       	movw	r30, r24
    1edc:	32 2f       	mov	r19, r18
    1ede:	11 92       	st	Z+, r1
    1ee0:	3a 95       	dec	r19
    1ee2:	e9 f7       	brne	.-6      	; 0x1ede <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    1ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee8:	ad 85       	ldd	r26, Y+13	; 0x0d
    1eea:	be 85       	ldd	r27, Y+14	; 0x0e
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <ultoa>
	for(i=0;i<10;i++){
    1f00:	1b 86       	std	Y+11, r1	; 0x0b
    1f02:	1c 86       	std	Y+12, r1	; 0x0c
    1f04:	1d 86       	std	Y+13, r1	; 0x0d
    1f06:	1e 86       	std	Y+14, r1	; 0x0e
    1f08:	21 c0       	rjmp	.+66     	; 0x1f4c <m_usb_tx_ulong+0x94>
        if(string[i]){
    1f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0e:	9e 01       	movw	r18, r28
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	82 0f       	add	r24, r18
    1f16:	93 1f       	adc	r25, r19
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	59 f0       	breq	.+22     	; 0x1f36 <m_usb_tx_ulong+0x7e>
            m_usb_tx_char(string[i]);
    1f20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f24:	9e 01       	movw	r18, r28
    1f26:	2f 5f       	subi	r18, 0xFF	; 255
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	82 0f       	add	r24, r18
    1f2c:	93 1f       	adc	r25, r19
    1f2e:	fc 01       	movw	r30, r24
    1f30:	80 81       	ld	r24, Z
    1f32:	0e 94 e7 04 	call	0x9ce	; 0x9ce <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    1f36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1f3c:	be 85       	ldd	r27, Y+14	; 0x0e
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	a1 1d       	adc	r26, r1
    1f42:	b1 1d       	adc	r27, r1
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	ad 87       	std	Y+13, r26	; 0x0d
    1f4a:	be 87       	std	Y+14, r27	; 0x0e
    1f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f50:	ad 85       	ldd	r26, Y+13	; 0x0d
    1f52:	be 85       	ldd	r27, Y+14	; 0x0e
    1f54:	8a 30       	cpi	r24, 0x0A	; 10
    1f56:	91 05       	cpc	r25, r1
    1f58:	a1 05       	cpc	r26, r1
    1f5a:	b1 05       	cpc	r27, r1
    1f5c:	b0 f2       	brcs	.-84     	; 0x1f0a <m_usb_tx_ulong+0x52>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
    1f5e:	2e 96       	adiw	r28, 0x0e	; 14
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <__fixunssfsi>:
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	7b 01       	movw	r14, r22
    1f7a:	8c 01       	movw	r16, r24
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	5f e4       	ldi	r21, 0x4F	; 79
    1f84:	0e 94 b6 12 	call	0x256c	; 0x256c <__gesf2>
    1f88:	87 fd       	sbrc	r24, 7
    1f8a:	11 c0       	rjmp	.+34     	; 0x1fae <__fixunssfsi+0x3e>
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	b7 01       	movw	r22, r14
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	5f e4       	ldi	r21, 0x4F	; 79
    1f98:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__subsf3>
    1f9c:	0e 94 16 13 	call	0x262c	; 0x262c <__fixsfsi>
    1fa0:	9b 01       	movw	r18, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	20 50       	subi	r18, 0x00	; 0
    1fa6:	30 40       	sbci	r19, 0x00	; 0
    1fa8:	40 40       	sbci	r20, 0x00	; 0
    1faa:	50 48       	sbci	r21, 0x80	; 128
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <__fixunssfsi+0x4a>
    1fae:	c8 01       	movw	r24, r16
    1fb0:	b7 01       	movw	r22, r14
    1fb2:	0e 94 16 13 	call	0x262c	; 0x262c <__fixsfsi>
    1fb6:	9b 01       	movw	r18, r22
    1fb8:	ac 01       	movw	r20, r24
    1fba:	b9 01       	movw	r22, r18
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	08 95       	ret

00001fc8 <_fpadd_parts>:
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ea ee       	ldi	r30, 0xEA	; 234
    1fce:	ff e0       	ldi	r31, 0x0F	; 15
    1fd0:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x8>
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	ea 01       	movw	r28, r20
    1fd8:	80 81       	ld	r24, Z
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	08 f4       	brcc	.+2      	; 0x1fe0 <_fpadd_parts+0x18>
    1fde:	38 c1       	rjmp	.+624    	; 0x2250 <_fpadd_parts+0x288>
    1fe0:	db 01       	movw	r26, r22
    1fe2:	9c 91       	ld	r25, X
    1fe4:	92 30       	cpi	r25, 0x02	; 2
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <_fpadd_parts+0x22>
    1fe8:	30 c1       	rjmp	.+608    	; 0x224a <_fpadd_parts+0x282>
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	59 f4       	brne	.+22     	; 0x2004 <_fpadd_parts+0x3c>
    1fee:	94 30       	cpi	r25, 0x04	; 4
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <_fpadd_parts+0x2c>
    1ff2:	2e c1       	rjmp	.+604    	; 0x2250 <_fpadd_parts+0x288>
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	11 96       	adiw	r26, 0x01	; 1
    1ff8:	8c 91       	ld	r24, X
    1ffa:	11 97       	sbiw	r26, 0x01	; 1
    1ffc:	98 17       	cp	r25, r24
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <_fpadd_parts+0x3a>
    2000:	21 c1       	rjmp	.+578    	; 0x2244 <_fpadd_parts+0x27c>
    2002:	26 c1       	rjmp	.+588    	; 0x2250 <_fpadd_parts+0x288>
    2004:	94 30       	cpi	r25, 0x04	; 4
    2006:	09 f4       	brne	.+2      	; 0x200a <_fpadd_parts+0x42>
    2008:	20 c1       	rjmp	.+576    	; 0x224a <_fpadd_parts+0x282>
    200a:	92 30       	cpi	r25, 0x02	; 2
    200c:	b1 f4       	brne	.+44     	; 0x203a <_fpadd_parts+0x72>
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	09 f0       	breq	.+2      	; 0x2014 <_fpadd_parts+0x4c>
    2012:	1e c1       	rjmp	.+572    	; 0x2250 <_fpadd_parts+0x288>
    2014:	ca 01       	movw	r24, r20
    2016:	af 01       	movw	r20, r30
    2018:	28 e0       	ldi	r18, 0x08	; 8
    201a:	da 01       	movw	r26, r20
    201c:	0d 90       	ld	r0, X+
    201e:	ad 01       	movw	r20, r26
    2020:	dc 01       	movw	r26, r24
    2022:	0d 92       	st	X+, r0
    2024:	cd 01       	movw	r24, r26
    2026:	21 50       	subi	r18, 0x01	; 1
    2028:	c1 f7       	brne	.-16     	; 0x201a <_fpadd_parts+0x52>
    202a:	db 01       	movw	r26, r22
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	8c 91       	ld	r24, X
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	89 23       	and	r24, r25
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	0a c1       	rjmp	.+532    	; 0x224e <_fpadd_parts+0x286>
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	09 f4       	brne	.+2      	; 0x2040 <_fpadd_parts+0x78>
    203e:	05 c1       	rjmp	.+522    	; 0x224a <_fpadd_parts+0x282>
    2040:	c2 80       	ldd	r12, Z+2	; 0x02
    2042:	d3 80       	ldd	r13, Z+3	; 0x03
    2044:	db 01       	movw	r26, r22
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	6d 90       	ld	r6, X+
    204a:	7c 90       	ld	r7, X
    204c:	13 97       	sbiw	r26, 0x03	; 3
    204e:	24 81       	ldd	r18, Z+4	; 0x04
    2050:	35 81       	ldd	r19, Z+5	; 0x05
    2052:	46 81       	ldd	r20, Z+6	; 0x06
    2054:	57 81       	ldd	r21, Z+7	; 0x07
    2056:	14 96       	adiw	r26, 0x04	; 4
    2058:	ed 90       	ld	r14, X+
    205a:	fd 90       	ld	r15, X+
    205c:	0d 91       	ld	r16, X+
    205e:	1c 91       	ld	r17, X
    2060:	17 97       	sbiw	r26, 0x07	; 7
    2062:	c6 01       	movw	r24, r12
    2064:	86 19       	sub	r24, r6
    2066:	97 09       	sbc	r25, r7
    2068:	5c 01       	movw	r10, r24
    206a:	97 ff       	sbrs	r25, 7
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <_fpadd_parts+0xae>
    206e:	aa 24       	eor	r10, r10
    2070:	bb 24       	eor	r11, r11
    2072:	a8 1a       	sub	r10, r24
    2074:	b9 0a       	sbc	r11, r25
    2076:	b0 e2       	ldi	r27, 0x20	; 32
    2078:	ab 16       	cp	r10, r27
    207a:	b1 04       	cpc	r11, r1
    207c:	0c f0       	brlt	.+2      	; 0x2080 <_fpadd_parts+0xb8>
    207e:	61 c0       	rjmp	.+194    	; 0x2142 <_fpadd_parts+0x17a>
    2080:	18 16       	cp	r1, r24
    2082:	19 06       	cpc	r1, r25
    2084:	6c f5       	brge	.+90     	; 0x20e0 <_fpadd_parts+0x118>
    2086:	37 01       	movw	r6, r14
    2088:	48 01       	movw	r8, r16
    208a:	0a 2c       	mov	r0, r10
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <_fpadd_parts+0xce>
    208e:	96 94       	lsr	r9
    2090:	87 94       	ror	r8
    2092:	77 94       	ror	r7
    2094:	67 94       	ror	r6
    2096:	0a 94       	dec	r0
    2098:	d2 f7       	brpl	.-12     	; 0x208e <_fpadd_parts+0xc6>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	0a 2c       	mov	r0, r10
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <_fpadd_parts+0xe6>
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	aa 1f       	adc	r26, r26
    20ac:	bb 1f       	adc	r27, r27
    20ae:	0a 94       	dec	r0
    20b0:	d2 f7       	brpl	.-12     	; 0x20a6 <_fpadd_parts+0xde>
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	a1 09       	sbc	r26, r1
    20b6:	b1 09       	sbc	r27, r1
    20b8:	8e 21       	and	r24, r14
    20ba:	9f 21       	and	r25, r15
    20bc:	a0 23       	and	r26, r16
    20be:	b1 23       	and	r27, r17
    20c0:	ee 24       	eor	r14, r14
    20c2:	ff 24       	eor	r15, r15
    20c4:	87 01       	movw	r16, r14
    20c6:	e3 94       	inc	r14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	a1 05       	cpc	r26, r1
    20cc:	b1 05       	cpc	r27, r1
    20ce:	19 f4       	brne	.+6      	; 0x20d6 <_fpadd_parts+0x10e>
    20d0:	ee 24       	eor	r14, r14
    20d2:	ff 24       	eor	r15, r15
    20d4:	87 01       	movw	r16, r14
    20d6:	e6 28       	or	r14, r6
    20d8:	f7 28       	or	r15, r7
    20da:	08 29       	or	r16, r8
    20dc:	19 29       	or	r17, r9
    20de:	3c c0       	rjmp	.+120    	; 0x2158 <_fpadd_parts+0x190>
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	d1 f1       	breq	.+116    	; 0x2158 <_fpadd_parts+0x190>
    20e4:	ca 0c       	add	r12, r10
    20e6:	db 1c       	adc	r13, r11
    20e8:	39 01       	movw	r6, r18
    20ea:	4a 01       	movw	r8, r20
    20ec:	0a 2c       	mov	r0, r10
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <_fpadd_parts+0x130>
    20f0:	96 94       	lsr	r9
    20f2:	87 94       	ror	r8
    20f4:	77 94       	ror	r7
    20f6:	67 94       	ror	r6
    20f8:	0a 94       	dec	r0
    20fa:	d2 f7       	brpl	.-12     	; 0x20f0 <_fpadd_parts+0x128>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	0a 2c       	mov	r0, r10
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <_fpadd_parts+0x148>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	0a 94       	dec	r0
    2112:	d2 f7       	brpl	.-12     	; 0x2108 <_fpadd_parts+0x140>
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	a1 09       	sbc	r26, r1
    2118:	b1 09       	sbc	r27, r1
    211a:	82 23       	and	r24, r18
    211c:	93 23       	and	r25, r19
    211e:	a4 23       	and	r26, r20
    2120:	b5 23       	and	r27, r21
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	a1 05       	cpc	r26, r1
    212e:	b1 05       	cpc	r27, r1
    2130:	19 f4       	brne	.+6      	; 0x2138 <_fpadd_parts+0x170>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	a9 01       	movw	r20, r18
    2138:	26 29       	or	r18, r6
    213a:	37 29       	or	r19, r7
    213c:	48 29       	or	r20, r8
    213e:	59 29       	or	r21, r9
    2140:	0b c0       	rjmp	.+22     	; 0x2158 <_fpadd_parts+0x190>
    2142:	6c 14       	cp	r6, r12
    2144:	7d 04       	cpc	r7, r13
    2146:	24 f4       	brge	.+8      	; 0x2150 <_fpadd_parts+0x188>
    2148:	ee 24       	eor	r14, r14
    214a:	ff 24       	eor	r15, r15
    214c:	87 01       	movw	r16, r14
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <_fpadd_parts+0x190>
    2150:	63 01       	movw	r12, r6
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	a9 01       	movw	r20, r18
    2158:	81 81       	ldd	r24, Z+1	; 0x01
    215a:	fb 01       	movw	r30, r22
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	89 17       	cp	r24, r25
    2160:	09 f4       	brne	.+2      	; 0x2164 <_fpadd_parts+0x19c>
    2162:	45 c0       	rjmp	.+138    	; 0x21ee <_fpadd_parts+0x226>
    2164:	88 23       	and	r24, r24
    2166:	49 f0       	breq	.+18     	; 0x217a <_fpadd_parts+0x1b2>
    2168:	d8 01       	movw	r26, r16
    216a:	c7 01       	movw	r24, r14
    216c:	82 1b       	sub	r24, r18
    216e:	93 0b       	sbc	r25, r19
    2170:	a4 0b       	sbc	r26, r20
    2172:	b5 0b       	sbc	r27, r21
    2174:	9c 01       	movw	r18, r24
    2176:	ad 01       	movw	r20, r26
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <_fpadd_parts+0x1ba>
    217a:	2e 19       	sub	r18, r14
    217c:	3f 09       	sbc	r19, r15
    217e:	40 0b       	sbc	r20, r16
    2180:	51 0b       	sbc	r21, r17
    2182:	57 fd       	sbrc	r21, 7
    2184:	04 c0       	rjmp	.+8      	; 0x218e <_fpadd_parts+0x1c6>
    2186:	19 82       	std	Y+1, r1	; 0x01
    2188:	db 82       	std	Y+3, r13	; 0x03
    218a:	ca 82       	std	Y+2, r12	; 0x02
    218c:	0b c0       	rjmp	.+22     	; 0x21a4 <_fpadd_parts+0x1dc>
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	db 82       	std	Y+3, r13	; 0x03
    2194:	ca 82       	std	Y+2, r12	; 0x02
    2196:	50 95       	com	r21
    2198:	40 95       	com	r20
    219a:	30 95       	com	r19
    219c:	21 95       	neg	r18
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	4f 4f       	sbci	r20, 0xFF	; 255
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	2c 83       	std	Y+4, r18	; 0x04
    21a6:	3d 83       	std	Y+5, r19	; 0x05
    21a8:	4e 83       	std	Y+6, r20	; 0x06
    21aa:	5f 83       	std	Y+7, r21	; 0x07
    21ac:	0d c0       	rjmp	.+26     	; 0x21c8 <_fpadd_parts+0x200>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	aa 1f       	adc	r26, r26
    21b4:	bb 1f       	adc	r27, r27
    21b6:	8c 83       	std	Y+4, r24	; 0x04
    21b8:	9d 83       	std	Y+5, r25	; 0x05
    21ba:	ae 83       	std	Y+6, r26	; 0x06
    21bc:	bf 83       	std	Y+7, r27	; 0x07
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	9d 81       	ldd	r25, Y+5	; 0x05
    21cc:	ae 81       	ldd	r26, Y+6	; 0x06
    21ce:	bf 81       	ldd	r27, Y+7	; 0x07
    21d0:	9c 01       	movw	r18, r24
    21d2:	ad 01       	movw	r20, r26
    21d4:	21 50       	subi	r18, 0x01	; 1
    21d6:	30 40       	sbci	r19, 0x00	; 0
    21d8:	40 40       	sbci	r20, 0x00	; 0
    21da:	50 40       	sbci	r21, 0x00	; 0
    21dc:	2f 3f       	cpi	r18, 0xFF	; 255
    21de:	ef ef       	ldi	r30, 0xFF	; 255
    21e0:	3e 07       	cpc	r19, r30
    21e2:	ef ef       	ldi	r30, 0xFF	; 255
    21e4:	4e 07       	cpc	r20, r30
    21e6:	ef e3       	ldi	r30, 0x3F	; 63
    21e8:	5e 07       	cpc	r21, r30
    21ea:	08 f3       	brcs	.-62     	; 0x21ae <_fpadd_parts+0x1e6>
    21ec:	0b c0       	rjmp	.+22     	; 0x2204 <_fpadd_parts+0x23c>
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	db 82       	std	Y+3, r13	; 0x03
    21f2:	ca 82       	std	Y+2, r12	; 0x02
    21f4:	2e 0d       	add	r18, r14
    21f6:	3f 1d       	adc	r19, r15
    21f8:	40 1f       	adc	r20, r16
    21fa:	51 1f       	adc	r21, r17
    21fc:	2c 83       	std	Y+4, r18	; 0x04
    21fe:	3d 83       	std	Y+5, r19	; 0x05
    2200:	4e 83       	std	Y+6, r20	; 0x06
    2202:	5f 83       	std	Y+7, r21	; 0x07
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	88 83       	st	Y, r24
    2208:	2c 81       	ldd	r18, Y+4	; 0x04
    220a:	3d 81       	ldd	r19, Y+5	; 0x05
    220c:	4e 81       	ldd	r20, Y+6	; 0x06
    220e:	5f 81       	ldd	r21, Y+7	; 0x07
    2210:	57 ff       	sbrs	r21, 7
    2212:	1d c0       	rjmp	.+58     	; 0x224e <_fpadd_parts+0x286>
    2214:	da 01       	movw	r26, r20
    2216:	c9 01       	movw	r24, r18
    2218:	81 70       	andi	r24, 0x01	; 1
    221a:	90 70       	andi	r25, 0x00	; 0
    221c:	a0 70       	andi	r26, 0x00	; 0
    221e:	b0 70       	andi	r27, 0x00	; 0
    2220:	56 95       	lsr	r21
    2222:	47 95       	ror	r20
    2224:	37 95       	ror	r19
    2226:	27 95       	ror	r18
    2228:	82 2b       	or	r24, r18
    222a:	93 2b       	or	r25, r19
    222c:	a4 2b       	or	r26, r20
    222e:	b5 2b       	or	r27, r21
    2230:	8c 83       	std	Y+4, r24	; 0x04
    2232:	9d 83       	std	Y+5, r25	; 0x05
    2234:	ae 83       	std	Y+6, r26	; 0x06
    2236:	bf 83       	std	Y+7, r27	; 0x07
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	05 c0       	rjmp	.+10     	; 0x224e <_fpadd_parts+0x286>
    2244:	e7 e0       	ldi	r30, 0x07	; 7
    2246:	f1 e0       	ldi	r31, 0x01	; 1
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <_fpadd_parts+0x288>
    224a:	fb 01       	movw	r30, r22
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <_fpadd_parts+0x288>
    224e:	fe 01       	movw	r30, r28
    2250:	cf 01       	movw	r24, r30
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	ee e0       	ldi	r30, 0x0E	; 14
    2258:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x8>

0000225c <__addsf3>:
    225c:	a0 e2       	ldi	r26, 0x20	; 32
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e4 e3       	ldi	r30, 0x34	; 52
    2262:	f1 e1       	ldi	r31, 0x11	; 17
    2264:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
    2268:	69 83       	std	Y+1, r22	; 0x01
    226a:	7a 83       	std	Y+2, r23	; 0x02
    226c:	8b 83       	std	Y+3, r24	; 0x03
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	2d 83       	std	Y+5, r18	; 0x05
    2272:	3e 83       	std	Y+6, r19	; 0x06
    2274:	4f 83       	std	Y+7, r20	; 0x07
    2276:	58 87       	std	Y+8, r21	; 0x08
    2278:	89 e0       	ldi	r24, 0x09	; 9
    227a:	e8 2e       	mov	r14, r24
    227c:	f1 2c       	mov	r15, r1
    227e:	ec 0e       	add	r14, r28
    2280:	fd 1e       	adc	r15, r29
    2282:	ce 01       	movw	r24, r28
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	b7 01       	movw	r22, r14
    2288:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    228c:	8e 01       	movw	r16, r28
    228e:	0f 5e       	subi	r16, 0xEF	; 239
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	ce 01       	movw	r24, r28
    2294:	05 96       	adiw	r24, 0x05	; 5
    2296:	b8 01       	movw	r22, r16
    2298:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    229c:	c7 01       	movw	r24, r14
    229e:	b8 01       	movw	r22, r16
    22a0:	ae 01       	movw	r20, r28
    22a2:	47 5e       	subi	r20, 0xE7	; 231
    22a4:	5f 4f       	sbci	r21, 0xFF	; 255
    22a6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_fpadd_parts>
    22aa:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__pack_f>
    22ae:	a0 96       	adiw	r28, 0x20	; 32
    22b0:	e6 e0       	ldi	r30, 0x06	; 6
    22b2:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

000022b6 <__subsf3>:
    22b6:	a0 e2       	ldi	r26, 0x20	; 32
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e1 e6       	ldi	r30, 0x61	; 97
    22bc:	f1 e1       	ldi	r31, 0x11	; 17
    22be:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
    22c2:	69 83       	std	Y+1, r22	; 0x01
    22c4:	7a 83       	std	Y+2, r23	; 0x02
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	2d 83       	std	Y+5, r18	; 0x05
    22cc:	3e 83       	std	Y+6, r19	; 0x06
    22ce:	4f 83       	std	Y+7, r20	; 0x07
    22d0:	58 87       	std	Y+8, r21	; 0x08
    22d2:	8e 01       	movw	r16, r28
    22d4:	07 5f       	subi	r16, 0xF7	; 247
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	b8 01       	movw	r22, r16
    22de:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    22e2:	91 e1       	ldi	r25, 0x11	; 17
    22e4:	e9 2e       	mov	r14, r25
    22e6:	f1 2c       	mov	r15, r1
    22e8:	ec 0e       	add	r14, r28
    22ea:	fd 1e       	adc	r15, r29
    22ec:	ce 01       	movw	r24, r28
    22ee:	05 96       	adiw	r24, 0x05	; 5
    22f0:	b7 01       	movw	r22, r14
    22f2:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    22f6:	8a 89       	ldd	r24, Y+18	; 0x12
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	89 27       	eor	r24, r25
    22fc:	8a 8b       	std	Y+18, r24	; 0x12
    22fe:	c8 01       	movw	r24, r16
    2300:	b7 01       	movw	r22, r14
    2302:	ae 01       	movw	r20, r28
    2304:	47 5e       	subi	r20, 0xE7	; 231
    2306:	5f 4f       	sbci	r21, 0xFF	; 255
    2308:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_fpadd_parts>
    230c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__pack_f>
    2310:	a0 96       	adiw	r28, 0x20	; 32
    2312:	e6 e0       	ldi	r30, 0x06	; 6
    2314:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

00002318 <__mulsf3>:
    2318:	a0 e2       	ldi	r26, 0x20	; 32
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e2 e9       	ldi	r30, 0x92	; 146
    231e:	f1 e1       	ldi	r31, 0x11	; 17
    2320:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__prologue_saves__>
    2324:	69 83       	std	Y+1, r22	; 0x01
    2326:	7a 83       	std	Y+2, r23	; 0x02
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	2d 83       	std	Y+5, r18	; 0x05
    232e:	3e 83       	std	Y+6, r19	; 0x06
    2330:	4f 83       	std	Y+7, r20	; 0x07
    2332:	58 87       	std	Y+8, r21	; 0x08
    2334:	ce 01       	movw	r24, r28
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	be 01       	movw	r22, r28
    233a:	67 5f       	subi	r22, 0xF7	; 247
    233c:	7f 4f       	sbci	r23, 0xFF	; 255
    233e:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    2342:	ce 01       	movw	r24, r28
    2344:	05 96       	adiw	r24, 0x05	; 5
    2346:	be 01       	movw	r22, r28
    2348:	6f 5e       	subi	r22, 0xEF	; 239
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    2350:	99 85       	ldd	r25, Y+9	; 0x09
    2352:	92 30       	cpi	r25, 0x02	; 2
    2354:	78 f0       	brcs	.+30     	; 0x2374 <__mulsf3+0x5c>
    2356:	89 89       	ldd	r24, Y+17	; 0x11
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	c0 f0       	brcs	.+48     	; 0x238c <__mulsf3+0x74>
    235c:	94 30       	cpi	r25, 0x04	; 4
    235e:	19 f4       	brne	.+6      	; 0x2366 <__mulsf3+0x4e>
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	41 f4       	brne	.+16     	; 0x2374 <__mulsf3+0x5c>
    2364:	cb c0       	rjmp	.+406    	; 0x24fc <__mulsf3+0x1e4>
    2366:	84 30       	cpi	r24, 0x04	; 4
    2368:	19 f4       	brne	.+6      	; 0x2370 <__mulsf3+0x58>
    236a:	92 30       	cpi	r25, 0x02	; 2
    236c:	79 f4       	brne	.+30     	; 0x238c <__mulsf3+0x74>
    236e:	c6 c0       	rjmp	.+396    	; 0x24fc <__mulsf3+0x1e4>
    2370:	92 30       	cpi	r25, 0x02	; 2
    2372:	51 f4       	brne	.+20     	; 0x2388 <__mulsf3+0x70>
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	2a 85       	ldd	r18, Y+10	; 0x0a
    2378:	9a 89       	ldd	r25, Y+18	; 0x12
    237a:	29 17       	cp	r18, r25
    237c:	09 f4       	brne	.+2      	; 0x2380 <__mulsf3+0x68>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	8a 87       	std	Y+10, r24	; 0x0a
    2382:	ce 01       	movw	r24, r28
    2384:	09 96       	adiw	r24, 0x09	; 9
    2386:	bc c0       	rjmp	.+376    	; 0x2500 <__mulsf3+0x1e8>
    2388:	82 30       	cpi	r24, 0x02	; 2
    238a:	51 f4       	brne	.+20     	; 0x23a0 <__mulsf3+0x88>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2390:	9a 89       	ldd	r25, Y+18	; 0x12
    2392:	29 17       	cp	r18, r25
    2394:	09 f4       	brne	.+2      	; 0x2398 <__mulsf3+0x80>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	8a 8b       	std	Y+18, r24	; 0x12
    239a:	ce 01       	movw	r24, r28
    239c:	41 96       	adiw	r24, 0x11	; 17
    239e:	b0 c0       	rjmp	.+352    	; 0x2500 <__mulsf3+0x1e8>
    23a0:	6d 84       	ldd	r6, Y+13	; 0x0d
    23a2:	7e 84       	ldd	r7, Y+14	; 0x0e
    23a4:	8f 84       	ldd	r8, Y+15	; 0x0f
    23a6:	98 88       	ldd	r9, Y+16	; 0x10
    23a8:	ed 88       	ldd	r14, Y+21	; 0x15
    23aa:	fe 88       	ldd	r15, Y+22	; 0x16
    23ac:	0f 89       	ldd	r16, Y+23	; 0x17
    23ae:	18 8d       	ldd	r17, Y+24	; 0x18
    23b0:	e0 e2       	ldi	r30, 0x20	; 32
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	dc 01       	movw	r26, r24
    23ba:	aa 24       	eor	r10, r10
    23bc:	bb 24       	eor	r11, r11
    23be:	65 01       	movw	r12, r10
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	a9 01       	movw	r20, r18
    23c6:	b3 01       	movw	r22, r6
    23c8:	61 70       	andi	r22, 0x01	; 1
    23ca:	70 70       	andi	r23, 0x00	; 0
    23cc:	61 15       	cp	r22, r1
    23ce:	71 05       	cpc	r23, r1
    23d0:	d1 f0       	breq	.+52     	; 0x2406 <__mulsf3+0xee>
    23d2:	2e 0d       	add	r18, r14
    23d4:	3f 1d       	adc	r19, r15
    23d6:	40 1f       	adc	r20, r16
    23d8:	51 1f       	adc	r21, r17
    23da:	15 01       	movw	r2, r10
    23dc:	26 01       	movw	r4, r12
    23de:	28 0e       	add	r2, r24
    23e0:	39 1e       	adc	r3, r25
    23e2:	4a 1e       	adc	r4, r26
    23e4:	5b 1e       	adc	r5, r27
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e0       	ldi	r26, 0x00	; 0
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	2e 15       	cp	r18, r14
    23f0:	3f 05       	cpc	r19, r15
    23f2:	40 07       	cpc	r20, r16
    23f4:	51 07       	cpc	r21, r17
    23f6:	18 f0       	brcs	.+6      	; 0x23fe <__mulsf3+0xe6>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	dc 01       	movw	r26, r24
    23fe:	82 0d       	add	r24, r2
    2400:	93 1d       	adc	r25, r3
    2402:	a4 1d       	adc	r26, r4
    2404:	b5 1d       	adc	r27, r5
    2406:	aa 0c       	add	r10, r10
    2408:	bb 1c       	adc	r11, r11
    240a:	cc 1c       	adc	r12, r12
    240c:	dd 1c       	adc	r13, r13
    240e:	17 ff       	sbrs	r17, 7
    2410:	09 c0       	rjmp	.+18     	; 0x2424 <__mulsf3+0x10c>
    2412:	61 e0       	ldi	r22, 0x01	; 1
    2414:	26 2e       	mov	r2, r22
    2416:	31 2c       	mov	r3, r1
    2418:	41 2c       	mov	r4, r1
    241a:	51 2c       	mov	r5, r1
    241c:	a2 28       	or	r10, r2
    241e:	b3 28       	or	r11, r3
    2420:	c4 28       	or	r12, r4
    2422:	d5 28       	or	r13, r5
    2424:	31 97       	sbiw	r30, 0x01	; 1
    2426:	49 f0       	breq	.+18     	; 0x243a <__mulsf3+0x122>
    2428:	ee 0c       	add	r14, r14
    242a:	ff 1c       	adc	r15, r15
    242c:	00 1f       	adc	r16, r16
    242e:	11 1f       	adc	r17, r17
    2430:	96 94       	lsr	r9
    2432:	87 94       	ror	r8
    2434:	77 94       	ror	r7
    2436:	67 94       	ror	r6
    2438:	c6 cf       	rjmp	.-116    	; 0x23c6 <__mulsf3+0xae>
    243a:	6b 89       	ldd	r22, Y+19	; 0x13
    243c:	7c 89       	ldd	r23, Y+20	; 0x14
    243e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2440:	fc 85       	ldd	r31, Y+12	; 0x0c
    2442:	6e 0f       	add	r22, r30
    2444:	7f 1f       	adc	r23, r31
    2446:	6e 5f       	subi	r22, 0xFE	; 254
    2448:	7f 4f       	sbci	r23, 0xFF	; 255
    244a:	7c 8f       	std	Y+28, r23	; 0x1c
    244c:	6b 8f       	std	Y+27, r22	; 0x1b
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	ea 85       	ldd	r30, Y+10	; 0x0a
    2452:	7a 89       	ldd	r23, Y+18	; 0x12
    2454:	e7 17       	cp	r30, r23
    2456:	09 f4       	brne	.+2      	; 0x245a <__mulsf3+0x142>
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	6a 8f       	std	Y+26, r22	; 0x1a
    245c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    245e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2460:	10 c0       	rjmp	.+32     	; 0x2482 <__mulsf3+0x16a>
    2462:	fc 01       	movw	r30, r24
    2464:	e1 70       	andi	r30, 0x01	; 1
    2466:	f0 70       	andi	r31, 0x00	; 0
    2468:	30 97       	sbiw	r30, 0x00	; 0
    246a:	29 f0       	breq	.+10     	; 0x2476 <__mulsf3+0x15e>
    246c:	56 95       	lsr	r21
    246e:	47 95       	ror	r20
    2470:	37 95       	ror	r19
    2472:	27 95       	ror	r18
    2474:	50 68       	ori	r21, 0x80	; 128
    2476:	b6 95       	lsr	r27
    2478:	a7 95       	ror	r26
    247a:	97 95       	ror	r25
    247c:	87 95       	ror	r24
    247e:	6f 5f       	subi	r22, 0xFF	; 255
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	b7 fd       	sbrc	r27, 7
    2484:	ee cf       	rjmp	.-36     	; 0x2462 <__mulsf3+0x14a>
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <__mulsf3+0x188>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	aa 1f       	adc	r26, r26
    248e:	bb 1f       	adc	r27, r27
    2490:	57 fd       	sbrc	r21, 7
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	44 1f       	adc	r20, r20
    249a:	55 1f       	adc	r21, r21
    249c:	61 50       	subi	r22, 0x01	; 1
    249e:	70 40       	sbci	r23, 0x00	; 0
    24a0:	80 30       	cpi	r24, 0x00	; 0
    24a2:	e0 e0       	ldi	r30, 0x00	; 0
    24a4:	9e 07       	cpc	r25, r30
    24a6:	e0 e0       	ldi	r30, 0x00	; 0
    24a8:	ae 07       	cpc	r26, r30
    24aa:	e0 e4       	ldi	r30, 0x40	; 64
    24ac:	be 07       	cpc	r27, r30
    24ae:	60 f3       	brcs	.-40     	; 0x2488 <__mulsf3+0x170>
    24b0:	6b 8f       	std	Y+27, r22	; 0x1b
    24b2:	7c 8f       	std	Y+28, r23	; 0x1c
    24b4:	6f e7       	ldi	r22, 0x7F	; 127
    24b6:	e6 2e       	mov	r14, r22
    24b8:	f1 2c       	mov	r15, r1
    24ba:	01 2d       	mov	r16, r1
    24bc:	11 2d       	mov	r17, r1
    24be:	e8 22       	and	r14, r24
    24c0:	f9 22       	and	r15, r25
    24c2:	0a 23       	and	r16, r26
    24c4:	1b 23       	and	r17, r27
    24c6:	60 e4       	ldi	r22, 0x40	; 64
    24c8:	e6 16       	cp	r14, r22
    24ca:	f1 04       	cpc	r15, r1
    24cc:	01 05       	cpc	r16, r1
    24ce:	11 05       	cpc	r17, r1
    24d0:	61 f4       	brne	.+24     	; 0x24ea <__mulsf3+0x1d2>
    24d2:	87 fd       	sbrc	r24, 7
    24d4:	0a c0       	rjmp	.+20     	; 0x24ea <__mulsf3+0x1d2>
    24d6:	21 15       	cp	r18, r1
    24d8:	31 05       	cpc	r19, r1
    24da:	41 05       	cpc	r20, r1
    24dc:	51 05       	cpc	r21, r1
    24de:	29 f0       	breq	.+10     	; 0x24ea <__mulsf3+0x1d2>
    24e0:	80 5c       	subi	r24, 0xC0	; 192
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	af 4f       	sbci	r26, 0xFF	; 255
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	80 78       	andi	r24, 0x80	; 128
    24ea:	8d 8f       	std	Y+29, r24	; 0x1d
    24ec:	9e 8f       	std	Y+30, r25	; 0x1e
    24ee:	af 8f       	std	Y+31, r26	; 0x1f
    24f0:	b8 a3       	std	Y+32, r27	; 0x20
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	89 8f       	std	Y+25, r24	; 0x19
    24f6:	ce 01       	movw	r24, r28
    24f8:	49 96       	adiw	r24, 0x19	; 25
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <__mulsf3+0x1e8>
    24fc:	87 e0       	ldi	r24, 0x07	; 7
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__pack_f>
    2504:	a0 96       	adiw	r28, 0x20	; 32
    2506:	e2 e1       	ldi	r30, 0x12	; 18
    2508:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__epilogue_restores__>

0000250c <__gtsf2>:
    250c:	a8 e1       	ldi	r26, 0x18	; 24
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ec e8       	ldi	r30, 0x8C	; 140
    2512:	f2 e1       	ldi	r31, 0x12	; 18
    2514:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
    2518:	69 83       	std	Y+1, r22	; 0x01
    251a:	7a 83       	std	Y+2, r23	; 0x02
    251c:	8b 83       	std	Y+3, r24	; 0x03
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	2d 83       	std	Y+5, r18	; 0x05
    2522:	3e 83       	std	Y+6, r19	; 0x06
    2524:	4f 83       	std	Y+7, r20	; 0x07
    2526:	58 87       	std	Y+8, r21	; 0x08
    2528:	8e 01       	movw	r16, r28
    252a:	07 5f       	subi	r16, 0xF7	; 247
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	ce 01       	movw	r24, r28
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	b8 01       	movw	r22, r16
    2534:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    2538:	81 e1       	ldi	r24, 0x11	; 17
    253a:	e8 2e       	mov	r14, r24
    253c:	f1 2c       	mov	r15, r1
    253e:	ec 0e       	add	r14, r28
    2540:	fd 1e       	adc	r15, r29
    2542:	ce 01       	movw	r24, r28
    2544:	05 96       	adiw	r24, 0x05	; 5
    2546:	b7 01       	movw	r22, r14
    2548:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	40 f0       	brcs	.+16     	; 0x2562 <__gtsf2+0x56>
    2552:	89 89       	ldd	r24, Y+17	; 0x11
    2554:	82 30       	cpi	r24, 0x02	; 2
    2556:	28 f0       	brcs	.+10     	; 0x2562 <__gtsf2+0x56>
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	0e 94 9f 14 	call	0x293e	; 0x293e <__fpcmp_parts_f>
    2560:	01 c0       	rjmp	.+2      	; 0x2564 <__gtsf2+0x58>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	68 96       	adiw	r28, 0x18	; 24
    2566:	e6 e0       	ldi	r30, 0x06	; 6
    2568:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000256c <__gesf2>:
    256c:	a8 e1       	ldi	r26, 0x18	; 24
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ec eb       	ldi	r30, 0xBC	; 188
    2572:	f2 e1       	ldi	r31, 0x12	; 18
    2574:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
    2578:	69 83       	std	Y+1, r22	; 0x01
    257a:	7a 83       	std	Y+2, r23	; 0x02
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	2d 83       	std	Y+5, r18	; 0x05
    2582:	3e 83       	std	Y+6, r19	; 0x06
    2584:	4f 83       	std	Y+7, r20	; 0x07
    2586:	58 87       	std	Y+8, r21	; 0x08
    2588:	8e 01       	movw	r16, r28
    258a:	07 5f       	subi	r16, 0xF7	; 247
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	ce 01       	movw	r24, r28
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	b8 01       	movw	r22, r16
    2594:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    2598:	81 e1       	ldi	r24, 0x11	; 17
    259a:	e8 2e       	mov	r14, r24
    259c:	f1 2c       	mov	r15, r1
    259e:	ec 0e       	add	r14, r28
    25a0:	fd 1e       	adc	r15, r29
    25a2:	ce 01       	movw	r24, r28
    25a4:	05 96       	adiw	r24, 0x05	; 5
    25a6:	b7 01       	movw	r22, r14
    25a8:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	40 f0       	brcs	.+16     	; 0x25c2 <__gesf2+0x56>
    25b2:	89 89       	ldd	r24, Y+17	; 0x11
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	28 f0       	brcs	.+10     	; 0x25c2 <__gesf2+0x56>
    25b8:	c8 01       	movw	r24, r16
    25ba:	b7 01       	movw	r22, r14
    25bc:	0e 94 9f 14 	call	0x293e	; 0x293e <__fpcmp_parts_f>
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <__gesf2+0x58>
    25c2:	8f ef       	ldi	r24, 0xFF	; 255
    25c4:	68 96       	adiw	r28, 0x18	; 24
    25c6:	e6 e0       	ldi	r30, 0x06	; 6
    25c8:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

000025cc <__ltsf2>:
    25cc:	a8 e1       	ldi	r26, 0x18	; 24
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ec ee       	ldi	r30, 0xEC	; 236
    25d2:	f2 e1       	ldi	r31, 0x12	; 18
    25d4:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
    25d8:	69 83       	std	Y+1, r22	; 0x01
    25da:	7a 83       	std	Y+2, r23	; 0x02
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	2d 83       	std	Y+5, r18	; 0x05
    25e2:	3e 83       	std	Y+6, r19	; 0x06
    25e4:	4f 83       	std	Y+7, r20	; 0x07
    25e6:	58 87       	std	Y+8, r21	; 0x08
    25e8:	8e 01       	movw	r16, r28
    25ea:	07 5f       	subi	r16, 0xF7	; 247
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	ce 01       	movw	r24, r28
    25f0:	01 96       	adiw	r24, 0x01	; 1
    25f2:	b8 01       	movw	r22, r16
    25f4:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    25f8:	81 e1       	ldi	r24, 0x11	; 17
    25fa:	e8 2e       	mov	r14, r24
    25fc:	f1 2c       	mov	r15, r1
    25fe:	ec 0e       	add	r14, r28
    2600:	fd 1e       	adc	r15, r29
    2602:	ce 01       	movw	r24, r28
    2604:	05 96       	adiw	r24, 0x05	; 5
    2606:	b7 01       	movw	r22, r14
    2608:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	82 30       	cpi	r24, 0x02	; 2
    2610:	40 f0       	brcs	.+16     	; 0x2622 <__ltsf2+0x56>
    2612:	89 89       	ldd	r24, Y+17	; 0x11
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	28 f0       	brcs	.+10     	; 0x2622 <__ltsf2+0x56>
    2618:	c8 01       	movw	r24, r16
    261a:	b7 01       	movw	r22, r14
    261c:	0e 94 9f 14 	call	0x293e	; 0x293e <__fpcmp_parts_f>
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <__ltsf2+0x58>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	68 96       	adiw	r28, 0x18	; 24
    2626:	e6 e0       	ldi	r30, 0x06	; 6
    2628:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000262c <__fixsfsi>:
    262c:	ac e0       	ldi	r26, 0x0C	; 12
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	ec e1       	ldi	r30, 0x1C	; 28
    2632:	f3 e1       	ldi	r31, 0x13	; 19
    2634:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x20>
    2638:	69 83       	std	Y+1, r22	; 0x01
    263a:	7a 83       	std	Y+2, r23	; 0x02
    263c:	8b 83       	std	Y+3, r24	; 0x03
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	ce 01       	movw	r24, r28
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	be 01       	movw	r22, r28
    2646:	6b 5f       	subi	r22, 0xFB	; 251
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	0e 94 36 14 	call	0x286c	; 0x286c <__unpack_f>
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	81 f1       	breq	.+96     	; 0x26b4 <__fixsfsi+0x88>
    2654:	82 30       	cpi	r24, 0x02	; 2
    2656:	70 f1       	brcs	.+92     	; 0x26b4 <__fixsfsi+0x88>
    2658:	84 30       	cpi	r24, 0x04	; 4
    265a:	21 f4       	brne	.+8      	; 0x2664 <__fixsfsi+0x38>
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	88 23       	and	r24, r24
    2660:	69 f1       	breq	.+90     	; 0x26bc <__fixsfsi+0x90>
    2662:	0a c0       	rjmp	.+20     	; 0x2678 <__fixsfsi+0x4c>
    2664:	2f 81       	ldd	r18, Y+7	; 0x07
    2666:	38 85       	ldd	r19, Y+8	; 0x08
    2668:	37 fd       	sbrc	r19, 7
    266a:	24 c0       	rjmp	.+72     	; 0x26b4 <__fixsfsi+0x88>
    266c:	6e 81       	ldd	r22, Y+6	; 0x06
    266e:	2f 31       	cpi	r18, 0x1F	; 31
    2670:	31 05       	cpc	r19, r1
    2672:	3c f0       	brlt	.+14     	; 0x2682 <__fixsfsi+0x56>
    2674:	66 23       	and	r22, r22
    2676:	11 f1       	breq	.+68     	; 0x26bc <__fixsfsi+0x90>
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e8       	ldi	r21, 0x80	; 128
    2680:	21 c0       	rjmp	.+66     	; 0x26c4 <__fixsfsi+0x98>
    2682:	8e e1       	ldi	r24, 0x1E	; 30
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	82 1b       	sub	r24, r18
    2688:	93 0b       	sbc	r25, r19
    268a:	29 85       	ldd	r18, Y+9	; 0x09
    268c:	3a 85       	ldd	r19, Y+10	; 0x0a
    268e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2690:	5c 85       	ldd	r21, Y+12	; 0x0c
    2692:	04 c0       	rjmp	.+8      	; 0x269c <__fixsfsi+0x70>
    2694:	56 95       	lsr	r21
    2696:	47 95       	ror	r20
    2698:	37 95       	ror	r19
    269a:	27 95       	ror	r18
    269c:	8a 95       	dec	r24
    269e:	d2 f7       	brpl	.-12     	; 0x2694 <__fixsfsi+0x68>
    26a0:	66 23       	and	r22, r22
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <__fixsfsi+0x98>
    26a4:	50 95       	com	r21
    26a6:	40 95       	com	r20
    26a8:	30 95       	com	r19
    26aa:	21 95       	neg	r18
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	4f 4f       	sbci	r20, 0xFF	; 255
    26b0:	5f 4f       	sbci	r21, 0xFF	; 255
    26b2:	08 c0       	rjmp	.+16     	; 0x26c4 <__fixsfsi+0x98>
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	a9 01       	movw	r20, r18
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <__fixsfsi+0x98>
    26bc:	2f ef       	ldi	r18, 0xFF	; 255
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f ef       	ldi	r20, 0xFF	; 255
    26c2:	5f e7       	ldi	r21, 0x7F	; 127
    26c4:	b9 01       	movw	r22, r18
    26c6:	ca 01       	movw	r24, r20
    26c8:	2c 96       	adiw	r28, 0x0c	; 12
    26ca:	e2 e0       	ldi	r30, 0x02	; 2
    26cc:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x20>

000026d0 <__pack_f>:
    26d0:	ef 92       	push	r14
    26d2:	ff 92       	push	r15
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	fc 01       	movw	r30, r24
    26de:	24 81       	ldd	r18, Z+4	; 0x04
    26e0:	35 81       	ldd	r19, Z+5	; 0x05
    26e2:	46 81       	ldd	r20, Z+6	; 0x06
    26e4:	57 81       	ldd	r21, Z+7	; 0x07
    26e6:	61 81       	ldd	r22, Z+1	; 0x01
    26e8:	80 81       	ld	r24, Z
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	20 f4       	brcc	.+8      	; 0x26f6 <__pack_f+0x26>
    26ee:	40 61       	ori	r20, 0x10	; 16
    26f0:	ef ef       	ldi	r30, 0xFF	; 255
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	a3 c0       	rjmp	.+326    	; 0x283c <__pack_f+0x16c>
    26f6:	84 30       	cpi	r24, 0x04	; 4
    26f8:	09 f4       	brne	.+2      	; 0x26fc <__pack_f+0x2c>
    26fa:	9b c0       	rjmp	.+310    	; 0x2832 <__pack_f+0x162>
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	09 f4       	brne	.+2      	; 0x2702 <__pack_f+0x32>
    2700:	92 c0       	rjmp	.+292    	; 0x2826 <__pack_f+0x156>
    2702:	21 15       	cp	r18, r1
    2704:	31 05       	cpc	r19, r1
    2706:	41 05       	cpc	r20, r1
    2708:	51 05       	cpc	r21, r1
    270a:	09 f4       	brne	.+2      	; 0x270e <__pack_f+0x3e>
    270c:	8f c0       	rjmp	.+286    	; 0x282c <__pack_f+0x15c>
    270e:	02 80       	ldd	r0, Z+2	; 0x02
    2710:	f3 81       	ldd	r31, Z+3	; 0x03
    2712:	e0 2d       	mov	r30, r0
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	e2 38       	cpi	r30, 0x82	; 130
    2718:	f8 07       	cpc	r31, r24
    271a:	0c f0       	brlt	.+2      	; 0x271e <__pack_f+0x4e>
    271c:	5a c0       	rjmp	.+180    	; 0x27d2 <__pack_f+0x102>
    271e:	c2 e8       	ldi	r28, 0x82	; 130
    2720:	df ef       	ldi	r29, 0xFF	; 255
    2722:	ce 1b       	sub	r28, r30
    2724:	df 0b       	sbc	r29, r31
    2726:	ca 31       	cpi	r28, 0x1A	; 26
    2728:	d1 05       	cpc	r29, r1
    272a:	6c f5       	brge	.+90     	; 0x2786 <__pack_f+0xb6>
    272c:	79 01       	movw	r14, r18
    272e:	8a 01       	movw	r16, r20
    2730:	0c 2e       	mov	r0, r28
    2732:	04 c0       	rjmp	.+8      	; 0x273c <__pack_f+0x6c>
    2734:	16 95       	lsr	r17
    2736:	07 95       	ror	r16
    2738:	f7 94       	ror	r15
    273a:	e7 94       	ror	r14
    273c:	0a 94       	dec	r0
    273e:	d2 f7       	brpl	.-12     	; 0x2734 <__pack_f+0x64>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e0       	ldi	r26, 0x00	; 0
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	0c 2e       	mov	r0, r28
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <__pack_f+0x84>
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	0a 94       	dec	r0
    2756:	d2 f7       	brpl	.-12     	; 0x274c <__pack_f+0x7c>
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	a1 09       	sbc	r26, r1
    275c:	b1 09       	sbc	r27, r1
    275e:	82 23       	and	r24, r18
    2760:	93 23       	and	r25, r19
    2762:	a4 23       	and	r26, r20
    2764:	b5 23       	and	r27, r21
    2766:	21 e0       	ldi	r18, 0x01	; 1
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	a1 05       	cpc	r26, r1
    2772:	b1 05       	cpc	r27, r1
    2774:	19 f4       	brne	.+6      	; 0x277c <__pack_f+0xac>
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	a9 01       	movw	r20, r18
    277c:	2e 29       	or	r18, r14
    277e:	3f 29       	or	r19, r15
    2780:	40 2b       	or	r20, r16
    2782:	51 2b       	or	r21, r17
    2784:	03 c0       	rjmp	.+6      	; 0x278c <__pack_f+0xbc>
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	a9 01       	movw	r20, r18
    278c:	da 01       	movw	r26, r20
    278e:	c9 01       	movw	r24, r18
    2790:	8f 77       	andi	r24, 0x7F	; 127
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	a0 70       	andi	r26, 0x00	; 0
    2796:	b0 70       	andi	r27, 0x00	; 0
    2798:	80 34       	cpi	r24, 0x40	; 64
    279a:	91 05       	cpc	r25, r1
    279c:	a1 05       	cpc	r26, r1
    279e:	b1 05       	cpc	r27, r1
    27a0:	39 f4       	brne	.+14     	; 0x27b0 <__pack_f+0xe0>
    27a2:	27 ff       	sbrs	r18, 7
    27a4:	09 c0       	rjmp	.+18     	; 0x27b8 <__pack_f+0xe8>
    27a6:	20 5c       	subi	r18, 0xC0	; 192
    27a8:	3f 4f       	sbci	r19, 0xFF	; 255
    27aa:	4f 4f       	sbci	r20, 0xFF	; 255
    27ac:	5f 4f       	sbci	r21, 0xFF	; 255
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <__pack_f+0xe8>
    27b0:	21 5c       	subi	r18, 0xC1	; 193
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	4f 4f       	sbci	r20, 0xFF	; 255
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255
    27b8:	e1 e0       	ldi	r30, 0x01	; 1
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	20 30       	cpi	r18, 0x00	; 0
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	38 07       	cpc	r19, r24
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	48 07       	cpc	r20, r24
    27c6:	80 e4       	ldi	r24, 0x40	; 64
    27c8:	58 07       	cpc	r21, r24
    27ca:	28 f5       	brcc	.+74     	; 0x2816 <__pack_f+0x146>
    27cc:	e0 e0       	ldi	r30, 0x00	; 0
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	22 c0       	rjmp	.+68     	; 0x2816 <__pack_f+0x146>
    27d2:	e0 38       	cpi	r30, 0x80	; 128
    27d4:	f1 05       	cpc	r31, r1
    27d6:	6c f5       	brge	.+90     	; 0x2832 <__pack_f+0x162>
    27d8:	e1 58       	subi	r30, 0x81	; 129
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	da 01       	movw	r26, r20
    27de:	c9 01       	movw	r24, r18
    27e0:	8f 77       	andi	r24, 0x7F	; 127
    27e2:	90 70       	andi	r25, 0x00	; 0
    27e4:	a0 70       	andi	r26, 0x00	; 0
    27e6:	b0 70       	andi	r27, 0x00	; 0
    27e8:	80 34       	cpi	r24, 0x40	; 64
    27ea:	91 05       	cpc	r25, r1
    27ec:	a1 05       	cpc	r26, r1
    27ee:	b1 05       	cpc	r27, r1
    27f0:	39 f4       	brne	.+14     	; 0x2800 <__pack_f+0x130>
    27f2:	27 ff       	sbrs	r18, 7
    27f4:	09 c0       	rjmp	.+18     	; 0x2808 <__pack_f+0x138>
    27f6:	20 5c       	subi	r18, 0xC0	; 192
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	4f 4f       	sbci	r20, 0xFF	; 255
    27fc:	5f 4f       	sbci	r21, 0xFF	; 255
    27fe:	04 c0       	rjmp	.+8      	; 0x2808 <__pack_f+0x138>
    2800:	21 5c       	subi	r18, 0xC1	; 193
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	4f 4f       	sbci	r20, 0xFF	; 255
    2806:	5f 4f       	sbci	r21, 0xFF	; 255
    2808:	57 ff       	sbrs	r21, 7
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <__pack_f+0x146>
    280c:	56 95       	lsr	r21
    280e:	47 95       	ror	r20
    2810:	37 95       	ror	r19
    2812:	27 95       	ror	r18
    2814:	31 96       	adiw	r30, 0x01	; 1
    2816:	87 e0       	ldi	r24, 0x07	; 7
    2818:	56 95       	lsr	r21
    281a:	47 95       	ror	r20
    281c:	37 95       	ror	r19
    281e:	27 95       	ror	r18
    2820:	8a 95       	dec	r24
    2822:	d1 f7       	brne	.-12     	; 0x2818 <__pack_f+0x148>
    2824:	0b c0       	rjmp	.+22     	; 0x283c <__pack_f+0x16c>
    2826:	e0 e0       	ldi	r30, 0x00	; 0
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <__pack_f+0x166>
    282c:	e0 e0       	ldi	r30, 0x00	; 0
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	05 c0       	rjmp	.+10     	; 0x283c <__pack_f+0x16c>
    2832:	ef ef       	ldi	r30, 0xFF	; 255
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	a9 01       	movw	r20, r18
    283c:	8e 2f       	mov	r24, r30
    283e:	87 95       	ror	r24
    2840:	88 27       	eor	r24, r24
    2842:	87 95       	ror	r24
    2844:	94 2f       	mov	r25, r20
    2846:	9f 77       	andi	r25, 0x7F	; 127
    2848:	67 95       	ror	r22
    284a:	66 27       	eor	r22, r22
    284c:	67 95       	ror	r22
    284e:	e6 95       	lsr	r30
    2850:	e2 2e       	mov	r14, r18
    2852:	a9 2f       	mov	r26, r25
    2854:	a8 2b       	or	r26, r24
    2856:	fe 2f       	mov	r31, r30
    2858:	f6 2b       	or	r31, r22
    285a:	62 2f       	mov	r22, r18
    285c:	73 2f       	mov	r23, r19
    285e:	8a 2f       	mov	r24, r26
    2860:	9f 2f       	mov	r25, r31
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	e6 e0       	ldi	r30, 0x06	; 6
    2868:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000286c <__unpack_f>:
    286c:	dc 01       	movw	r26, r24
    286e:	fb 01       	movw	r30, r22
    2870:	2c 91       	ld	r18, X
    2872:	11 96       	adiw	r26, 0x01	; 1
    2874:	3c 91       	ld	r19, X
    2876:	11 97       	sbiw	r26, 0x01	; 1
    2878:	12 96       	adiw	r26, 0x02	; 2
    287a:	8c 91       	ld	r24, X
    287c:	12 97       	sbiw	r26, 0x02	; 2
    287e:	48 2f       	mov	r20, r24
    2880:	4f 77       	andi	r20, 0x7F	; 127
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	98 2f       	mov	r25, r24
    2886:	99 1f       	adc	r25, r25
    2888:	99 27       	eor	r25, r25
    288a:	99 1f       	adc	r25, r25
    288c:	13 96       	adiw	r26, 0x03	; 3
    288e:	6c 91       	ld	r22, X
    2890:	13 97       	sbiw	r26, 0x03	; 3
    2892:	86 2f       	mov	r24, r22
    2894:	88 0f       	add	r24, r24
    2896:	89 2b       	or	r24, r25
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	66 1f       	adc	r22, r22
    289c:	66 27       	eor	r22, r22
    289e:	66 1f       	adc	r22, r22
    28a0:	61 83       	std	Z+1, r22	; 0x01
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	39 f5       	brne	.+78     	; 0x28f4 <__unpack_f+0x88>
    28a6:	21 15       	cp	r18, r1
    28a8:	31 05       	cpc	r19, r1
    28aa:	41 05       	cpc	r20, r1
    28ac:	51 05       	cpc	r21, r1
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <__unpack_f+0x48>
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	29 c0       	rjmp	.+82     	; 0x2906 <__unpack_f+0x9a>
    28b4:	82 e8       	ldi	r24, 0x82	; 130
    28b6:	9f ef       	ldi	r25, 0xFF	; 255
    28b8:	93 83       	std	Z+3, r25	; 0x03
    28ba:	82 83       	std	Z+2, r24	; 0x02
    28bc:	67 e0       	ldi	r22, 0x07	; 7
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	44 1f       	adc	r20, r20
    28c4:	55 1f       	adc	r21, r21
    28c6:	6a 95       	dec	r22
    28c8:	d1 f7       	brne	.-12     	; 0x28be <__unpack_f+0x52>
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	80 83       	st	Z, r24
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <__unpack_f+0x76>
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	44 1f       	adc	r20, r20
    28d6:	55 1f       	adc	r21, r21
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	93 83       	std	Z+3, r25	; 0x03
    28e0:	82 83       	std	Z+2, r24	; 0x02
    28e2:	20 30       	cpi	r18, 0x00	; 0
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	38 07       	cpc	r19, r24
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	48 07       	cpc	r20, r24
    28ec:	80 e4       	ldi	r24, 0x40	; 64
    28ee:	58 07       	cpc	r21, r24
    28f0:	78 f3       	brcs	.-34     	; 0x28d0 <__unpack_f+0x64>
    28f2:	20 c0       	rjmp	.+64     	; 0x2934 <__unpack_f+0xc8>
    28f4:	8f 3f       	cpi	r24, 0xFF	; 255
    28f6:	91 05       	cpc	r25, r1
    28f8:	79 f4       	brne	.+30     	; 0x2918 <__unpack_f+0xac>
    28fa:	21 15       	cp	r18, r1
    28fc:	31 05       	cpc	r19, r1
    28fe:	41 05       	cpc	r20, r1
    2900:	51 05       	cpc	r21, r1
    2902:	19 f4       	brne	.+6      	; 0x290a <__unpack_f+0x9e>
    2904:	84 e0       	ldi	r24, 0x04	; 4
    2906:	80 83       	st	Z, r24
    2908:	08 95       	ret
    290a:	44 ff       	sbrs	r20, 4
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <__unpack_f+0xa8>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 83       	st	Z, r24
    2912:	10 c0       	rjmp	.+32     	; 0x2934 <__unpack_f+0xc8>
    2914:	10 82       	st	Z, r1
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <__unpack_f+0xc8>
    2918:	8f 57       	subi	r24, 0x7F	; 127
    291a:	90 40       	sbci	r25, 0x00	; 0
    291c:	93 83       	std	Z+3, r25	; 0x03
    291e:	82 83       	std	Z+2, r24	; 0x02
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	80 83       	st	Z, r24
    2924:	87 e0       	ldi	r24, 0x07	; 7
    2926:	22 0f       	add	r18, r18
    2928:	33 1f       	adc	r19, r19
    292a:	44 1f       	adc	r20, r20
    292c:	55 1f       	adc	r21, r21
    292e:	8a 95       	dec	r24
    2930:	d1 f7       	brne	.-12     	; 0x2926 <__unpack_f+0xba>
    2932:	50 64       	ori	r21, 0x40	; 64
    2934:	24 83       	std	Z+4, r18	; 0x04
    2936:	35 83       	std	Z+5, r19	; 0x05
    2938:	46 83       	std	Z+6, r20	; 0x06
    293a:	57 83       	std	Z+7, r21	; 0x07
    293c:	08 95       	ret

0000293e <__fpcmp_parts_f>:
    293e:	fc 01       	movw	r30, r24
    2940:	db 01       	movw	r26, r22
    2942:	90 81       	ld	r25, Z
    2944:	92 30       	cpi	r25, 0x02	; 2
    2946:	08 f4       	brcc	.+2      	; 0x294a <__fpcmp_parts_f+0xc>
    2948:	49 c0       	rjmp	.+146    	; 0x29dc <__fpcmp_parts_f+0x9e>
    294a:	8c 91       	ld	r24, X
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	08 f4       	brcc	.+2      	; 0x2952 <__fpcmp_parts_f+0x14>
    2950:	45 c0       	rjmp	.+138    	; 0x29dc <__fpcmp_parts_f+0x9e>
    2952:	94 30       	cpi	r25, 0x04	; 4
    2954:	51 f4       	brne	.+20     	; 0x296a <__fpcmp_parts_f+0x2c>
    2956:	61 81       	ldd	r22, Z+1	; 0x01
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	b1 f5       	brne	.+108    	; 0x29c8 <__fpcmp_parts_f+0x8a>
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	2c 91       	ld	r18, X
    2960:	11 97       	sbiw	r26, 0x01	; 1
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	26 1b       	sub	r18, r22
    2966:	31 09       	sbc	r19, r1
    2968:	41 c0       	rjmp	.+130    	; 0x29ec <__fpcmp_parts_f+0xae>
    296a:	84 30       	cpi	r24, 0x04	; 4
    296c:	21 f0       	breq	.+8      	; 0x2976 <__fpcmp_parts_f+0x38>
    296e:	92 30       	cpi	r25, 0x02	; 2
    2970:	41 f4       	brne	.+16     	; 0x2982 <__fpcmp_parts_f+0x44>
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	b1 f1       	breq	.+108    	; 0x29e2 <__fpcmp_parts_f+0xa4>
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	8c 91       	ld	r24, X
    297a:	11 97       	sbiw	r26, 0x01	; 1
    297c:	88 23       	and	r24, r24
    297e:	a1 f1       	breq	.+104    	; 0x29e8 <__fpcmp_parts_f+0xaa>
    2980:	2d c0       	rjmp	.+90     	; 0x29dc <__fpcmp_parts_f+0x9e>
    2982:	61 81       	ldd	r22, Z+1	; 0x01
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	01 f1       	breq	.+64     	; 0x29c8 <__fpcmp_parts_f+0x8a>
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	8c 91       	ld	r24, X
    298c:	11 97       	sbiw	r26, 0x01	; 1
    298e:	68 17       	cp	r22, r24
    2990:	d9 f4       	brne	.+54     	; 0x29c8 <__fpcmp_parts_f+0x8a>
    2992:	22 81       	ldd	r18, Z+2	; 0x02
    2994:	33 81       	ldd	r19, Z+3	; 0x03
    2996:	12 96       	adiw	r26, 0x02	; 2
    2998:	8d 91       	ld	r24, X+
    299a:	9c 91       	ld	r25, X
    299c:	13 97       	sbiw	r26, 0x03	; 3
    299e:	82 17       	cp	r24, r18
    29a0:	93 07       	cpc	r25, r19
    29a2:	94 f0       	brlt	.+36     	; 0x29c8 <__fpcmp_parts_f+0x8a>
    29a4:	28 17       	cp	r18, r24
    29a6:	39 07       	cpc	r19, r25
    29a8:	bc f0       	brlt	.+46     	; 0x29d8 <__fpcmp_parts_f+0x9a>
    29aa:	24 81       	ldd	r18, Z+4	; 0x04
    29ac:	35 81       	ldd	r19, Z+5	; 0x05
    29ae:	46 81       	ldd	r20, Z+6	; 0x06
    29b0:	57 81       	ldd	r21, Z+7	; 0x07
    29b2:	14 96       	adiw	r26, 0x04	; 4
    29b4:	8d 91       	ld	r24, X+
    29b6:	9d 91       	ld	r25, X+
    29b8:	0d 90       	ld	r0, X+
    29ba:	bc 91       	ld	r27, X
    29bc:	a0 2d       	mov	r26, r0
    29be:	82 17       	cp	r24, r18
    29c0:	93 07       	cpc	r25, r19
    29c2:	a4 07       	cpc	r26, r20
    29c4:	b5 07       	cpc	r27, r21
    29c6:	18 f4       	brcc	.+6      	; 0x29ce <__fpcmp_parts_f+0x90>
    29c8:	66 23       	and	r22, r22
    29ca:	41 f0       	breq	.+16     	; 0x29dc <__fpcmp_parts_f+0x9e>
    29cc:	0d c0       	rjmp	.+26     	; 0x29e8 <__fpcmp_parts_f+0xaa>
    29ce:	28 17       	cp	r18, r24
    29d0:	39 07       	cpc	r19, r25
    29d2:	4a 07       	cpc	r20, r26
    29d4:	5b 07       	cpc	r21, r27
    29d6:	28 f4       	brcc	.+10     	; 0x29e2 <__fpcmp_parts_f+0xa4>
    29d8:	66 23       	and	r22, r22
    29da:	31 f0       	breq	.+12     	; 0x29e8 <__fpcmp_parts_f+0xaa>
    29dc:	21 e0       	ldi	r18, 0x01	; 1
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	05 c0       	rjmp	.+10     	; 0x29ec <__fpcmp_parts_f+0xae>
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <__fpcmp_parts_f+0xae>
    29e8:	2f ef       	ldi	r18, 0xFF	; 255
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	c9 01       	movw	r24, r18
    29ee:	08 95       	ret

000029f0 <__divmodhi4>:
    29f0:	97 fb       	bst	r25, 7
    29f2:	09 2e       	mov	r0, r25
    29f4:	07 26       	eor	r0, r23
    29f6:	0a d0       	rcall	.+20     	; 0x2a0c <__divmodhi4_neg1>
    29f8:	77 fd       	sbrc	r23, 7
    29fa:	04 d0       	rcall	.+8      	; 0x2a04 <__divmodhi4_neg2>
    29fc:	0c d0       	rcall	.+24     	; 0x2a16 <__udivmodhi4>
    29fe:	06 d0       	rcall	.+12     	; 0x2a0c <__divmodhi4_neg1>
    2a00:	00 20       	and	r0, r0
    2a02:	1a f4       	brpl	.+6      	; 0x2a0a <__divmodhi4_exit>

00002a04 <__divmodhi4_neg2>:
    2a04:	70 95       	com	r23
    2a06:	61 95       	neg	r22
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255

00002a0a <__divmodhi4_exit>:
    2a0a:	08 95       	ret

00002a0c <__divmodhi4_neg1>:
    2a0c:	f6 f7       	brtc	.-4      	; 0x2a0a <__divmodhi4_exit>
    2a0e:	90 95       	com	r25
    2a10:	81 95       	neg	r24
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	08 95       	ret

00002a16 <__udivmodhi4>:
    2a16:	aa 1b       	sub	r26, r26
    2a18:	bb 1b       	sub	r27, r27
    2a1a:	51 e1       	ldi	r21, 0x11	; 17
    2a1c:	07 c0       	rjmp	.+14     	; 0x2a2c <__udivmodhi4_ep>

00002a1e <__udivmodhi4_loop>:
    2a1e:	aa 1f       	adc	r26, r26
    2a20:	bb 1f       	adc	r27, r27
    2a22:	a6 17       	cp	r26, r22
    2a24:	b7 07       	cpc	r27, r23
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <__udivmodhi4_ep>
    2a28:	a6 1b       	sub	r26, r22
    2a2a:	b7 0b       	sbc	r27, r23

00002a2c <__udivmodhi4_ep>:
    2a2c:	88 1f       	adc	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	5a 95       	dec	r21
    2a32:	a9 f7       	brne	.-22     	; 0x2a1e <__udivmodhi4_loop>
    2a34:	80 95       	com	r24
    2a36:	90 95       	com	r25
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	08 95       	ret

00002a3e <__prologue_saves__>:
    2a3e:	2f 92       	push	r2
    2a40:	3f 92       	push	r3
    2a42:	4f 92       	push	r4
    2a44:	5f 92       	push	r5
    2a46:	6f 92       	push	r6
    2a48:	7f 92       	push	r7
    2a4a:	8f 92       	push	r8
    2a4c:	9f 92       	push	r9
    2a4e:	af 92       	push	r10
    2a50:	bf 92       	push	r11
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	ca 1b       	sub	r28, r26
    2a68:	db 0b       	sbc	r29, r27
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	09 94       	ijmp

00002a76 <__epilogue_restores__>:
    2a76:	2a 88       	ldd	r2, Y+18	; 0x12
    2a78:	39 88       	ldd	r3, Y+17	; 0x11
    2a7a:	48 88       	ldd	r4, Y+16	; 0x10
    2a7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a88:	b9 84       	ldd	r11, Y+9	; 0x09
    2a8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a8c:	df 80       	ldd	r13, Y+7	; 0x07
    2a8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a90:	fd 80       	ldd	r15, Y+5	; 0x05
    2a92:	0c 81       	ldd	r16, Y+4	; 0x04
    2a94:	1b 81       	ldd	r17, Y+3	; 0x03
    2a96:	aa 81       	ldd	r26, Y+2	; 0x02
    2a98:	b9 81       	ldd	r27, Y+1	; 0x01
    2a9a:	ce 0f       	add	r28, r30
    2a9c:	d1 1d       	adc	r29, r1
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	ed 01       	movw	r28, r26
    2aaa:	08 95       	ret

00002aac <itoa>:
    2aac:	fb 01       	movw	r30, r22
    2aae:	9f 01       	movw	r18, r30
    2ab0:	e8 94       	clt
    2ab2:	42 30       	cpi	r20, 0x02	; 2
    2ab4:	c4 f0       	brlt	.+48     	; 0x2ae6 <itoa+0x3a>
    2ab6:	45 32       	cpi	r20, 0x25	; 37
    2ab8:	b4 f4       	brge	.+44     	; 0x2ae6 <itoa+0x3a>
    2aba:	4a 30       	cpi	r20, 0x0A	; 10
    2abc:	29 f4       	brne	.+10     	; 0x2ac8 <itoa+0x1c>
    2abe:	97 fb       	bst	r25, 7
    2ac0:	1e f4       	brtc	.+6      	; 0x2ac8 <itoa+0x1c>
    2ac2:	90 95       	com	r25
    2ac4:	81 95       	neg	r24
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	64 2f       	mov	r22, r20
    2aca:	77 27       	eor	r23, r23
    2acc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__udivmodhi4>
    2ad0:	80 5d       	subi	r24, 0xD0	; 208
    2ad2:	8a 33       	cpi	r24, 0x3A	; 58
    2ad4:	0c f0       	brlt	.+2      	; 0x2ad8 <itoa+0x2c>
    2ad6:	89 5d       	subi	r24, 0xD9	; 217
    2ad8:	81 93       	st	Z+, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	a1 f7       	brne	.-24     	; 0x2ac8 <itoa+0x1c>
    2ae0:	16 f4       	brtc	.+4      	; 0x2ae6 <itoa+0x3a>
    2ae2:	5d e2       	ldi	r21, 0x2D	; 45
    2ae4:	51 93       	st	Z+, r21
    2ae6:	10 82       	st	Z, r1
    2ae8:	c9 01       	movw	r24, r18
    2aea:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <strrev>

00002aee <ltoa>:
    2aee:	fa 01       	movw	r30, r20
    2af0:	cf 93       	push	r28
    2af2:	ff 93       	push	r31
    2af4:	ef 93       	push	r30
    2af6:	22 30       	cpi	r18, 0x02	; 2
    2af8:	44 f1       	brlt	.+80     	; 0x2b4a <ltoa+0x5c>
    2afa:	25 32       	cpi	r18, 0x25	; 37
    2afc:	34 f5       	brge	.+76     	; 0x2b4a <ltoa+0x5c>
    2afe:	c2 2f       	mov	r28, r18
    2b00:	e8 94       	clt
    2b02:	ca 30       	cpi	r28, 0x0A	; 10
    2b04:	49 f4       	brne	.+18     	; 0x2b18 <ltoa+0x2a>
    2b06:	97 fb       	bst	r25, 7
    2b08:	3e f4       	brtc	.+14     	; 0x2b18 <ltoa+0x2a>
    2b0a:	90 95       	com	r25
    2b0c:	80 95       	com	r24
    2b0e:	70 95       	com	r23
    2b10:	61 95       	neg	r22
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	8f 4f       	sbci	r24, 0xFF	; 255
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	2c 2f       	mov	r18, r28
    2b1a:	33 27       	eor	r19, r19
    2b1c:	44 27       	eor	r20, r20
    2b1e:	55 27       	eor	r21, r21
    2b20:	ff 93       	push	r31
    2b22:	ef 93       	push	r30
    2b24:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    2b28:	ef 91       	pop	r30
    2b2a:	ff 91       	pop	r31
    2b2c:	60 5d       	subi	r22, 0xD0	; 208
    2b2e:	6a 33       	cpi	r22, 0x3A	; 58
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <ltoa+0x46>
    2b32:	69 5d       	subi	r22, 0xD9	; 217
    2b34:	61 93       	st	Z+, r22
    2b36:	b9 01       	movw	r22, r18
    2b38:	ca 01       	movw	r24, r20
    2b3a:	60 50       	subi	r22, 0x00	; 0
    2b3c:	70 40       	sbci	r23, 0x00	; 0
    2b3e:	80 40       	sbci	r24, 0x00	; 0
    2b40:	90 40       	sbci	r25, 0x00	; 0
    2b42:	51 f7       	brne	.-44     	; 0x2b18 <ltoa+0x2a>
    2b44:	16 f4       	brtc	.+4      	; 0x2b4a <ltoa+0x5c>
    2b46:	cd e2       	ldi	r28, 0x2D	; 45
    2b48:	c1 93       	st	Z+, r28
    2b4a:	10 82       	st	Z, r1
    2b4c:	8f 91       	pop	r24
    2b4e:	9f 91       	pop	r25
    2b50:	cf 91       	pop	r28
    2b52:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <strrev>

00002b56 <ultoa>:
    2b56:	fa 01       	movw	r30, r20
    2b58:	cf 93       	push	r28
    2b5a:	ff 93       	push	r31
    2b5c:	ef 93       	push	r30
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	cc f0       	brlt	.+50     	; 0x2b94 <ultoa+0x3e>
    2b62:	25 32       	cpi	r18, 0x25	; 37
    2b64:	bc f4       	brge	.+46     	; 0x2b94 <ultoa+0x3e>
    2b66:	c2 2f       	mov	r28, r18
    2b68:	2c 2f       	mov	r18, r28
    2b6a:	33 27       	eor	r19, r19
    2b6c:	44 27       	eor	r20, r20
    2b6e:	55 27       	eor	r21, r21
    2b70:	ff 93       	push	r31
    2b72:	ef 93       	push	r30
    2b74:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    2b78:	ef 91       	pop	r30
    2b7a:	ff 91       	pop	r31
    2b7c:	60 5d       	subi	r22, 0xD0	; 208
    2b7e:	6a 33       	cpi	r22, 0x3A	; 58
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <ultoa+0x2e>
    2b82:	69 5d       	subi	r22, 0xD9	; 217
    2b84:	61 93       	st	Z+, r22
    2b86:	b9 01       	movw	r22, r18
    2b88:	ca 01       	movw	r24, r20
    2b8a:	60 50       	subi	r22, 0x00	; 0
    2b8c:	70 40       	sbci	r23, 0x00	; 0
    2b8e:	80 40       	sbci	r24, 0x00	; 0
    2b90:	90 40       	sbci	r25, 0x00	; 0
    2b92:	51 f7       	brne	.-44     	; 0x2b68 <ultoa+0x12>
    2b94:	10 82       	st	Z, r1
    2b96:	8f 91       	pop	r24
    2b98:	9f 91       	pop	r25
    2b9a:	cf 91       	pop	r28
    2b9c:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <strrev>

00002ba0 <utoa>:
    2ba0:	fb 01       	movw	r30, r22
    2ba2:	9f 01       	movw	r18, r30
    2ba4:	42 30       	cpi	r20, 0x02	; 2
    2ba6:	74 f0       	brlt	.+28     	; 0x2bc4 <utoa+0x24>
    2ba8:	45 32       	cpi	r20, 0x25	; 37
    2baa:	64 f4       	brge	.+24     	; 0x2bc4 <utoa+0x24>
    2bac:	64 2f       	mov	r22, r20
    2bae:	77 27       	eor	r23, r23
    2bb0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__udivmodhi4>
    2bb4:	80 5d       	subi	r24, 0xD0	; 208
    2bb6:	8a 33       	cpi	r24, 0x3A	; 58
    2bb8:	0c f0       	brlt	.+2      	; 0x2bbc <utoa+0x1c>
    2bba:	89 5d       	subi	r24, 0xD9	; 217
    2bbc:	81 93       	st	Z+, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	a1 f7       	brne	.-24     	; 0x2bac <utoa+0xc>
    2bc4:	10 82       	st	Z, r1
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <strrev>

00002bcc <strrev>:
    2bcc:	dc 01       	movw	r26, r24
    2bce:	fc 01       	movw	r30, r24
    2bd0:	67 2f       	mov	r22, r23
    2bd2:	71 91       	ld	r23, Z+
    2bd4:	77 23       	and	r23, r23
    2bd6:	e1 f7       	brne	.-8      	; 0x2bd0 <strrev+0x4>
    2bd8:	32 97       	sbiw	r30, 0x02	; 2
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <strrev+0x18>
    2bdc:	7c 91       	ld	r23, X
    2bde:	6d 93       	st	X+, r22
    2be0:	70 83       	st	Z, r23
    2be2:	62 91       	ld	r22, -Z
    2be4:	ae 17       	cp	r26, r30
    2be6:	bf 07       	cpc	r27, r31
    2be8:	c8 f3       	brcs	.-14     	; 0x2bdc <strrev+0x10>
    2bea:	08 95       	ret

00002bec <__udivmodsi4>:
    2bec:	a1 e2       	ldi	r26, 0x21	; 33
    2bee:	1a 2e       	mov	r1, r26
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	fd 01       	movw	r30, r26
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <__udivmodsi4_ep>

00002bf8 <__udivmodsi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	ee 1f       	adc	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	a2 17       	cp	r26, r18
    2c02:	b3 07       	cpc	r27, r19
    2c04:	e4 07       	cpc	r30, r20
    2c06:	f5 07       	cpc	r31, r21
    2c08:	20 f0       	brcs	.+8      	; 0x2c12 <__udivmodsi4_ep>
    2c0a:	a2 1b       	sub	r26, r18
    2c0c:	b3 0b       	sbc	r27, r19
    2c0e:	e4 0b       	sbc	r30, r20
    2c10:	f5 0b       	sbc	r31, r21

00002c12 <__udivmodsi4_ep>:
    2c12:	66 1f       	adc	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	1a 94       	dec	r1
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <__udivmodsi4_loop>
    2c1e:	60 95       	com	r22
    2c20:	70 95       	com	r23
    2c22:	80 95       	com	r24
    2c24:	90 95       	com	r25
    2c26:	9b 01       	movw	r18, r22
    2c28:	ac 01       	movw	r20, r24
    2c2a:	bd 01       	movw	r22, r26
    2c2c:	cf 01       	movw	r24, r30
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
