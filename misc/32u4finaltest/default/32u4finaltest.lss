
32u4finaltest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000106a  000010fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00001106  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000279  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca4  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c2  00000000  00000000  00002063  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001002  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a2  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ca2  00000000  00000000  000039da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_10>
      2c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__vector_11>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      ac:	39 04       	cpc	r3, r9
      ae:	36 04       	cpc	r3, r6
      b0:	33 04       	cpc	r3, r3
      b2:	30 04       	cpc	r3, r0
      b4:	2d 04       	cpc	r2, r13
      b6:	2a 04       	cpc	r2, r10
      b8:	27 04       	cpc	r2, r7
      ba:	24 04       	cpc	r2, r4
      bc:	21 04       	cpc	r2, r1
      be:	1e 04       	cpc	r1, r14
      c0:	1b 04       	cpc	r1, r11
      c2:	18 04       	cpc	r1, r8
      c4:	15 04       	cpc	r1, r5
      c6:	12 04       	cpc	r1, r2
      c8:	0f 04       	cpc	r0, r15
      ca:	0c 04       	cpc	r0, r12
      cc:	09 04       	cpc	r0, r9
      ce:	06 04       	cpc	r0, r6
      d0:	03 04       	cpc	r0, r3
      d2:	00 04       	cpc	r0, r0
      d4:	fd 03       	fmulsu	r23, r21
      d6:	fa 03       	fmulsu	r23, r18
      d8:	f7 03       	fmuls	r23, r23
      da:	f4 03       	fmuls	r23, r20
      dc:	f1 03       	fmuls	r23, r17
      de:	ee 03       	fmulsu	r22, r22
      e0:	eb 03       	fmulsu	r22, r19
      e2:	e8 03       	fmulsu	r22, r16
      e4:	e5 03       	fmuls	r22, r21
      e6:	e2 03       	fmuls	r22, r18
      e8:	df 03       	fmulsu	r21, r23
      ea:	dc 03       	fmulsu	r21, r20
      ec:	d9 03       	fmulsu	r21, r17
      ee:	d6 03       	fmuls	r21, r22
      f0:	d3 03       	fmuls	r21, r19
      f2:	d0 03       	fmuls	r21, r16
      f4:	cd 03       	fmulsu	r20, r21
      f6:	ca 03       	fmulsu	r20, r18
      f8:	c7 03       	fmuls	r20, r23
      fa:	c4 03       	fmuls	r20, r20
      fc:	c1 03       	fmuls	r20, r17
      fe:	be 03       	fmulsu	r19, r22
     100:	bb 03       	fmulsu	r19, r19
     102:	b8 03       	fmulsu	r19, r16
     104:	b5 03       	fmuls	r19, r21
     106:	b2 03       	fmuls	r19, r18
     108:	af 03       	fmulsu	r18, r23
     10a:	ac 03       	fmulsu	r18, r20
     10c:	a9 03       	fmulsu	r18, r17
     10e:	a6 03       	fmuls	r18, r22
     110:	a3 03       	fmuls	r18, r19
     112:	a0 03       	fmuls	r18, r16
     114:	9d 03       	fmulsu	r17, r21
     116:	9a 03       	fmulsu	r17, r18
     118:	97 03       	fmuls	r17, r23
     11a:	94 03       	fmuls	r17, r20
     11c:	91 03       	fmuls	r17, r17
     11e:	8e 03       	fmulsu	r16, r22
     120:	8b 03       	fmulsu	r16, r19
     122:	88 03       	fmulsu	r16, r16
     124:	85 03       	fmuls	r16, r21
     126:	82 03       	fmuls	r16, r18
     128:	7f 03       	fmul	r23, r23
     12a:	7c 03       	fmul	r23, r20
     12c:	79 03       	fmul	r23, r17

0000012e <descriptor_list>:
     12e:	00 01 00 00 62 01 12 00 02 00 00 74 01 43 00 03     ....b......t.C..
     13e:	00 00 b7 01 04 01 03 09 04 bb 01 12 02 03 09 04     ................
     14e:	cf 01 06 03 03 09 04 d7 01 08                       ..........

00000158 <endpoint_config_table>:
     158:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000162 <device_descriptor>:
     162:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     172:	03 01                                               ..

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <string0>:
     1b7:	04 03 09 04                                         ....

000001bb <string1>:
     1bb:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1cb:	65 00 00 00                                         e...

000001cf <string2>:
     1cf:	06 03 4d 00 32 00 00 00                             ..M.2...

000001d7 <string3>:
     1d7:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

000001e2 <__ctors_end>:
     1e2:	11 24       	eor	r1, r1
     1e4:	1f be       	out	0x3f, r1	; 63
     1e6:	cf ef       	ldi	r28, 0xFF	; 255
     1e8:	da e0       	ldi	r29, 0x0A	; 10
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
     1ee:	11 e0       	ldi	r17, 0x01	; 1
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	ea e6       	ldi	r30, 0x6A	; 106
     1f6:	f0 e1       	ldi	r31, 0x10	; 16
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <.do_copy_data_start>

000001fa <.do_copy_data_loop>:
     1fa:	05 90       	lpm	r0, Z+
     1fc:	0d 92       	st	X+, r0

000001fe <.do_copy_data_start>:
     1fe:	a8 30       	cpi	r26, 0x08	; 8
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <.do_copy_data_loop>

00000204 <__do_clear_bss>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a8 e0       	ldi	r26, 0x08	; 8
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	ac 30       	cpi	r26, 0x0C	; 12
     210:	b1 07       	cpc	r27, r17
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
     218:	0c 94 33 08 	jmp	0x1066	; 0x1066 <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <send_instruc>:
		}
	}
}

char send_instruc(char address, char inst)
{
     220:	98 2f       	mov	r25, r24

	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     222:	84 ea       	ldi	r24, 0xA4	; 164
     224:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     228:	80 91 bc 00 	lds	r24, 0x00BC
     22c:	87 ff       	sbrs	r24, 7
     22e:	fc cf       	rjmp	.-8      	; 0x228 <send_instruc+0x8>
	// ADDRESS
	TWDR = address<<1;
     230:	99 0f       	add	r25, r25
     232:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     236:	84 e8       	ldi	r24, 0x84	; 132
     238:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     23c:	80 91 bc 00 	lds	r24, 0x00BC
     240:	87 ff       	sbrs	r24, 7
     242:	fc cf       	rjmp	.-8      	; 0x23c <send_instruc+0x1c>
	if((TWSR & 0xF8) != 0x18){ // ACK was not received - may not be connected/listening
     244:	80 91 b9 00 	lds	r24, 0x00B9
     248:	88 7f       	andi	r24, 0xF8	; 248
     24a:	88 31       	cpi	r24, 0x18	; 24
     24c:	71 f4       	brne	.+28     	; 0x26a <send_instruc+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 1;
	}
	else
	{
		TWDR = inst;
     24e:	60 93 bb 00 	sts	0x00BB, r22
		TWCR = (1<<TWINT) | (1<<TWEN);
     252:	84 e8       	ldi	r24, 0x84	; 132
     254:	80 93 bc 00 	sts	0x00BC, r24

		while(!(TWCR & (1<<TWINT))){};
     258:	80 91 bc 00 	lds	r24, 0x00BC
     25c:	87 ff       	sbrs	r24, 7
     25e:	fc cf       	rjmp	.-8      	; 0x258 <send_instruc+0x38>
			if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     260:	80 91 b9 00 	lds	r24, 0x00B9
     264:	88 7f       	andi	r24, 0xF8	; 248
     266:	88 32       	cpi	r24, 0x28	; 40
     268:	29 f0       	breq	.+10     	; 0x274 <send_instruc+0x54>
			TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     26a:	84 e9       	ldi	r24, 0x94	; 148
     26c:	80 93 bc 00 	sts	0x00BC, r24
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	08 95       	ret
			return 1;
		}

		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     274:	84 e9       	ldi	r24, 0x94	; 148
     276:	80 93 bc 00 	sts	0x00BC, r24
     27a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;

}
     27c:	08 95       	ret

0000027e <set_register_val>:


char set_register_val(char address, char reg, char val)
{
     27e:	98 2f       	mov	r25, r24
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     280:	84 ea       	ldi	r24, 0xA4	; 164
     282:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     286:	80 91 bc 00 	lds	r24, 0x00BC
     28a:	87 ff       	sbrs	r24, 7
     28c:	fc cf       	rjmp	.-8      	; 0x286 <set_register_val+0x8>

	// ADDRESS
	TWDR = address<<1;
     28e:	99 0f       	add	r25, r25
     290:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     29a:	80 91 bc 00 	lds	r24, 0x00BC
     29e:	87 ff       	sbrs	r24, 7
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <set_register_val+0x1c>
	if((TWSR & 0xF8) != 0x18){ // ACK was not received - may not be connected/listening
     2a2:	80 91 b9 00 	lds	r24, 0x00B9
     2a6:	88 7f       	andi	r24, 0xF8	; 248
     2a8:	88 31       	cpi	r24, 0x18	; 24
     2aa:	e1 f4       	brne	.+56     	; 0x2e4 <set_register_val+0x66>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;
	}
	
	// send the register address
	TWDR = reg;
     2ac:	60 93 bb 00 	sts	0x00BB, r22
		
	TWCR = (1<<TWINT) | (1<<TWEN);
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     2b6:	80 91 bc 00 	lds	r24, 0x00BC
     2ba:	87 ff       	sbrs	r24, 7
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <set_register_val+0x38>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     2be:	80 91 b9 00 	lds	r24, 0x00B9
     2c2:	88 7f       	andi	r24, 0xF8	; 248
     2c4:	88 32       	cpi	r24, 0x28	; 40
     2c6:	71 f4       	brne	.+28     	; 0x2e4 <set_register_val+0x66>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;
	}
	
	TWDR = val;
     2c8:	40 93 bb 00 	sts	0x00BB, r20
	TWCR = (1<<TWINT) | (1<<TWEN);
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     2d2:	80 91 bc 00 	lds	r24, 0x00BC
     2d6:	87 ff       	sbrs	r24, 7
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <set_register_val+0x54>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     2da:	80 91 b9 00 	lds	r24, 0x00B9
     2de:	88 7f       	andi	r24, 0xF8	; 248
     2e0:	88 32       	cpi	r24, 0x28	; 40
     2e2:	29 f0       	breq	.+10     	; 0x2ee <set_register_val+0x70>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     2e4:	84 e9       	ldi	r24, 0x94	; 148
     2e6:	80 93 bc 00 	sts	0x00BC, r24
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret
		return 0;
	}
	
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     2ee:	84 e9       	ldi	r24, 0x94	; 148
     2f0:	80 93 bc 00 	sts	0x00BC, r24
     2f4:	81 e0       	ldi	r24, 0x01	; 1
	return 1;	
}
     2f6:	08 95       	ret

000002f8 <get_register_val>:

char get_register_val(char address, char reg)
{
     2f8:	98 2f       	mov	r25, r24
	char data = 0;
		
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     2fa:	84 ea       	ldi	r24, 0xA4	; 164
     2fc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     300:	80 91 bc 00 	lds	r24, 0x00BC
     304:	87 ff       	sbrs	r24, 7
     306:	fc cf       	rjmp	.-8      	; 0x300 <get_register_val+0x8>
	
	// ADDRESS
	TWDR = address<<1;
     308:	89 2f       	mov	r24, r25
     30a:	88 0f       	add	r24, r24
     30c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     310:	84 e8       	ldi	r24, 0x84	; 132
     312:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     316:	80 91 bc 00 	lds	r24, 0x00BC
     31a:	87 ff       	sbrs	r24, 7
     31c:	fc cf       	rjmp	.-8      	; 0x316 <get_register_val+0x1e>
	if((TWSR & 0xF8) != 0x18){ // ACK was not received - may not be connected/listening
     31e:	80 91 b9 00 	lds	r24, 0x00B9
     322:	88 7f       	andi	r24, 0xF8	; 248
     324:	88 31       	cpi	r24, 0x18	; 24
     326:	89 f5       	brne	.+98     	; 0x38a <get_register_val+0x92>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;
	}
	// send the register address
	TWDR = reg;
     328:	60 93 bb 00 	sts	0x00BB, r22
		
	TWCR = (1<<TWINT) | (1<<TWEN);
     32c:	84 e8       	ldi	r24, 0x84	; 132
     32e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     332:	80 91 bc 00 	lds	r24, 0x00BC
     336:	87 ff       	sbrs	r24, 7
     338:	fc cf       	rjmp	.-8      	; 0x332 <get_register_val+0x3a>
	if((TWSR & 0xF8) != 0x28){ // ACK was not received - may not be connected/listening
     33a:	80 91 b9 00 	lds	r24, 0x00B9
     33e:	88 7f       	andi	r24, 0xF8	; 248
     340:	88 32       	cpi	r24, 0x28	; 40
     342:	19 f5       	brne	.+70     	; 0x38a <get_register_val+0x92>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;
	}
	// send repeat address and enter master receiver mode
	TWCR = (1<<TWSTA) | (1<<TWINT) | (1<<TWEN);
     344:	84 ea       	ldi	r24, 0xA4	; 164
     346:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     34a:	80 91 bc 00 	lds	r24, 0x00BC
     34e:	87 ff       	sbrs	r24, 7
     350:	fc cf       	rjmp	.-8      	; 0x34a <get_register_val+0x52>
			
			
	TWDR = 	(address << 1) | 1;
     352:	99 0f       	add	r25, r25
     354:	91 60       	ori	r25, 0x01	; 1
     356:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     35a:	84 e8       	ldi	r24, 0x84	; 132
     35c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     360:	80 91 bc 00 	lds	r24, 0x00BC
     364:	87 ff       	sbrs	r24, 7
     366:	fc cf       	rjmp	.-8      	; 0x360 <get_register_val+0x68>
	if((TWSR & 0xF8) != 0x40){ // ACK was not received - may not be connected/listening
     368:	80 91 b9 00 	lds	r24, 0x00B9
     36c:	88 7f       	andi	r24, 0xF8	; 248
     36e:	80 34       	cpi	r24, 0x40	; 64
     370:	61 f4       	brne	.+24     	; 0x38a <get_register_val+0x92>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;
	}
		
	TWCR = (1<<TWINT) | (0<<TWEA) | (1<<TWEN);
     372:	84 e8       	ldi	r24, 0x84	; 132
     374:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     378:	80 91 bc 00 	lds	r24, 0x00BC
     37c:	87 ff       	sbrs	r24, 7
     37e:	fc cf       	rjmp	.-8      	; 0x378 <get_register_val+0x80>
	if((TWSR & 0xF8) != 0x58){ // ACK was not received - may not be connected/listening
     380:	80 91 b9 00 	lds	r24, 0x00B9
     384:	88 7f       	andi	r24, 0xF8	; 248
     386:	88 35       	cpi	r24, 0x58	; 88
     388:	29 f0       	breq	.+10     	; 0x394 <get_register_val+0x9c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     38a:	84 e9       	ldi	r24, 0x94	; 148
     38c:	80 93 bc 00 	sts	0x00BC, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	05 c0       	rjmp	.+10     	; 0x39e <get_register_val+0xa6>
		return 0;
	}		
		
	data = TWDR;
     394:	90 91 bb 00 	lds	r25, 0x00BB
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);	
     398:	84 e9       	ldi	r24, 0x94	; 148
     39a:	80 93 bc 00 	sts	0x00BC, r24
	return data;	
}
     39e:	89 2f       	mov	r24, r25
     3a0:	08 95       	ret

000003a2 <init>:
{
	m_usb_tx_int(a);
	m_usb_tx_push();
}*/
void init()
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	2c 97       	sbiw	r28, 0x0c	; 12
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	80 93 61 00 	sts	0x0061, r24
     3c8:	10 92 61 00 	sts	0x0061, r1
	
	// ENABLE PULLUPS
	set(PORTD,0);
     3cc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     3ce:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     3d0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     3d2:	8c e0       	ldi	r24, 0x0C	; 12
     3d4:	80 93 b8 00 	sts	0x00B8, r24
	
	char address = 0x69;
	char list[12];
	set_register_val(address, 107,0);
     3d8:	89 e6       	ldi	r24, 0x69	; 105
     3da:	6b e6       	ldi	r22, 0x6B	; 107
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	0e 94 3f 01 	call	0x27e	; 0x27e <set_register_val>
	set_register_val(address, 27, 8);
     3e2:	89 e6       	ldi	r24, 0x69	; 105
     3e4:	6b e1       	ldi	r22, 0x1B	; 27
     3e6:	48 e0       	ldi	r20, 0x08	; 8
     3e8:	0e 94 3f 01 	call	0x27e	; 0x27e <set_register_val>


	
	m_usb_init();
     3ec:	0e 94 71 02 	call	0x4e2	; 0x4e2 <m_usb_init>
	m_red(ON);
     3f0:	6e 9a       	sbi	0x0d, 6	; 13
     3f2:	76 98       	cbi	0x0e, 6	; 14
	while(!m_usb_isconnected());
     3f4:	0e 94 8a 02 	call	0x514	; 0x514 <m_usb_isconnected>
     3f8:	88 23       	and	r24, r24
     3fa:	e1 f3       	breq	.-8      	; 0x3f4 <init+0x52>
	m_green(ON);
     3fc:	6a 9a       	sbi	0x0d, 2	; 13
     3fe:	72 98       	cbi	0x0e, 2	; 14
	m_red(OFF);
     400:	6e 9a       	sbi	0x0d, 6	; 13
     402:	76 9a       	sbi	0x0e, 6	; 14
				{
					if(start+offset == 65)
					{
						offset +=2;
					}
					list[(start/2)*2 + (1-start%2)] = get_register_val(address, start + offset);
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	c9 2e       	mov	r12, r25
     408:	d1 2c       	mov	r13, r1
     40a:	cc 0e       	add	r12, r28
     40c:	dd 1e       	adc	r13, r29
	while(!m_usb_isconnected());
	m_green(ON);
	m_red(OFF);
	while(1)
	{
		if(m_usb_rx_available())
     40e:	0e 94 a9 02 	call	0x552	; 0x552 <m_usb_rx_available>
     412:	88 23       	and	r24, r24
     414:	e1 f3       	breq	.-8      	; 0x40e <init+0x6c>
		{

			char val = m_usb_rx_char();
     416:	0e 94 8d 02 	call	0x51a	; 0x51a <m_usb_rx_char>
     41a:	18 2f       	mov	r17, r24
			if(val == 5)
     41c:	85 30       	cpi	r24, 0x05	; 5
     41e:	09 f0       	breq	.+2      	; 0x422 <init+0x80>
     420:	4b c0       	rjmp	.+150    	; 0x4b8 <init+0x116>
     422:	8b e3       	ldi	r24, 0x3B	; 59
     424:	e8 2e       	mov	r14, r24
     426:	f1 2c       	mov	r15, r1
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	10 e0       	ldi	r17, 0x00	; 0
     42c:	18 c0       	rjmp	.+48     	; 0x45e <init+0xbc>
			{
				int offset= 59;
				int start = 0;
				for(start = 0; start+offset <= 72; start++)
				{
					if(start+offset == 65)
     42e:	81 34       	cpi	r24, 0x41	; 65
     430:	91 05       	cpc	r25, r1
     432:	21 f4       	brne	.+8      	; 0x43c <init+0x9a>
					{
						offset +=2;
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	e8 0e       	add	r14, r24
     43a:	f9 1e       	adc	r15, r25
					}
					list[(start/2)*2 + (1-start%2)] = get_register_val(address, start + offset);
     43c:	6e 2d       	mov	r22, r14
     43e:	60 0f       	add	r22, r16
     440:	89 e6       	ldi	r24, 0x69	; 105
     442:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <get_register_val>
     446:	98 01       	movw	r18, r16
     448:	21 70       	andi	r18, 0x01	; 1
     44a:	30 70       	andi	r19, 0x00	; 0
     44c:	f8 01       	movw	r30, r16
     44e:	ee 7f       	andi	r30, 0xFE	; 254
     450:	e2 1b       	sub	r30, r18
     452:	f3 0b       	sbc	r31, r19
     454:	ec 0d       	add	r30, r12
     456:	fd 1d       	adc	r31, r13
     458:	80 83       	st	Z, r24
			char val = m_usb_rx_char();
			if(val == 5)
			{
				int offset= 59;
				int start = 0;
				for(start = 0; start+offset <= 72; start++)
     45a:	0f 5f       	subi	r16, 0xFF	; 255
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	c8 01       	movw	r24, r16
     460:	8e 0d       	add	r24, r14
     462:	9f 1d       	adc	r25, r15
     464:	89 34       	cpi	r24, 0x49	; 73
     466:	91 05       	cpc	r25, r1
     468:	14 f3       	brlt	.-60     	; 0x42e <init+0x8c>
						offset +=2;
					}
					list[(start/2)*2 + (1-start%2)] = get_register_val(address, start + offset);
				
				}
				m_usb_tx_char(list[0]);
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[1]);
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[2]);
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[3]);
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[4]);
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[5]);
     488:	8e 81       	ldd	r24, Y+6	; 0x06
     48a:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[6]);
     48e:	8f 81       	ldd	r24, Y+7	; 0x07
     490:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[7]);
     494:	88 85       	ldd	r24, Y+8	; 0x08
     496:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[8]);
     49a:	89 85       	ldd	r24, Y+9	; 0x09
     49c:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[9]);
     4a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4a2:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[10]);
     4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4a8:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_char(list[11]);
     4ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     4ae:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
				m_usb_tx_push();
     4b2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <m_usb_tx_push>
     4b6:	ab cf       	rjmp	.-170    	; 0x40e <init+0x6c>

			}
			else
			{
				while(!m_usb_rx_available());
     4b8:	0e 94 a9 02 	call	0x552	; 0x552 <m_usb_rx_available>
     4bc:	88 23       	and	r24, r24
     4be:	e1 f3       	breq	.-8      	; 0x4b8 <init+0x116>
				char address = val;
				char inst = m_usb_rx_char();
     4c0:	0e 94 8d 02 	call	0x51a	; 0x51a <m_usb_rx_char>
     4c4:	68 2f       	mov	r22, r24
				if(send_instruc(address, inst))
     4c6:	81 2f       	mov	r24, r17
     4c8:	0e 94 10 01 	call	0x220	; 0x220 <send_instruc>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <init+0x130>
     4d0:	9e cf       	rjmp	.-196    	; 0x40e <init+0x6c>
				{
				}
				else
				{
					m_red(ON);
     4d2:	6e 9a       	sbi	0x0d, 6	; 13
     4d4:	76 98       	cbi	0x0e, 6	; 14
     4d6:	9b cf       	rjmp	.-202    	; 0x40e <init+0x6c>

000004d8 <main>:
void write(int);
char send_instruc(char address, char inst);

int main(void)
{
	init();
     4d8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init>

}
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     4e8:	80 ea       	ldi	r24, 0xA0	; 160
     4ea:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     4ee:	82 e1       	ldi	r24, 0x12	; 18
     4f0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     4f2:	09 b4       	in	r0, 0x29	; 41
     4f4:	00 fe       	sbrs	r0, 0
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     4f8:	80 e9       	ldi	r24, 0x90	; 144
     4fa:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     4fe:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     502:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
     506:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     510:	78 94       	sei
}
     512:	08 95       	ret

00000514 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     514:	80 91 08 01 	lds	r24, 0x0108
}
     518:	08 95       	ret

0000051a <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     51a:	2f b7       	in	r18, 0x3f	; 63
	cli();
     51c:	f8 94       	cli
	if (!usb_configuration) {
     51e:	80 91 08 01 	lds	r24, 0x0108
     522:	88 23       	and	r24, r24
     524:	39 f0       	breq	.+14     	; 0x534 <m_usb_rx_char+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     52c:	80 91 e8 00 	lds	r24, 0x00E8
     530:	85 fd       	sbrc	r24, 5
     532:	03 c0       	rjmp	.+6      	; 0x53a <m_usb_rx_char+0x20>
		// no data in buffer
		SREG = intr_state;
     534:	2f bf       	out	0x3f, r18	; 63
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	0a c0       	rjmp	.+20     	; 0x54e <m_usb_rx_char+0x34>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     53a:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     53e:	80 91 e8 00 	lds	r24, 0x00E8
     542:	85 fd       	sbrc	r24, 5
     544:	03 c0       	rjmp	.+6      	; 0x54c <m_usb_rx_char+0x32>
     546:	8b e6       	ldi	r24, 0x6B	; 107
     548:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     54c:	2f bf       	out	0x3f, r18	; 63
	return (char)c;
}
     54e:	89 2f       	mov	r24, r25
     550:	08 95       	ret

00000552 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     552:	9f b7       	in	r25, 0x3f	; 63
	cli();
     554:	f8 94       	cli
	if (usb_configuration) {
     556:	80 91 08 01 	lds	r24, 0x0108
     55a:	88 23       	and	r24, r24
     55c:	29 f0       	breq	.+10     	; 0x568 <m_usb_rx_available+0x16>
		UENUM = CDC_RX_ENDPOINT;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     564:	80 91 f2 00 	lds	r24, 0x00F2
	}
	SREG = intr_state;
     568:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     56a:	08 95       	ret

0000056c <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     56c:	80 91 08 01 	lds	r24, 0x0108
     570:	88 23       	and	r24, r24
     572:	71 f0       	breq	.+28     	; 0x590 <m_usb_rx_flush+0x24>
		intr_state = SREG;
     574:	9f b7       	in	r25, 0x3f	; 63
		cli();
     576:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     57e:	2b e6       	ldi	r18, 0x6B	; 107
     580:	02 c0       	rjmp	.+4      	; 0x586 <m_usb_rx_flush+0x1a>
     582:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     586:	80 91 e8 00 	lds	r24, 0x00E8
     58a:	85 fd       	sbrc	r24, 5
     58c:	fa cf       	rjmp	.-12     	; 0x582 <m_usb_rx_flush+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     58e:	9f bf       	out	0x3f, r25	; 63
     590:	08 95       	ret

00000592 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     592:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     594:	80 91 08 01 	lds	r24, 0x0108
     598:	88 23       	and	r24, r24
     59a:	d9 f1       	breq	.+118    	; 0x612 <m_usb_tx_char+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     59c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     59e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     5a6:	80 91 0b 01 	lds	r24, 0x010B
     5aa:	88 23       	and	r24, r24
     5ac:	41 f0       	breq	.+16     	; 0x5be <m_usb_tx_char+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     5ae:	80 91 e8 00 	lds	r24, 0x00E8
     5b2:	85 fd       	sbrc	r24, 5
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <m_usb_tx_char+0x28>
			SREG = intr_state;
     5b6:	2f bf       	out	0x3f, r18	; 63
     5b8:	12 c0       	rjmp	.+36     	; 0x5de <m_usb_tx_char+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     5ba:	10 92 0b 01 	sts	0x010B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     5be:	90 91 e4 00 	lds	r25, 0x00E4
     5c2:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     5c4:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     5c6:	80 91 e8 00 	lds	r24, 0x00E8
     5ca:	85 fd       	sbrc	r24, 5
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <m_usb_tx_char+0x62>
		SREG = intr_state;
     5ce:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     5d0:	80 91 e4 00 	lds	r24, 0x00E4
     5d4:	89 17       	cp	r24, r25
     5d6:	29 f4       	brne	.+10     	; 0x5e2 <m_usb_tx_char+0x50>
			transmit_previous_timeout = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 0b 01 	sts	0x010B, r24
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     5e2:	80 91 08 01 	lds	r24, 0x0108
     5e6:	88 23       	and	r24, r24
     5e8:	a1 f0       	breq	.+40     	; 0x612 <m_usb_tx_char+0x80>
		// get ready to try checking again
		intr_state = SREG;
     5ea:	2f b7       	in	r18, 0x3f	; 63
		cli();
     5ec:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     5ee:	30 93 e9 00 	sts	0x00E9, r19
     5f2:	e9 cf       	rjmp	.-46     	; 0x5c6 <m_usb_tx_char+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     5f4:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	85 fd       	sbrc	r24, 5
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <m_usb_tx_char+0x74>
     600:	8a e3       	ldi	r24, 0x3A	; 58
     602:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
     60c:	2f bf       	out	0x3f, r18	; 63
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	08 95       	ret
	return 0;
     612:	8f ef       	ldi	r24, 0xFF	; 255
}
     614:	08 95       	ret

00000616 <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
     616:	28 2f       	mov	r18, r24
	uint8_t intr_state;

	if (!usb_configuration) return -1;
     618:	80 91 08 01 	lds	r24, 0x0108
     61c:	88 23       	and	r24, r24
     61e:	51 f0       	breq	.+20     	; 0x634 <usb_serial_putchar_nowait+0x1e>
	intr_state = SREG;
     620:	9f b7       	in	r25, 0x3f	; 63
	cli();
     622:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     62a:	80 91 e8 00 	lds	r24, 0x00E8
     62e:	85 fd       	sbrc	r24, 5
     630:	03 c0       	rjmp	.+6      	; 0x638 <usb_serial_putchar_nowait+0x22>
		// buffer is full
		SREG = intr_state;
     632:	9f bf       	out	0x3f, r25	; 63
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	08 95       	ret
		return -1;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     638:	20 93 f1 00 	sts	0x00F1, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     63c:	80 91 e8 00 	lds	r24, 0x00E8
     640:	85 fd       	sbrc	r24, 5
     642:	03 c0       	rjmp	.+6      	; 0x64a <usb_serial_putchar_nowait+0x34>
     644:	8a e3       	ldi	r24, 0x3A	; 58
     646:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     64a:	85 e0       	ldi	r24, 0x05	; 5
     64c:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
     650:	9f bf       	out	0x3f, r25	; 63
     652:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     654:	08 95       	ret

00000656 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     65c:	80 91 08 01 	lds	r24, 0x0108
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <usb_serial_write+0x10>
     664:	1c c1       	rjmp	.+568    	; 0x89e <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     666:	3f b7       	in	r19, 0x3f	; 63
	cli();
     668:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     670:	80 91 0b 01 	lds	r24, 0x010B
     674:	88 23       	and	r24, r24
     676:	09 f4       	brne	.+2      	; 0x67a <usb_serial_write+0x24>
     678:	07 c1       	rjmp	.+526    	; 0x888 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     67a:	80 91 e8 00 	lds	r24, 0x00E8
     67e:	85 fd       	sbrc	r24, 5
     680:	02 c0       	rjmp	.+4      	; 0x686 <usb_serial_write+0x30>
			SREG = intr_state;
     682:	3f bf       	out	0x3f, r19	; 63
     684:	0c c1       	rjmp	.+536    	; 0x89e <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     686:	10 92 0b 01 	sts	0x010B, r1
     68a:	fe c0       	rjmp	.+508    	; 0x888 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     68c:	90 91 e4 00 	lds	r25, 0x00E4
     690:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     692:	80 91 e8 00 	lds	r24, 0x00E8
     696:	85 fd       	sbrc	r24, 5
     698:	13 c0       	rjmp	.+38     	; 0x6c0 <usb_serial_write+0x6a>
			SREG = intr_state;
     69a:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     69c:	80 91 e4 00 	lds	r24, 0x00E4
     6a0:	89 17       	cp	r24, r25
     6a2:	21 f4       	brne	.+8      	; 0x6ac <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 0b 01 	sts	0x010B, r24
     6aa:	f9 c0       	rjmp	.+498    	; 0x89e <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     6ac:	80 91 08 01 	lds	r24, 0x0108
     6b0:	88 23       	and	r24, r24
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <usb_serial_write+0x60>
     6b4:	f4 c0       	rjmp	.+488    	; 0x89e <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     6b6:	3f b7       	in	r19, 0x3f	; 63
			cli();
     6b8:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     6ba:	50 93 e9 00 	sts	0x00E9, r21
     6be:	e9 cf       	rjmp	.-46     	; 0x692 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     6c0:	80 91 f2 00 	lds	r24, 0x00F2
     6c4:	2a 2f       	mov	r18, r26
     6c6:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     6c8:	82 2f       	mov	r24, r18
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	68 17       	cp	r22, r24
     6ce:	79 07       	cpc	r23, r25
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <usb_serial_write+0x7e>
     6d2:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     6d4:	82 2f       	mov	r24, r18
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	81 34       	cpi	r24, 0x41	; 65
     6da:	91 05       	cpc	r25, r1
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <usb_serial_write+0x8a>
     6de:	c6 c0       	rjmp	.+396    	; 0x86c <usb_serial_write+0x216>
     6e0:	8a 5a       	subi	r24, 0xAA	; 170
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	05 90       	lpm	r0, Z+
     6ec:	f4 91       	lpm	r31, Z+
     6ee:	e0 2d       	mov	r30, r0
     6f0:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     6f2:	89 91       	ld	r24, Y+
     6f4:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     6f8:	89 91       	ld	r24, Y+
     6fa:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     6fe:	89 91       	ld	r24, Y+
     700:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
     704:	89 91       	ld	r24, Y+
     706:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
     70a:	89 91       	ld	r24, Y+
     70c:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
     710:	89 91       	ld	r24, Y+
     712:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
     716:	89 91       	ld	r24, Y+
     718:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
     71c:	89 91       	ld	r24, Y+
     71e:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
     722:	89 91       	ld	r24, Y+
     724:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
     728:	89 91       	ld	r24, Y+
     72a:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
     72e:	89 91       	ld	r24, Y+
     730:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
     734:	89 91       	ld	r24, Y+
     736:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
     73a:	89 91       	ld	r24, Y+
     73c:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
     740:	89 91       	ld	r24, Y+
     742:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
     746:	89 91       	ld	r24, Y+
     748:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
     74c:	89 91       	ld	r24, Y+
     74e:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
     752:	89 91       	ld	r24, Y+
     754:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
     758:	89 91       	ld	r24, Y+
     75a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
     75e:	89 91       	ld	r24, Y+
     760:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
     764:	89 91       	ld	r24, Y+
     766:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
     76a:	89 91       	ld	r24, Y+
     76c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
     770:	89 91       	ld	r24, Y+
     772:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
     776:	89 91       	ld	r24, Y+
     778:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
     77c:	89 91       	ld	r24, Y+
     77e:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
     782:	89 91       	ld	r24, Y+
     784:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
     788:	89 91       	ld	r24, Y+
     78a:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
     78e:	89 91       	ld	r24, Y+
     790:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
     794:	89 91       	ld	r24, Y+
     796:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
     79a:	89 91       	ld	r24, Y+
     79c:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
     7a0:	89 91       	ld	r24, Y+
     7a2:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
     7a6:	89 91       	ld	r24, Y+
     7a8:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
     7ac:	89 91       	ld	r24, Y+
     7ae:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     7b2:	89 91       	ld	r24, Y+
     7b4:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
     7b8:	89 91       	ld	r24, Y+
     7ba:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
     7be:	89 91       	ld	r24, Y+
     7c0:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
     7c4:	89 91       	ld	r24, Y+
     7c6:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
     7ca:	89 91       	ld	r24, Y+
     7cc:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
     7d0:	89 91       	ld	r24, Y+
     7d2:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
     7d6:	89 91       	ld	r24, Y+
     7d8:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
     7dc:	89 91       	ld	r24, Y+
     7de:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
     7e2:	89 91       	ld	r24, Y+
     7e4:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
     7e8:	89 91       	ld	r24, Y+
     7ea:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
     7ee:	89 91       	ld	r24, Y+
     7f0:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
     7f4:	89 91       	ld	r24, Y+
     7f6:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
     7fa:	89 91       	ld	r24, Y+
     7fc:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
     800:	89 91       	ld	r24, Y+
     802:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
     806:	89 91       	ld	r24, Y+
     808:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
     80c:	89 91       	ld	r24, Y+
     80e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     812:	89 91       	ld	r24, Y+
     814:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
     818:	89 91       	ld	r24, Y+
     81a:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
     81e:	89 91       	ld	r24, Y+
     820:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
     824:	89 91       	ld	r24, Y+
     826:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
     82a:	89 91       	ld	r24, Y+
     82c:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
     830:	89 91       	ld	r24, Y+
     832:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
     836:	89 91       	ld	r24, Y+
     838:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
     83c:	89 91       	ld	r24, Y+
     83e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
     842:	89 91       	ld	r24, Y+
     844:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
     848:	89 91       	ld	r24, Y+
     84a:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
     84e:	89 91       	ld	r24, Y+
     850:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
     854:	89 91       	ld	r24, Y+
     856:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
     85a:	89 91       	ld	r24, Y+
     85c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
     860:	89 91       	ld	r24, Y+
     862:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
     866:	89 91       	ld	r24, Y+
     868:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
     86c:	89 91       	ld	r24, Y+
     86e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     872:	80 91 e8 00 	lds	r24, 0x00E8
     876:	85 fd       	sbrc	r24, 5
     878:	02 c0       	rjmp	.+4      	; 0x87e <usb_serial_write+0x228>
     87a:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
     87e:	62 1b       	sub	r22, r18
     880:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     882:	40 93 0a 01 	sts	0x010A, r20
     886:	04 c0       	rjmp	.+8      	; 0x890 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
     888:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     88a:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     88c:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     88e:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	09 f0       	breq	.+2      	; 0x898 <usb_serial_write+0x242>
     896:	fa ce       	rjmp	.-524    	; 0x68c <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
     898:	3f bf       	out	0x3f, r19	; 63
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <usb_serial_write+0x24a>
	return 0;
     89e:	8f ef       	ldi	r24, 0xFF	; 255
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <m_usb_tx_push>:
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
	uint8_t intr_state;

	intr_state = SREG;
     8a6:	9f b7       	in	r25, 0x3f	; 63
	cli();
     8a8:	f8 94       	cli
	if (transmit_flush_timer) {
     8aa:	80 91 0a 01 	lds	r24, 0x010A
     8ae:	88 23       	and	r24, r24
     8b0:	41 f0       	breq	.+16     	; 0x8c2 <m_usb_tx_push+0x1c>
		UENUM = CDC_TX_ENDPOINT;
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	80 93 e9 00 	sts	0x00E9, r24
		UEINTX = 0x3A;
     8b8:	8a e3       	ldi	r24, 0x3A	; 58
     8ba:	80 93 e8 00 	sts	0x00E8, r24
		transmit_flush_timer = 0;
     8be:	10 92 0a 01 	sts	0x010A, r1
	}
	SREG = intr_state;
     8c2:	9f bf       	out	0x3f, r25	; 63
}
     8c4:	08 95       	ret

000008c6 <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
     8c6:	60 91 00 01 	lds	r22, 0x0100
     8ca:	70 91 01 01 	lds	r23, 0x0101
	return *(uint32_t *)cdc_line_coding;
}
     8ce:	80 91 02 01 	lds	r24, 0x0102
     8d2:	90 91 03 01 	lds	r25, 0x0103
     8d6:	08 95       	ret

000008d8 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
     8d8:	80 91 04 01 	lds	r24, 0x0104
     8dc:	08 95       	ret

000008de <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
     8de:	80 91 05 01 	lds	r24, 0x0105
     8e2:	08 95       	ret

000008e4 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
     8e4:	80 91 06 01 	lds	r24, 0x0106
     8e8:	08 95       	ret

000008ea <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
     8ea:	80 91 09 01 	lds	r24, 0x0109
     8ee:	08 95       	ret

000008f0 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
     8f0:	38 2f       	mov	r19, r24
	uint8_t intr_state;

	intr_state = SREG;
     8f2:	9f b7       	in	r25, 0x3f	; 63
	cli();
     8f4:	f8 94       	cli
	if (!usb_configuration) {
     8f6:	80 91 08 01 	lds	r24, 0x0108
     8fa:	88 23       	and	r24, r24
     8fc:	39 f0       	breq	.+14     	; 0x90c <usb_serial_set_control+0x1c>
		// we're not enumerated/configured
		SREG = intr_state;
		return -1;
	}

	UENUM = CDC_ACM_ENDPOINT;
     8fe:	22 e0       	ldi	r18, 0x02	; 2
     900:	20 93 e9 00 	sts	0x00E9, r18
	if (!(UEINTX & (1<<RWAL))) {
     904:	80 91 e8 00 	lds	r24, 0x00E8
     908:	85 fd       	sbrc	r24, 5
     90a:	03 c0       	rjmp	.+6      	; 0x912 <usb_serial_set_control+0x22>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
     90c:	9f bf       	out	0x3f, r25	; 63
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	08 95       	ret
		return -1;
	}
	UEDATX = 0xA1;
     912:	81 ea       	ldi	r24, 0xA1	; 161
     914:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0x20;
     918:	80 e2       	ldi	r24, 0x20	; 32
     91a:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
     91e:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
     922:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
     926:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
     92a:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 2;
     92e:	20 93 f1 00 	sts	0x00F1, r18
	UEDATX = 0;
     932:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = signals;
     936:	30 93 f1 00 	sts	0x00F1, r19
	UEDATX = 0;
     93a:	10 92 f1 00 	sts	0x00F1, r1
	UEINTX = 0x3A;
     93e:	8a e3       	ldi	r24, 0x3A	; 58
     940:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     944:	9f bf       	out	0x3f, r25	; 63
     946:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     948:	08 95       	ret

0000094a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
     958:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     95c:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     960:	98 2f       	mov	r25, r24
     962:	83 ff       	sbrs	r24, 3
     964:	11 c0       	rjmp	.+34     	; 0x988 <__vector_10+0x3e>
		UENUM = 0;
     966:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     970:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     974:	82 e1       	ldi	r24, 0x12	; 18
     976:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     980:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
     984:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
     988:	92 ff       	sbrs	r25, 2
     98a:	13 c0       	rjmp	.+38     	; 0x9b2 <__vector_10+0x68>
		if (usb_configuration) {
     98c:	80 91 08 01 	lds	r24, 0x0108
     990:	88 23       	and	r24, r24
     992:	79 f0       	breq	.+30     	; 0x9b2 <__vector_10+0x68>
			t = transmit_flush_timer;
     994:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
     998:	88 23       	and	r24, r24
     99a:	59 f0       	breq	.+22     	; 0x9b2 <__vector_10+0x68>
				transmit_flush_timer = --t;
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
     9a2:	88 23       	and	r24, r24
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     9ac:	8a e3       	ldi	r24, 0x3A	; 58
     9ae:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     9e6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     9ea:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     9ee:	83 ff       	sbrs	r24, 3
     9f0:	3c c1       	rjmp	.+632    	; 0xc6a <__stack+0x16b>
                bmRequestType = UEDATX;
     9f2:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     9f6:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     9fa:	80 91 f1 00 	lds	r24, 0x00F1
     9fe:	68 2f       	mov	r22, r24
     a00:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     a02:	20 91 f1 00 	lds	r18, 0x00F1
     a06:	92 2f       	mov	r25, r18
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	68 2b       	or	r22, r24
     a0c:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     a0e:	80 91 f1 00 	lds	r24, 0x00F1
     a12:	a8 2f       	mov	r26, r24
     a14:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     a16:	20 91 f1 00 	lds	r18, 0x00F1
     a1a:	92 2f       	mov	r25, r18
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	a8 2b       	or	r26, r24
     a20:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     a22:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     a26:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     a2a:	82 ef       	ldi	r24, 0xF2	; 242
     a2c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     a30:	36 30       	cpi	r19, 0x06	; 6
     a32:	09 f0       	breq	.+2      	; 0xa36 <__vector_11+0x76>
     a34:	5a c0       	rjmp	.+180    	; 0xaea <__vector_11+0x12a>
     a36:	25 e3       	ldi	r18, 0x35	; 53
     a38:	31 e0       	ldi	r19, 0x01	; 1
     a3a:	a9 01       	movw	r20, r18
     a3c:	45 50       	subi	r20, 0x05	; 5
     a3e:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
     a40:	f9 01       	movw	r30, r18
     a42:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
     a44:	85 91       	lpm	r24, Z+
     a46:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     a48:	86 17       	cp	r24, r22
     a4a:	97 07       	cpc	r25, r23
     a4c:	01 f5       	brne	.+64     	; 0xa8e <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
     a4e:	fa 01       	movw	r30, r20
     a50:	85 91       	lpm	r24, Z+
     a52:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     a54:	8a 17       	cp	r24, r26
     a56:	9b 07       	cpc	r25, r27
     a58:	d1 f4       	brne	.+52     	; 0xa8e <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
     a5a:	9a 01       	movw	r18, r20
     a5c:	2e 5f       	subi	r18, 0xFE	; 254
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
     a60:	f9 01       	movw	r30, r18
     a62:	65 91       	lpm	r22, Z+
     a64:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
     a66:	2e 5f       	subi	r18, 0xFE	; 254
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	f9 01       	movw	r30, r18
     a6c:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
     a6e:	21 2f       	mov	r18, r17
     a70:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     a72:	90 2f       	mov	r25, r16
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	2f 3f       	cpi	r18, 0xFF	; 255
     a7c:	31 05       	cpc	r19, r1
     a7e:	19 f0       	breq	.+6      	; 0xa86 <__vector_11+0xc6>
     a80:	10 f0       	brcs	.+4      	; 0xa86 <__vector_11+0xc6>
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	24 17       	cp	r18, r20
     a88:	58 f4       	brcc	.+22     	; 0xaa0 <__vector_11+0xe0>
     a8a:	42 2f       	mov	r20, r18
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <__vector_11+0xe0>
     a8e:	29 5f       	subi	r18, 0xF9	; 249
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	49 5f       	subi	r20, 0xF9	; 249
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	2f 35       	cpi	r18, 0x5F	; 95
     a9a:	3f 07       	cpc	r19, r31
     a9c:	89 f6       	brne	.-94     	; 0xa40 <__vector_11+0x80>
     a9e:	e5 c0       	rjmp	.+458    	; 0xc6a <__stack+0x16b>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     aa0:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     aa2:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	c9 01       	movw	r24, r18
     aac:	85 70       	andi	r24, 0x05	; 5
     aae:	90 70       	andi	r25, 0x00	; 0
     ab0:	89 2b       	or	r24, r25
     ab2:	b9 f3       	breq	.-18     	; 0xaa2 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
     ab4:	22 fd       	sbrc	r18, 2
     ab6:	dc c0       	rjmp	.+440    	; 0xc70 <__stack+0x171>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     ab8:	34 2f       	mov	r19, r20
     aba:	41 31       	cpi	r20, 0x11	; 17
     abc:	08 f0       	brcs	.+2      	; 0xac0 <__vector_11+0x100>
     abe:	30 e1       	ldi	r19, 0x10	; 16
     ac0:	23 2f       	mov	r18, r19
     ac2:	cb 01       	movw	r24, r22
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <__vector_11+0x112>
				for (i = n; i; i--) {
     ac6:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	e4 91       	lpm	r30, Z+
     acc:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	22 23       	and	r18, r18
     ad4:	c1 f7       	brne	.-16     	; 0xac6 <__vector_11+0x106>
     ad6:	63 0f       	add	r22, r19
     ad8:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     ada:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     adc:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     ae0:	44 23       	and	r20, r20
     ae2:	f9 f6       	brne	.-66     	; 0xaa2 <__vector_11+0xe2>
     ae4:	30 31       	cpi	r19, 0x10	; 16
     ae6:	e9 f2       	breq	.-70     	; 0xaa2 <__vector_11+0xe2>
     ae8:	c3 c0       	rjmp	.+390    	; 0xc70 <__stack+0x171>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     aea:	35 30       	cpi	r19, 0x05	; 5
     aec:	61 f4       	brne	.+24     	; 0xb06 <__stack+0x7>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     aee:	8e ef       	ldi	r24, 0xFE	; 254
     af0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     af4:	80 91 e8 00 	lds	r24, 0x00E8
     af8:	80 ff       	sbrs	r24, 0
     afa:	fc cf       	rjmp	.-8      	; 0xaf4 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     afc:	86 2f       	mov	r24, r22
     afe:	80 68       	ori	r24, 0x80	; 128
     b00:	80 93 e3 00 	sts	0x00E3, r24
     b04:	b5 c0       	rjmp	.+362    	; 0xc70 <__stack+0x171>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     b06:	39 30       	cpi	r19, 0x09	; 9
     b08:	51 f5       	brne	.+84     	; 0xb5e <__stack+0x5f>
     b0a:	44 23       	and	r20, r20
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__stack+0x11>
     b0e:	ad c0       	rjmp	.+346    	; 0xc6a <__stack+0x16b>
			usb_configuration = wValue;
     b10:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
     b14:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
     b18:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b1c:	8e ef       	ldi	r24, 0xFE	; 254
     b1e:	80 93 e8 00 	sts	0x00E8, r24
     b22:	88 e5       	ldi	r24, 0x58	; 88
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     b28:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
     b2c:	fc 01       	movw	r30, r24
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	e4 91       	lpm	r30, Z+
				UECONX = en;
     b32:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
     b36:	ee 23       	and	r30, r30
     b38:	69 f0       	breq	.+26     	; 0xb54 <__stack+0x55>
					UECFG0X = pgm_read_byte(cfg++);
     b3a:	ac 01       	movw	r20, r24
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	fc 01       	movw	r30, r24
     b42:	84 91       	lpm	r24, Z+
     b44:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
     b48:	ca 01       	movw	r24, r20
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	fa 01       	movw	r30, r20
     b4e:	34 91       	lpm	r19, Z+
     b50:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     b54:	2f 5f       	subi	r18, 0xFF	; 255
     b56:	25 30       	cpi	r18, 0x05	; 5
     b58:	39 f7       	brne	.-50     	; 0xb28 <__stack+0x29>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     b5a:	8e e1       	ldi	r24, 0x1E	; 30
     b5c:	81 c0       	rjmp	.+258    	; 0xc60 <__stack+0x161>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     b5e:	38 30       	cpi	r19, 0x08	; 8
     b60:	61 f4       	brne	.+24     	; 0xb7a <__stack+0x7b>
     b62:	40 38       	cpi	r20, 0x80	; 128
     b64:	09 f0       	breq	.+2      	; 0xb68 <__stack+0x69>
     b66:	81 c0       	rjmp	.+258    	; 0xc6a <__stack+0x16b>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     b68:	80 91 e8 00 	lds	r24, 0x00E8
     b6c:	80 ff       	sbrs	r24, 0
     b6e:	fc cf       	rjmp	.-8      	; 0xb68 <__stack+0x69>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     b70:	80 91 08 01 	lds	r24, 0x0108
     b74:	80 93 f1 00 	sts	0x00F1, r24
     b78:	50 c0       	rjmp	.+160    	; 0xc1a <__stack+0x11b>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     b7a:	31 32       	cpi	r19, 0x21	; 33
     b7c:	89 f4       	brne	.+34     	; 0xba0 <__stack+0xa1>
     b7e:	41 3a       	cpi	r20, 0xA1	; 161
     b80:	09 f0       	breq	.+2      	; 0xb84 <__stack+0x85>
     b82:	73 c0       	rjmp	.+230    	; 0xc6a <__stack+0x16b>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	80 ff       	sbrs	r24, 0
     b8a:	fc cf       	rjmp	.-8      	; 0xb84 <__stack+0x85>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     b90:	81 91       	ld	r24, Z+
     b92:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	e7 30       	cpi	r30, 0x07	; 7
     b9a:	f8 07       	cpc	r31, r24
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__stack+0x91>
     b9e:	3d c0       	rjmp	.+122    	; 0xc1a <__stack+0x11b>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     ba0:	30 32       	cpi	r19, 0x20	; 32
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <__stack+0xcd>
     ba4:	41 32       	cpi	r20, 0x21	; 33
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__stack+0xab>
     ba8:	60 c0       	rjmp	.+192    	; 0xc6a <__stack+0x16b>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     baa:	80 91 e8 00 	lds	r24, 0x00E8
     bae:	82 ff       	sbrs	r24, 2
     bb0:	fc cf       	rjmp	.-8      	; 0xbaa <__stack+0xab>
     bb2:	e0 e0       	ldi	r30, 0x00	; 0
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     bb6:	80 91 f1 00 	lds	r24, 0x00F1
     bba:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	e7 30       	cpi	r30, 0x07	; 7
     bc0:	f8 07       	cpc	r31, r24
     bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__stack+0xb7>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     bc4:	8b ef       	ldi	r24, 0xFB	; 251
     bc6:	80 93 e8 00 	sts	0x00E8, r24
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <__stack+0x11b>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     bcc:	32 32       	cpi	r19, 0x22	; 34
     bce:	51 f4       	brne	.+20     	; 0xbe4 <__stack+0xe5>
     bd0:	41 32       	cpi	r20, 0x21	; 33
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__stack+0xd7>
     bd4:	4a c0       	rjmp	.+148    	; 0xc6a <__stack+0x16b>
			cdc_line_rtsdtr = wValue;
     bd6:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     bda:	80 91 e8 00 	lds	r24, 0x00E8
     bde:	80 ff       	sbrs	r24, 0
     be0:	fc cf       	rjmp	.-8      	; 0xbda <__stack+0xdb>
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <__stack+0x11b>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     be4:	33 23       	and	r19, r19
     be6:	e9 f4       	brne	.+58     	; 0xc22 <__stack+0x123>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     be8:	80 91 e8 00 	lds	r24, 0x00E8
     bec:	80 ff       	sbrs	r24, 0
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <__stack+0xe9>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     bf0:	42 38       	cpi	r20, 0x82	; 130
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <__stack+0xf9>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <__stack+0x113>
				UENUM = wIndex;
     bf8:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
     bfc:	80 91 eb 00 	lds	r24, 0x00EB
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	25 e0       	ldi	r18, 0x05	; 5
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	2a 95       	dec	r18
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <__stack+0x105>
     c0c:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
     c0e:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
     c12:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
     c16:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c1a:	8e ef       	ldi	r24, 0xFE	; 254
     c1c:	80 93 e8 00 	sts	0x00E8, r24
     c20:	27 c0       	rjmp	.+78     	; 0xc70 <__stack+0x171>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     c22:	31 30       	cpi	r19, 0x01	; 1
     c24:	11 f0       	breq	.+4      	; 0xc2a <__stack+0x12b>
     c26:	33 30       	cpi	r19, 0x03	; 3
     c28:	01 f5       	brne	.+64     	; 0xc6a <__stack+0x16b>
     c2a:	42 30       	cpi	r20, 0x02	; 2
     c2c:	f1 f4       	brne	.+60     	; 0xc6a <__stack+0x16b>
     c2e:	67 2b       	or	r22, r23
     c30:	e1 f4       	brne	.+56     	; 0xc6a <__stack+0x16b>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
     c32:	2a 2f       	mov	r18, r26
     c34:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     c36:	82 2f       	mov	r24, r18
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	b0 f4       	brcc	.+44     	; 0xc6a <__stack+0x16b>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c3e:	8e ef       	ldi	r24, 0xFE	; 254
     c40:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     c44:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
     c48:	33 30       	cpi	r19, 0x03	; 3
     c4a:	79 f0       	breq	.+30     	; 0xc6a <__stack+0x16b>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__stack+0x15d>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	2a 95       	dec	r18
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <__stack+0x159>
     c60:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
     c64:	10 92 ea 00 	sts	0x00EA, r1
     c68:	03 c0       	rjmp	.+6      	; 0xc70 <__stack+0x171>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     c6a:	81 e2       	ldi	r24, 0x21	; 33
     c6c:	80 93 eb 00 	sts	0x00EB, r24
}
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	14 91       	lpm	r17, Z+
		if (!c) break;
     ca4:	11 23       	and	r17, r17
     ca6:	49 f0       	breq	.+18     	; 0xcba <print_P+0x24>
		if (c == '\n') usb_tx_char('\r');
     ca8:	1a 30       	cpi	r17, 0x0A	; 10
     caa:	19 f4       	brne	.+6      	; 0xcb2 <print_P+0x1c>
     cac:	8d e0       	ldi	r24, 0x0D	; 13
     cae:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
		usb_tx_char(c);
     cb2:	81 2f       	mov	r24, r17
     cb4:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
     cb8:	f2 cf       	rjmp	.-28     	; 0xc9e <print_P+0x8>
	}
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	08 95       	ret

00000cc2 <phex1>:

void phex1(unsigned char c)
{
     cc2:	98 2f       	mov	r25, r24
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
     cc4:	8a 30       	cpi	r24, 0x0A	; 10
     cc6:	10 f0       	brcs	.+4      	; 0xccc <phex1+0xa>
     cc8:	87 e3       	ldi	r24, 0x37	; 55
     cca:	01 c0       	rjmp	.+2      	; 0xcce <phex1+0xc>
     ccc:	80 e3       	ldi	r24, 0x30	; 48
     cce:	89 0f       	add	r24, r25
     cd0:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
}
     cd4:	08 95       	ret

00000cd6 <phex>:

void phex(unsigned char c)
{
     cd6:	1f 93       	push	r17
     cd8:	18 2f       	mov	r17, r24
	phex1(c >> 4);
     cda:	82 95       	swap	r24
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	0e 94 61 06 	call	0xcc2	; 0xcc2 <phex1>
	phex1(c & 15);
     ce2:	81 2f       	mov	r24, r17
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <phex1>
}
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
     cee:	1f 93       	push	r17
     cf0:	18 2f       	mov	r17, r24
	phex(i >> 8);
     cf2:	89 2f       	mov	r24, r25
     cf4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <phex>
	phex(i);
     cf8:	81 2f       	mov	r24, r17
     cfa:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <phex>
}
     cfe:	1f 91       	pop	r17
     d00:	08 95       	ret

00000d02 <m_usb_tx_hexchar>:

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     d02:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <phex>
}
     d06:	08 95       	ret

00000d08 <m_usb_tx_ulong>:
        }
	}
}

void m_usb_tx_ulong(unsigned long i)
{
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	2a 97       	sbiw	r28, 0x0a	; 10
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
     d24:	8e 01       	movw	r16, r28
     d26:	0f 5f       	subi	r16, 0xFF	; 255
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	2a e0       	ldi	r18, 0x0A	; 10
     d2c:	f8 01       	movw	r30, r16
     d2e:	11 92       	st	Z+, r1
     d30:	2a 95       	dec	r18
     d32:	e9 f7       	brne	.-6      	; 0xd2e <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
     d34:	a8 01       	movw	r20, r16
     d36:	2a e0       	ldi	r18, 0x0A	; 10
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	0e 94 b2 07 	call	0xf64	; 0xf64 <ultoa>
	for(i=0;i<10;i++){
     d3e:	3b e0       	ldi	r19, 0x0B	; 11
     d40:	e3 2e       	mov	r14, r19
     d42:	f1 2c       	mov	r15, r1
     d44:	ec 0e       	add	r14, r28
     d46:	fd 1e       	adc	r15, r29
        if(string[i]){
     d48:	f8 01       	movw	r30, r16
     d4a:	80 81       	ld	r24, Z
     d4c:	88 23       	and	r24, r24
     d4e:	11 f0       	breq	.+4      	; 0xd54 <m_usb_tx_ulong+0x4c>
            m_usb_tx_char(string[i]);
     d50:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
     d54:	0f 5f       	subi	r16, 0xFF	; 255
     d56:	1f 4f       	sbci	r17, 0xFF	; 255

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
     d58:	0e 15       	cp	r16, r14
     d5a:	1f 05       	cpc	r17, r15
     d5c:	a9 f7       	brne	.-22     	; 0xd48 <m_usb_tx_ulong+0x40>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
     d5e:	2a 96       	adiw	r28, 0x0a	; 10
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	08 95       	ret

00000d78 <m_usb_tx_long>:
        }
	}
}

void m_usb_tx_long(long i)
{
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	2b 97       	sbiw	r28, 0x0b	; 11
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
     d94:	8e 01       	movw	r16, r28
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	2b e0       	ldi	r18, 0x0B	; 11
     d9c:	f8 01       	movw	r30, r16
     d9e:	11 92       	st	Z+, r1
     da0:	2a 95       	dec	r18
     da2:	e9 f7       	brne	.-6      	; 0xd9e <m_usb_tx_long+0x26>
	ltoa(i,string,10);
     da4:	a8 01       	movw	r20, r16
     da6:	2a e0       	ldi	r18, 0x0A	; 10
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	0e 94 7e 07 	call	0xefc	; 0xefc <ltoa>
	for(i=0;i<11;i++){
     dae:	4c e0       	ldi	r20, 0x0C	; 12
     db0:	e4 2e       	mov	r14, r20
     db2:	f1 2c       	mov	r15, r1
     db4:	ec 0e       	add	r14, r28
     db6:	fd 1e       	adc	r15, r29
        if(string[i]){
     db8:	f8 01       	movw	r30, r16
     dba:	80 81       	ld	r24, Z
     dbc:	88 23       	and	r24, r24
     dbe:	11 f0       	breq	.+4      	; 0xdc4 <m_usb_tx_long+0x4c>
            m_usb_tx_char(string[i]);
     dc0:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
     dc4:	0f 5f       	subi	r16, 0xFF	; 255
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
     dc8:	0e 15       	cp	r16, r14
     dca:	1f 05       	cpc	r17, r15
     dcc:	a9 f7       	brne	.-22     	; 0xdb8 <m_usb_tx_long+0x40>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     dce:	2b 96       	adiw	r28, 0x0b	; 11
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <m_usb_tx_uint>:
        }
	}
}

void m_usb_tx_uint(unsigned int i)
{
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <m_usb_tx_uint+0xe>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <m_usb_tx_uint+0x10>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	char string[5] = {0,0,0,0,0};
     dfe:	8e 01       	movw	r16, r28
     e00:	0f 5f       	subi	r16, 0xFF	; 255
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	25 e0       	ldi	r18, 0x05	; 5
     e06:	f8 01       	movw	r30, r16
     e08:	11 92       	st	Z+, r1
     e0a:	2a 95       	dec	r18
     e0c:	e9 f7       	brne	.-6      	; 0xe08 <m_usb_tx_uint+0x20>
	utoa(i,string,10);
     e0e:	b8 01       	movw	r22, r16
     e10:	4a e0       	ldi	r20, 0x0A	; 10
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	0e 94 d7 07 	call	0xfae	; 0xfae <utoa>
	for(i=0;i<5;i++){
     e18:	56 e0       	ldi	r21, 0x06	; 6
     e1a:	e5 2e       	mov	r14, r21
     e1c:	f1 2c       	mov	r15, r1
     e1e:	ec 0e       	add	r14, r28
     e20:	fd 1e       	adc	r15, r29
        if(string[i]){
     e22:	f8 01       	movw	r30, r16
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	11 f0       	breq	.+4      	; 0xe2e <m_usb_tx_uint+0x46>
            m_usb_tx_char(string[i]);
     e2a:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
     e2e:	0f 5f       	subi	r16, 0xFF	; 255
     e30:	1f 4f       	sbci	r17, 0xFF	; 255

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
     e32:	0e 15       	cp	r16, r14
     e34:	1f 05       	cpc	r17, r15
     e36:	a9 f7       	brne	.-22     	; 0xe22 <m_usb_tx_uint+0x3a>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	08 95       	ret

00000e50 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <m_usb_tx_int+0xe>
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <m_usb_tx_int+0x10>
     e60:	00 d0       	rcall	.+0      	; 0xe62 <m_usb_tx_int+0x12>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
     e66:	8e 01       	movw	r16, r28
     e68:	0f 5f       	subi	r16, 0xFF	; 255
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	26 e0       	ldi	r18, 0x06	; 6
     e6e:	f8 01       	movw	r30, r16
     e70:	11 92       	st	Z+, r1
     e72:	2a 95       	dec	r18
     e74:	e9 f7       	brne	.-6      	; 0xe70 <m_usb_tx_int+0x20>
	itoa(i,string,10);
     e76:	b8 01       	movw	r22, r16
     e78:	4a e0       	ldi	r20, 0x0A	; 10
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	0e 94 5d 07 	call	0xeba	; 0xeba <itoa>
	for(i=0;i<6;i++){
     e80:	67 e0       	ldi	r22, 0x07	; 7
     e82:	e6 2e       	mov	r14, r22
     e84:	f1 2c       	mov	r15, r1
     e86:	ec 0e       	add	r14, r28
     e88:	fd 1e       	adc	r15, r29
        if(string[i]){
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	11 f0       	breq	.+4      	; 0xe96 <m_usb_tx_int+0x46>
            m_usb_tx_char(string[i]);
     e92:	0e 94 c9 02 	call	0x592	; 0x592 <m_usb_tx_char>
     e96:	0f 5f       	subi	r16, 0xFF	; 255
     e98:	1f 4f       	sbci	r17, 0xFF	; 255

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
     e9a:	0e 15       	cp	r16, r14
     e9c:	1f 05       	cpc	r17, r15
     e9e:	a9 f7       	brne	.-22     	; 0xe8a <m_usb_tx_int+0x3a>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     ea0:	26 96       	adiw	r28, 0x06	; 6
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <itoa>:
     eba:	fb 01       	movw	r30, r22
     ebc:	9f 01       	movw	r18, r30
     ebe:	e8 94       	clt
     ec0:	42 30       	cpi	r20, 0x02	; 2
     ec2:	c4 f0       	brlt	.+48     	; 0xef4 <itoa+0x3a>
     ec4:	45 32       	cpi	r20, 0x25	; 37
     ec6:	b4 f4       	brge	.+44     	; 0xef4 <itoa+0x3a>
     ec8:	4a 30       	cpi	r20, 0x0A	; 10
     eca:	29 f4       	brne	.+10     	; 0xed6 <itoa+0x1c>
     ecc:	97 fb       	bst	r25, 7
     ece:	1e f4       	brtc	.+6      	; 0xed6 <itoa+0x1c>
     ed0:	90 95       	com	r25
     ed2:	81 95       	neg	r24
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	64 2f       	mov	r22, r20
     ed8:	77 27       	eor	r23, r23
     eda:	0e 94 fd 07 	call	0xffa	; 0xffa <__udivmodhi4>
     ede:	80 5d       	subi	r24, 0xD0	; 208
     ee0:	8a 33       	cpi	r24, 0x3A	; 58
     ee2:	0c f0       	brlt	.+2      	; 0xee6 <itoa+0x2c>
     ee4:	89 5d       	subi	r24, 0xD9	; 217
     ee6:	81 93       	st	Z+, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	a1 f7       	brne	.-24     	; 0xed6 <itoa+0x1c>
     eee:	16 f4       	brtc	.+4      	; 0xef4 <itoa+0x3a>
     ef0:	5d e2       	ldi	r21, 0x2D	; 45
     ef2:	51 93       	st	Z+, r21
     ef4:	10 82       	st	Z, r1
     ef6:	c9 01       	movw	r24, r18
     ef8:	0c 94 ed 07 	jmp	0xfda	; 0xfda <strrev>

00000efc <ltoa>:
     efc:	fa 01       	movw	r30, r20
     efe:	cf 93       	push	r28
     f00:	ff 93       	push	r31
     f02:	ef 93       	push	r30
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	44 f1       	brlt	.+80     	; 0xf58 <ltoa+0x5c>
     f08:	25 32       	cpi	r18, 0x25	; 37
     f0a:	34 f5       	brge	.+76     	; 0xf58 <ltoa+0x5c>
     f0c:	c2 2f       	mov	r28, r18
     f0e:	e8 94       	clt
     f10:	ca 30       	cpi	r28, 0x0A	; 10
     f12:	49 f4       	brne	.+18     	; 0xf26 <ltoa+0x2a>
     f14:	97 fb       	bst	r25, 7
     f16:	3e f4       	brtc	.+14     	; 0xf26 <ltoa+0x2a>
     f18:	90 95       	com	r25
     f1a:	80 95       	com	r24
     f1c:	70 95       	com	r23
     f1e:	61 95       	neg	r22
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	2c 2f       	mov	r18, r28
     f28:	33 27       	eor	r19, r19
     f2a:	44 27       	eor	r20, r20
     f2c:	55 27       	eor	r21, r21
     f2e:	ff 93       	push	r31
     f30:	ef 93       	push	r30
     f32:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodsi4>
     f36:	ef 91       	pop	r30
     f38:	ff 91       	pop	r31
     f3a:	60 5d       	subi	r22, 0xD0	; 208
     f3c:	6a 33       	cpi	r22, 0x3A	; 58
     f3e:	0c f0       	brlt	.+2      	; 0xf42 <ltoa+0x46>
     f40:	69 5d       	subi	r22, 0xD9	; 217
     f42:	61 93       	st	Z+, r22
     f44:	b9 01       	movw	r22, r18
     f46:	ca 01       	movw	r24, r20
     f48:	60 50       	subi	r22, 0x00	; 0
     f4a:	70 40       	sbci	r23, 0x00	; 0
     f4c:	80 40       	sbci	r24, 0x00	; 0
     f4e:	90 40       	sbci	r25, 0x00	; 0
     f50:	51 f7       	brne	.-44     	; 0xf26 <ltoa+0x2a>
     f52:	16 f4       	brtc	.+4      	; 0xf58 <ltoa+0x5c>
     f54:	cd e2       	ldi	r28, 0x2D	; 45
     f56:	c1 93       	st	Z+, r28
     f58:	10 82       	st	Z, r1
     f5a:	8f 91       	pop	r24
     f5c:	9f 91       	pop	r25
     f5e:	cf 91       	pop	r28
     f60:	0c 94 ed 07 	jmp	0xfda	; 0xfda <strrev>

00000f64 <ultoa>:
     f64:	fa 01       	movw	r30, r20
     f66:	cf 93       	push	r28
     f68:	ff 93       	push	r31
     f6a:	ef 93       	push	r30
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	cc f0       	brlt	.+50     	; 0xfa2 <ultoa+0x3e>
     f70:	25 32       	cpi	r18, 0x25	; 37
     f72:	bc f4       	brge	.+46     	; 0xfa2 <ultoa+0x3e>
     f74:	c2 2f       	mov	r28, r18
     f76:	2c 2f       	mov	r18, r28
     f78:	33 27       	eor	r19, r19
     f7a:	44 27       	eor	r20, r20
     f7c:	55 27       	eor	r21, r21
     f7e:	ff 93       	push	r31
     f80:	ef 93       	push	r30
     f82:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodsi4>
     f86:	ef 91       	pop	r30
     f88:	ff 91       	pop	r31
     f8a:	60 5d       	subi	r22, 0xD0	; 208
     f8c:	6a 33       	cpi	r22, 0x3A	; 58
     f8e:	0c f0       	brlt	.+2      	; 0xf92 <ultoa+0x2e>
     f90:	69 5d       	subi	r22, 0xD9	; 217
     f92:	61 93       	st	Z+, r22
     f94:	b9 01       	movw	r22, r18
     f96:	ca 01       	movw	r24, r20
     f98:	60 50       	subi	r22, 0x00	; 0
     f9a:	70 40       	sbci	r23, 0x00	; 0
     f9c:	80 40       	sbci	r24, 0x00	; 0
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	51 f7       	brne	.-44     	; 0xf76 <ultoa+0x12>
     fa2:	10 82       	st	Z, r1
     fa4:	8f 91       	pop	r24
     fa6:	9f 91       	pop	r25
     fa8:	cf 91       	pop	r28
     faa:	0c 94 ed 07 	jmp	0xfda	; 0xfda <strrev>

00000fae <utoa>:
     fae:	fb 01       	movw	r30, r22
     fb0:	9f 01       	movw	r18, r30
     fb2:	42 30       	cpi	r20, 0x02	; 2
     fb4:	74 f0       	brlt	.+28     	; 0xfd2 <utoa+0x24>
     fb6:	45 32       	cpi	r20, 0x25	; 37
     fb8:	64 f4       	brge	.+24     	; 0xfd2 <utoa+0x24>
     fba:	64 2f       	mov	r22, r20
     fbc:	77 27       	eor	r23, r23
     fbe:	0e 94 fd 07 	call	0xffa	; 0xffa <__udivmodhi4>
     fc2:	80 5d       	subi	r24, 0xD0	; 208
     fc4:	8a 33       	cpi	r24, 0x3A	; 58
     fc6:	0c f0       	brlt	.+2      	; 0xfca <utoa+0x1c>
     fc8:	89 5d       	subi	r24, 0xD9	; 217
     fca:	81 93       	st	Z+, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	a1 f7       	brne	.-24     	; 0xfba <utoa+0xc>
     fd2:	10 82       	st	Z, r1
     fd4:	c9 01       	movw	r24, r18
     fd6:	0c 94 ed 07 	jmp	0xfda	; 0xfda <strrev>

00000fda <strrev>:
     fda:	dc 01       	movw	r26, r24
     fdc:	fc 01       	movw	r30, r24
     fde:	67 2f       	mov	r22, r23
     fe0:	71 91       	ld	r23, Z+
     fe2:	77 23       	and	r23, r23
     fe4:	e1 f7       	brne	.-8      	; 0xfde <strrev+0x4>
     fe6:	32 97       	sbiw	r30, 0x02	; 2
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <strrev+0x18>
     fea:	7c 91       	ld	r23, X
     fec:	6d 93       	st	X+, r22
     fee:	70 83       	st	Z, r23
     ff0:	62 91       	ld	r22, -Z
     ff2:	ae 17       	cp	r26, r30
     ff4:	bf 07       	cpc	r27, r31
     ff6:	c8 f3       	brcs	.-14     	; 0xfea <strrev+0x10>
     ff8:	08 95       	ret

00000ffa <__udivmodhi4>:
     ffa:	aa 1b       	sub	r26, r26
     ffc:	bb 1b       	sub	r27, r27
     ffe:	51 e1       	ldi	r21, 0x11	; 17
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <__udivmodhi4_ep>

00001002 <__udivmodhi4_loop>:
    1002:	aa 1f       	adc	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	a6 17       	cp	r26, r22
    1008:	b7 07       	cpc	r27, r23
    100a:	10 f0       	brcs	.+4      	; 0x1010 <__udivmodhi4_ep>
    100c:	a6 1b       	sub	r26, r22
    100e:	b7 0b       	sbc	r27, r23

00001010 <__udivmodhi4_ep>:
    1010:	88 1f       	adc	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	5a 95       	dec	r21
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__udivmodhi4_loop>
    1018:	80 95       	com	r24
    101a:	90 95       	com	r25
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	08 95       	ret

00001022 <__udivmodsi4>:
    1022:	a1 e2       	ldi	r26, 0x21	; 33
    1024:	1a 2e       	mov	r1, r26
    1026:	aa 1b       	sub	r26, r26
    1028:	bb 1b       	sub	r27, r27
    102a:	fd 01       	movw	r30, r26
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__udivmodsi4_ep>

0000102e <__udivmodsi4_loop>:
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ee 1f       	adc	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	a2 17       	cp	r26, r18
    1038:	b3 07       	cpc	r27, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__udivmodsi4_ep>
    1040:	a2 1b       	sub	r26, r18
    1042:	b3 0b       	sbc	r27, r19
    1044:	e4 0b       	sbc	r30, r20
    1046:	f5 0b       	sbc	r31, r21

00001048 <__udivmodsi4_ep>:
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a 94       	dec	r1
    1052:	69 f7       	brne	.-38     	; 0x102e <__udivmodsi4_loop>
    1054:	60 95       	com	r22
    1056:	70 95       	com	r23
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	bd 01       	movw	r22, r26
    1062:	cf 01       	movw	r24, r30
    1064:	08 95       	ret

00001066 <_exit>:
    1066:	f8 94       	cli

00001068 <__stop_program>:
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <__stop_program>
