
48MotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000396  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000090  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a3  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000160  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000355  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000198  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002c  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__vector_3>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e9       	ldi	r30, 0x96	; 150
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 32       	cpi	r26, 0x26	; 38
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	14 d1       	rcall	.+552    	; 0x280 <main>
  58:	9c c1       	rjmp	.+824    	; 0x392 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <__vector_3>:
 *
 *  \return void
 */
//!
ISR(PCINT0_vect)
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	2f 93       	push	r18
  68:	3f 93       	push	r19
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
  72:	df 93       	push	r29
  74:	cf 93       	push	r28
  76:	00 d0       	rcall	.+0      	; 0x78 <__vector_3+0x1c>
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  unsigned char *pTemp;
  fastTemp.word = ((PIN_HALL & hallMask)>>1);  // Read Hall, Mask Pins, shift to use as pointer offset
  7c:	83 e2       	ldi	r24, 0x23	; 35
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	90 81       	ld	r25, Z
  84:	8b 2d       	mov	r24, r11
  86:	89 23       	and	r24, r25
  88:	86 95       	lsr	r24
  8a:	88 2f       	mov	r24, r24
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	6c 01       	movw	r12, r24
//  Line below is desirable performance wise, but causes an internal error in compiler
//  fastTemp.LByte = (PIN_HALL & HALL_MASK)>>1;   // Read Hall, Mask Pins, shift to use as pointer offset

  pTemp = pDrvPattern + fastTemp.word;
  90:	97 01       	movw	r18, r14
  92:	c6 01       	movw	r24, r12
  94:	82 0f       	add	r24, r18
  96:	93 1f       	adc	r25, r19
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
//  TCCR0A = fastTemp.HByte; //Disable PWM outputs (and thereby close low side FET)
//  TCCR2A = fastTemp.HByte; //Disable PWM output (and thereby close low side FET)

  PORT_MC = *(pTemp);    //Change drive levels on high side
  9c:	8b e2       	ldi	r24, 0x2B	; 43
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	3a 81       	ldd	r19, Y+2	; 0x02
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18

  TCCR0A = *(pTemp + PATTERN_COM0_OFFSET);    // Reconfigure output compare operation for T0
  ac:	84 e4       	ldi	r24, 0x44	; 68
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	2a 5f       	subi	r18, 0xFA	; 250
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  TCCR2A = *(pTemp + PATTERN_COM2_OFFSET); // Reconfigure output compare operation for T2
  c0:	80 eb       	ldi	r24, 0xB0	; 176
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	29 81       	ldd	r18, Y+1	; 0x01
  c6:	3a 81       	ldd	r19, Y+2	; 0x02
  c8:	24 5f       	subi	r18, 0xF4	; 244
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	f9 01       	movw	r30, r18
  ce:	20 81       	ld	r18, Z
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  count--;
  d4:	8a 2d       	mov	r24, r10
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	a8 2e       	mov	r10, r24
}
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <Init_MC_pin_change_interrupt>:
 *  \param void
 *
 *  \return void
 */
static void Init_MC_pin_change_interrupt( void )
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
  PCMSK0 = (1<<PCINT1)|(1<<PCINT2)|(1<<PCINT3); //Enable pin change interrupt on PB1:3
 100:	8b e6       	ldi	r24, 0x6B	; 107
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2e e0       	ldi	r18, 0x0E	; 14
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
  PCICR = 1<<PCIE0;    // Enable pin change interrupt0 (PORTB)
 10a:	88 e6       	ldi	r24, 0x68	; 104
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
}
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <Get_ADC8>:
 *  \param channel Specify the ADMUX register settings to access the correct channel.
 *
 *  \return adcResult 8-bit result (high byte of AD convertion).
 */
unsigned char Get_ADC8(unsigned char muxSetting)
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	0f 92       	push	r0
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	89 83       	std	Y+1, r24	; 0x01
    ADMUX = muxSetting;
 126:	8c e7       	ldi	r24, 0x7C	; 124
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
    // Start AD conversion.
    ADCSRA |= (1 << ADSC);
 130:	8a e7       	ldi	r24, 0x7A	; 122
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2a e7       	ldi	r18, 0x7A	; 122
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 64       	ori	r18, 0x40	; 64
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
    // Wait for ADC conversion to complete.
    while ( ADCSRA & (1 << ADSC) );
 142:	00 00       	nop
 144:	8a e7       	ldi	r24, 0x7A	; 122
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 74       	andi	r24, 0x40	; 64
 152:	90 70       	andi	r25, 0x00	; 0
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	b1 f7       	brne	.-20     	; 0x144 <Get_ADC8+0x2a>
    return ADCH;
 158:	89 e7       	ldi	r24, 0x79	; 121
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
}
 160:	0f 90       	pop	r0
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <Init_MC_timers>:
 *  \param void
 *
 *  \return void
 */
static void Init_MC_timers( void )
{
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
  //Timer Counter 0. OCRA and OCRB used for motor
  TCCR0A = (1<<COM0A1)|(0<<COM0A0)|        // Clear OCRA on compare match
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	23 ea       	ldi	r18, 0xA3	; 163
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
           (1<<COM0B1)|(0<<COM0B0)|        // Clear OCRB on compare match
           (1<<WGM01)|(1<<WGM00);         // Fast PWM mode
  TCCR0B = (0<<FOC0A)|(0<<FOC0B)|
 17a:	85 e4       	ldi	r24, 0x45	; 69
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
           (0<<WGM02)|                     // Fast PWM mode
           (0<<CS02)|(0<<CS01)|(1<<CS00); // Prescaler = CLK/1

  //Timer Counter 2. OCRA and OCRB used for motor
  TCCR2A = (0<<COM2A1)|(0<<COM2A0)|        // OCRA not connected
 184:	80 eb       	ldi	r24, 0xB0	; 176
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	23 e2       	ldi	r18, 0x23	; 35
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
           (1<<COM2B1)|(0<<COM2B0)|        // Clear OCRB on compare match
           (1<<WGM01)|(1<<WGM00);         // Fast PWM mode
  TCCR2B = (0<<FOC2A)|(0<<FOC2B)|
 18e:	81 eb       	ldi	r24, 0xB1	; 177
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
           (0<<WGM22)|                     // Fast PWM mode
           (0<<CS22)|(0<<CS21)|(1<<CS20); // Prescaler = CLK/1

  // Synchronize timers
  TCNT0 = 0;
 198:	86 e4       	ldi	r24, 0x46	; 70
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	10 82       	st	Z, r1
  TCNT2 = 3;
 1a0:	82 eb       	ldi	r24, 0xB2	; 178
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18

  TIFR0 = TIFR0;    // Clear TC0 interrupt flags
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	25 e3       	ldi	r18, 0x35	; 53
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
  TIFR1 = TIFR1;    // Clear TC2 interrupt flags
 1ba:	86 e3       	ldi	r24, 0x36	; 54
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	26 e3       	ldi	r18, 0x36	; 54
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
}
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <Init_ADC>:
 *  \param void
 *
 *  \return void
 */
static void Init_ADC( void )
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
  ADCSRA = (1 << ADEN) | (1 << ADPS1); // Enable ADC, clock prescaler = 4
 1d8:	8a e7       	ldi	r24, 0x7A	; 122
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	22 e8       	ldi	r18, 0x82	; 130
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
}
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <Set_Speed>:
 *  \param speed Compare match value that defines PWM duty cycle.
 *
 *  \return void
 */
static void Set_Speed(unsigned char speed)
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	0f 92       	push	r0
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	89 83       	std	Y+1, r24	; 0x01
  TIFR0 = TIFR0;    // Clear TC0 interrupt flags
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	25 e3       	ldi	r18, 0x35	; 53
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	20 81       	ld	r18, Z
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
  while( !(TIFR0 & (1<<TOV0)));  // Wait for TOV to ensure that all registers are
 204:	00 00       	nop
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	81 70       	andi	r24, 0x01	; 1
 214:	90 70       	andi	r25, 0x00	; 0
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	b1 f3       	breq	.-20     	; 0x206 <Set_Speed+0x1e>
                            //  updated in the same timer cycle
  cli();
 21a:	f8 94       	cli
  OCR0A = speed;        // Change the duty cycle
 21c:	87 e4       	ldi	r24, 0x47	; 71
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
  OCR0B = speed;
 226:	88 e4       	ldi	r24, 0x48	; 72
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	29 81       	ldd	r18, Y+1	; 0x01
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
  OCR2B = speed;
 230:	84 eb       	ldi	r24, 0xB4	; 180
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	29 81       	ldd	r18, Y+1	; 0x01
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
  sei();
 23a:	78 94       	sei
}
 23c:	0f 90       	pop	r0
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <Set_Direction>:
 *  \param direction Direction is given as Clockwise or Counter Clockwise.
 *
 *  \return void
 */
static void Set_Direction(unsigned char direction)
{
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	0f 92       	push	r0
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	89 83       	std	Y+1, r24	; 0x01
  if(direction == CLOCKWISE)
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	49 f4       	brne	.+18     	; 0x268 <Set_Direction+0x24>
  {
    cli();        //Variable also used in interrupt and access most be protected
 256:	f8 94       	cli
    pDrvPattern = drvPatternsCW;   // Set dir to CW, by pointing to CW pattern
 258:	0f 2e       	mov	r0, r31
 25a:	f3 e1       	ldi	r31, 0x13	; 19
 25c:	ef 2e       	mov	r14, r31
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	ff 2e       	mov	r15, r31
 262:	f0 2d       	mov	r31, r0
    sei();
 264:	78 94       	sei
 266:	08 c0       	rjmp	.+16     	; 0x278 <Set_Direction+0x34>
  }
  else
  {
    cli();        //Variable also used in interrupt and access most be protected
 268:	f8 94       	cli
    pDrvPattern = drvPatternsCCW;   // Set dir to CCW, by pointing to CCW pattern
 26a:	0f 2e       	mov	r0, r31
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ef 2e       	mov	r14, r31
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	ff 2e       	mov	r15, r31
 274:	f0 2d       	mov	r31, r0
    sei();
 276:	78 94       	sei
  }
}
 278:	0f 90       	pop	r0
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <main>:
 *  \param void
 *
 *  \return void
 */
int main( void )
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	00 d0       	rcall	.+0      	; 0x286 <main+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <main+0x8>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
  unsigned char speed = 0;
 28c:	19 82       	std	Y+1, r1	; 0x01
  unsigned char setspeed = 0;
 28e:	1a 82       	std	Y+2, r1	; 0x02
  signed int current;
  MCUCR |= (1<<PUD);  // Disable all pull-ups
 290:	85 e5       	ldi	r24, 0x55	; 85
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	25 e5       	ldi	r18, 0x55	; 85
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
 29c:	20 61       	ori	r18, 0x10	; 16
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
  hallMask = HALL_MASK; // Initialize hallMask variable
 2a2:	0f 2e       	mov	r0, r31
 2a4:	fe e0       	ldi	r31, 0x0E	; 14
 2a6:	bf 2e       	mov	r11, r31
 2a8:	f0 2d       	mov	r31, r0
  //Set initial direction.
  Set_Direction( CLOCKWISE );
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	cb df       	rcall	.-106    	; 0x244 <Set_Direction>

  Init_MC_timers();
 2ae:	5c df       	rcall	.-328    	; 0x168 <Init_MC_timers>
  Init_MC_pin_change_interrupt();
 2b0:	23 df       	rcall	.-442    	; 0xf8 <Init_MC_pin_change_interrupt>
  Init_ADC();
 2b2:	8e df       	rcall	.-228    	; 0x1d0 <Init_ADC>

  DDR_HALL |= HALL_MASK;    //Lock HALL sensor by driving Hall lines
 2b4:	84 e2       	ldi	r24, 0x24	; 36
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	24 e2       	ldi	r18, 0x24	; 36
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	2e 60       	ori	r18, 0x0E	; 14
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
  PORT_HALL |= HALL_MASK;
 2c6:	85 e2       	ldi	r24, 0x25	; 37
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	25 e2       	ldi	r18, 0x25	; 37
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	2e 60       	ori	r18, 0x0E	; 14
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
  PORT_HALL &= ~HALL_MASK;  //Release HALL sensor lines and trigger PC interrupt
 2d8:	85 e2       	ldi	r24, 0x25	; 37
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	25 e2       	ldi	r18, 0x25	; 37
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f9 01       	movw	r30, r18
 2e2:	20 81       	ld	r18, Z
 2e4:	21 7f       	andi	r18, 0xF1	; 241
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
  DDR_HALL &= ~HALL_MASK;
 2ea:	84 e2       	ldi	r24, 0x24	; 36
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	24 e2       	ldi	r18, 0x24	; 36
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	f9 01       	movw	r30, r18
 2f4:	20 81       	ld	r18, Z
 2f6:	21 7f       	andi	r18, 0xF1	; 241
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
  sei();
 2fc:	78 94       	sei
  Set_Speed(speed);
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	73 df       	rcall	.-282    	; 0x1e8 <Set_Speed>
  DDR_MC = MC_MASK;        // Enable outputs
 302:	8a e2       	ldi	r24, 0x2A	; 42
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	2c ef       	ldi	r18, 0xFC	; 252
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18

  DDRC |= (1<<PC1);
 30c:	87 e2       	ldi	r24, 0x27	; 39
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	27 e2       	ldi	r18, 0x27	; 39
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	22 60       	ori	r18, 0x02	; 2
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
  for(;;) {
    // Get shunt voltage (current measurement)
    current = Get_ADC8(ADC_MUX_SHUNT_H);
 31e:	84 e2       	ldi	r24, 0x24	; 36
 320:	fc de       	rcall	.-520    	; 0x11a <Get_ADC8>
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9c 83       	std	Y+4, r25	; 0x04
 328:	8b 83       	std	Y+3, r24	; 0x03
    // If current consumption is too high, limit current
    if (current > MAX_CURRENT_ADC )
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	8c 30       	cpi	r24, 0x0C	; 12
 330:	91 05       	cpc	r25, r1
 332:	84 f0       	brlt	.+32     	; 0x354 <__stack+0x55>
    {
      PORTC &= ~(1<<OVERCURRENT_PIN);   //Turn on over-current LED (active low)
 334:	88 e2       	ldi	r24, 0x28	; 40
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	28 e2       	ldi	r18, 0x28	; 40
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	f9 01       	movw	r30, r18
 33e:	20 81       	ld	r18, Z
 340:	2d 7f       	andi	r18, 0xFD	; 253
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
      if( speed >= 2 )
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	00 f1       	brcs	.+64     	; 0x38c <__stack+0x8d>
      {
        speed -= 2; // Slow down if too fast.
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	82 50       	subi	r24, 0x02	; 2
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	1c c0       	rjmp	.+56     	; 0x38c <__stack+0x8d>
      }
    }
    else
    {
      PORTC |= (1<<OVERCURRENT_PIN); // Turn off over-current LED (active low)
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	28 e2       	ldi	r18, 0x28	; 40
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	20 81       	ld	r18, Z
 360:	22 60       	ori	r18, 0x02	; 2
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
      // Get speed reference voltage (Assumes 2.5V to be maximum analog input,
      // multiplied by 2 to convert to PWM range).
      setspeed = Get_ADC8(ADC_MUX_SPEED_REF)*2;
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	d8 de       	rcall	.-592    	; 0x11a <Get_ADC8>
 36a:	88 0f       	add	r24, r24
 36c:	8a 83       	std	Y+2, r24	; 0x02
      // Approach speed set point.
      if( setspeed > speed )
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	89 17       	cp	r24, r25
 374:	20 f4       	brcc	.+8      	; 0x37e <__stack+0x7f>
      {
        ++speed;
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	07 c0       	rjmp	.+14     	; 0x38c <__stack+0x8d>
      }
      else
      {
        if( setspeed < speed )
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	98 17       	cp	r25, r24
 384:	18 f4       	brcc	.+6      	; 0x38c <__stack+0x8d>
        {
          --speed;
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	89 83       	std	Y+1, r24	; 0x01
        }
      }
    }

    Set_Speed(speed);
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	2c df       	rcall	.-424    	; 0x1e8 <Set_Speed>
  }
 390:	c6 cf       	rjmp	.-116    	; 0x31e <__stack+0x1f>

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
