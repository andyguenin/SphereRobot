
48MotorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002a74  00002b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00002b18  2**0
                  ALLOC
  3 .stab         00000ef4  00000000  00000000  00002b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000281  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ae  00000000  00000000  00003e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002824  00000000  00000000  000041bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001010  00000000  00000000  000069df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002351  00000000  00000000  000079ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00009d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000758  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a79  00000000  00000000  0000a818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000613  00000000  00000000  0000b291  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_10>
      2c:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__vector_11>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      ac:	ce 08       	sbc	r12, r14
      ae:	c1 08       	sbc	r12, r1
      b0:	b4 08       	sbc	r11, r4
      b2:	a7 08       	sbc	r10, r7
      b4:	9a 08       	sbc	r9, r10
      b6:	8d 08       	sbc	r8, r13
      b8:	80 08       	sbc	r8, r0
      ba:	73 08       	sbc	r7, r3
      bc:	66 08       	sbc	r6, r6
      be:	59 08       	sbc	r5, r9
      c0:	4c 08       	sbc	r4, r12
      c2:	3f 08       	sbc	r3, r15
      c4:	32 08       	sbc	r3, r2
      c6:	25 08       	sbc	r2, r5
      c8:	18 08       	sbc	r1, r8
      ca:	0b 08       	sbc	r0, r11
      cc:	fe 07       	cpc	r31, r30
      ce:	f1 07       	cpc	r31, r17
      d0:	e4 07       	cpc	r30, r20
      d2:	d7 07       	cpc	r29, r23
      d4:	ca 07       	cpc	r28, r26
      d6:	bd 07       	cpc	r27, r29
      d8:	b0 07       	cpc	r27, r16
      da:	a3 07       	cpc	r26, r19
      dc:	96 07       	cpc	r25, r22
      de:	89 07       	cpc	r24, r25
      e0:	7c 07       	cpc	r23, r28
      e2:	6f 07       	cpc	r22, r31
      e4:	62 07       	cpc	r22, r18
      e6:	55 07       	cpc	r21, r21
      e8:	48 07       	cpc	r20, r24
      ea:	3b 07       	cpc	r19, r27
      ec:	2e 07       	cpc	r18, r30
      ee:	21 07       	cpc	r18, r17
      f0:	14 07       	cpc	r17, r20
      f2:	07 07       	cpc	r16, r23
      f4:	fa 06       	cpc	r15, r26
      f6:	ed 06       	cpc	r14, r29
      f8:	e0 06       	cpc	r14, r16
      fa:	d3 06       	cpc	r13, r19
      fc:	c6 06       	cpc	r12, r22
      fe:	b9 06       	cpc	r11, r25
     100:	ac 06       	cpc	r10, r28
     102:	9f 06       	cpc	r9, r31
     104:	92 06       	cpc	r9, r18
     106:	85 06       	cpc	r8, r21
     108:	78 06       	cpc	r7, r24
     10a:	6b 06       	cpc	r6, r27
     10c:	5e 06       	cpc	r5, r30
     10e:	51 06       	cpc	r5, r17
     110:	44 06       	cpc	r4, r20
     112:	37 06       	cpc	r3, r23
     114:	2a 06       	cpc	r2, r26
     116:	1d 06       	cpc	r1, r29
     118:	10 06       	cpc	r1, r16
     11a:	03 06       	cpc	r0, r19
     11c:	f6 05       	cpc	r31, r6
     11e:	e9 05       	cpc	r30, r9
     120:	dc 05       	cpc	r29, r12
     122:	cf 05       	cpc	r28, r15
     124:	c2 05       	cpc	r28, r2
     126:	b5 05       	cpc	r27, r5
     128:	a8 05       	cpc	r26, r8
     12a:	9b 05       	cpc	r25, r11
     12c:	8e 05       	cpc	r24, r14

0000012e <endpoint_config_table>:
     12e:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000138 <device_descriptor>:
     138:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     148:	03 01                                               ..

0000014a <config1_descriptor>:
     14a:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15a:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16a:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17a:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18a:	40 00 00                                            @..

0000018d <string0>:
     18d:	04 03 09 04                                         ....

00000191 <string1>:
     191:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1a1:	65 00 00 00                                         e...

000001a5 <string2>:
     1a5:	06 03 4d 00 32 00 00 00                             ..M.2...

000001ad <string3>:
     1ad:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001b7 <descriptor_list>:
     1b7:	00 01 00 00 38 01 12 00 02 00 00 4a 01 43 00 03     ....8......J.C..
     1c7:	00 00 8d 01 04 01 03 09 04 91 01 12 02 03 09 04     ................
     1d7:	a5 01 06 03 03 09 04 ad 01 08 00                    ...........

000001e2 <__ctors_end>:
     1e2:	11 24       	eor	r1, r1
     1e4:	1f be       	out	0x3f, r1	; 63
     1e6:	cf ef       	ldi	r28, 0xFF	; 255
     1e8:	da e0       	ldi	r29, 0x0A	; 10
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
     1ee:	11 e0       	ldi	r17, 0x01	; 1
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	e4 e7       	ldi	r30, 0x74	; 116
     1f6:	fa e2       	ldi	r31, 0x2A	; 42
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x10>
     1fa:	05 90       	lpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	a0 31       	cpi	r26, 0x10	; 16
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0xc>

00000204 <__do_clear_bss>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a0 e1       	ldi	r26, 0x10	; 16
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	a4 31       	cpi	r26, 0x14	; 20
     210:	b1 07       	cpc	r27, r17
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 10 01 	call	0x220	; 0x220 <main>
     218:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
#define showlights

void init();

int main(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	0f 92       	push	r0
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	init();
     22a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <init>
	while(1)
	{
		
		while(!m_usb_rx_available());
     22e:	00 00       	nop
     230:	0e 94 c8 03 	call	0x790	; 0x790 <m_usb_rx_available>
     234:	88 23       	and	r24, r24
     236:	e1 f3       	breq	.-8      	; 0x230 <main+0x10>
		char rx = m_usb_rx_char();
     238:	0e 94 7d 03 	call	0x6fa	; 0x6fa <m_usb_rx_char>
     23c:	89 83       	std	Y+1, r24	; 0x01
		switch(rx)
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	91 05       	cpc	r25, r1
     248:	09 f4       	brne	.+2      	; 0x24c <main+0x2c>
     24a:	3f c0       	rjmp	.+126    	; 0x2ca <main+0xaa>
     24c:	83 30       	cpi	r24, 0x03	; 3
     24e:	91 05       	cpc	r25, r1
     250:	29 f0       	breq	.+10     	; 0x25c <main+0x3c>
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	91 05       	cpc	r25, r1
     256:	09 f4       	brne	.+2      	; 0x25a <main+0x3a>
     258:	6f c0       	rjmp	.+222    	; 0x338 <main+0x118>
				#ifdef showlights
				m_green(OFF);
				m_red(ON);
				#endif
			default:
				break;
     25a:	a5 c0       	rjmp	.+330    	; 0x3a6 <main+0x186>
		while(!m_usb_rx_available());
		char rx = m_usb_rx_char();
		switch(rx)
		{
			case 3:
				m_green(OFF);
     25c:	8d e2       	ldi	r24, 0x2D	; 45
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	2d e2       	ldi	r18, 0x2D	; 45
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	24 60       	ori	r18, 0x04	; 4
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
     26e:	8e e2       	ldi	r24, 0x2E	; 46
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	2e e2       	ldi	r18, 0x2E	; 46
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	24 60       	ori	r18, 0x04	; 4
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
				m_red(OFF);
     280:	8d e2       	ldi	r24, 0x2D	; 45
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	2d e2       	ldi	r18, 0x2D	; 45
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	20 64       	ori	r18, 0x40	; 64
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
     292:	8e e2       	ldi	r24, 0x2E	; 46
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	2e e2       	ldi	r18, 0x2E	; 46
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	20 64       	ori	r18, 0x40	; 64
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
				clear(PORTB, 2);
     2a4:	85 e2       	ldi	r24, 0x25	; 37
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	25 e2       	ldi	r18, 0x25	; 37
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	2b 7f       	andi	r18, 0xFB	; 251
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
				clear(PORTB, 3);
     2b6:	85 e2       	ldi	r24, 0x25	; 37
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	25 e2       	ldi	r18, 0x25	; 37
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	20 81       	ld	r18, Z
     2c2:	27 7f       	andi	r18, 0xF7	; 247
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
				break;
     2c8:	6e c0       	rjmp	.+220    	; 0x3a6 <main+0x186>
			case 2:
				clear(PORTB, 2);
     2ca:	85 e2       	ldi	r24, 0x25	; 37
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	25 e2       	ldi	r18, 0x25	; 37
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	2b 7f       	andi	r18, 0xFB	; 251
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
				set(PORTB,3);
     2dc:	85 e2       	ldi	r24, 0x25	; 37
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e2       	ldi	r18, 0x25	; 37
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	28 60       	ori	r18, 0x08	; 8
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
				#ifdef showlights
				m_red(OFF);
     2ee:	8d e2       	ldi	r24, 0x2D	; 45
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	2d e2       	ldi	r18, 0x2D	; 45
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	20 64       	ori	r18, 0x40	; 64
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	8e e2       	ldi	r24, 0x2E	; 46
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2e e2       	ldi	r18, 0x2E	; 46
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	20 64       	ori	r18, 0x40	; 64
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
				m_green(ON);
     312:	8d e2       	ldi	r24, 0x2D	; 45
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2d e2       	ldi	r18, 0x2D	; 45
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	24 60       	ori	r18, 0x04	; 4
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
     324:	8e e2       	ldi	r24, 0x2E	; 46
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	2e e2       	ldi	r18, 0x2E	; 46
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	2b 7f       	andi	r18, 0xFB	; 251
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
				#endif
				break;
     336:	37 c0       	rjmp	.+110    	; 0x3a6 <main+0x186>
			case 1:
				set(PORTB, 2);
     338:	85 e2       	ldi	r24, 0x25	; 37
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	25 e2       	ldi	r18, 0x25	; 37
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	24 60       	ori	r18, 0x04	; 4
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
				clear(PORTB,3);
     34a:	85 e2       	ldi	r24, 0x25	; 37
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	25 e2       	ldi	r18, 0x25	; 37
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	f9 01       	movw	r30, r18
     354:	20 81       	ld	r18, Z
     356:	27 7f       	andi	r18, 0xF7	; 247
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
				#ifdef showlights
				m_green(OFF);
     35c:	8d e2       	ldi	r24, 0x2D	; 45
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	2d e2       	ldi	r18, 0x2D	; 45
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	24 60       	ori	r18, 0x04	; 4
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
     36e:	8e e2       	ldi	r24, 0x2E	; 46
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	2e e2       	ldi	r18, 0x2E	; 46
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	f9 01       	movw	r30, r18
     378:	20 81       	ld	r18, Z
     37a:	24 60       	ori	r18, 0x04	; 4
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
				m_red(ON);
     380:	8d e2       	ldi	r24, 0x2D	; 45
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	2d e2       	ldi	r18, 0x2D	; 45
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 64       	ori	r18, 0x40	; 64
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
     392:	8e e2       	ldi	r24, 0x2E	; 46
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2e e2       	ldi	r18, 0x2E	; 46
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	2f 7b       	andi	r18, 0xBF	; 191
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
				#endif
			default:
				break;
     3a4:	00 00       	nop
		}				
	}
     3a6:	00 00       	nop
{
	init();
	while(1)
	{
		
		while(!m_usb_rx_available());
     3a8:	43 cf       	rjmp	.-378    	; 0x230 <main+0x10>

000003aa <init>:
		}				
	}
}

void init()
{
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	6e 97       	sbiw	r28, 0x1e	; 30
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	20 e8       	ldi	r18, 0x80	; 128
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
     3cc:	81 e6       	ldi	r24, 0x61	; 97
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	10 82       	st	Z, r1
	
	m_usb_init();
     3d4:	0e 94 40 03 	call	0x680	; 0x680 <m_usb_init>
	while(!m_usb_isconnected());
     3d8:	00 00       	nop
     3da:	0e 94 74 03 	call	0x6e8	; 0x6e8 <m_usb_isconnected>
     3de:	88 23       	and	r24, r24
     3e0:	e1 f3       	breq	.-8      	; 0x3da <init+0x30>
	for(int i=0;i<4;i++)
     3e2:	1a 82       	std	Y+2, r1	; 0x02
     3e4:	19 82       	std	Y+1, r1	; 0x01
     3e6:	29 c1       	rjmp	.+594    	; 0x63a <init+0x290>
	{
		m_green(ON);
     3e8:	8d e2       	ldi	r24, 0x2D	; 45
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	2d e2       	ldi	r18, 0x2D	; 45
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	24 60       	ori	r18, 0x04	; 4
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
     3fa:	8e e2       	ldi	r24, 0x2E	; 46
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	2e e2       	ldi	r18, 0x2E	; 46
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	2b 7f       	andi	r18, 0xFB	; 251
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	a8 ec       	ldi	r26, 0xC8	; 200
     412:	b2 e4       	ldi	r27, 0x42	; 66
     414:	8b 83       	std	Y+3, r24	; 0x03
     416:	9c 83       	std	Y+4, r25	; 0x04
     418:	ad 83       	std	Y+5, r26	; 0x05
     41a:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     41c:	6b 81       	ldd	r22, Y+3	; 0x03
     41e:	7c 81       	ldd	r23, Y+4	; 0x04
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	9e 81       	ldd	r25, Y+6	; 0x06
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	4a e7       	ldi	r20, 0x7A	; 122
     42a:	53 e4       	ldi	r21, 0x43	; 67
     42c:	0e 94 bf 10 	call	0x217e	; 0x217e <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	8f 83       	std	Y+7, r24	; 0x07
     436:	98 87       	std	Y+8, r25	; 0x08
     438:	a9 87       	std	Y+9, r26	; 0x09
     43a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     43c:	11 e0       	ldi	r17, 0x01	; 1
     43e:	6f 81       	ldd	r22, Y+7	; 0x07
     440:	78 85       	ldd	r23, Y+8	; 0x08
     442:	89 85       	ldd	r24, Y+9	; 0x09
     444:	9a 85       	ldd	r25, Y+10	; 0x0a
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e8       	ldi	r20, 0x80	; 128
     44c:	5f e3       	ldi	r21, 0x3F	; 63
     44e:	0e 94 19 12 	call	0x2432	; 0x2432 <__ltsf2>
     452:	88 23       	and	r24, r24
     454:	0c f0       	brlt	.+2      	; 0x458 <init+0xae>
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	11 23       	and	r17, r17
     45a:	29 f0       	breq	.+10     	; 0x466 <init+0xbc>
		__ticks = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	9c 87       	std	Y+12, r25	; 0x0c
     462:	8b 87       	std	Y+11, r24	; 0x0b
     464:	46 c0       	rjmp	.+140    	; 0x4f2 <init+0x148>
	else if (__tmp > 65535)
     466:	11 e0       	ldi	r17, 0x01	; 1
     468:	6f 81       	ldd	r22, Y+7	; 0x07
     46a:	78 85       	ldd	r23, Y+8	; 0x08
     46c:	89 85       	ldd	r24, Y+9	; 0x09
     46e:	9a 85       	ldd	r25, Y+10	; 0x0a
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f e7       	ldi	r20, 0x7F	; 127
     476:	57 e4       	ldi	r21, 0x47	; 71
     478:	0e 94 b9 11 	call	0x2372	; 0x2372 <__gtsf2>
     47c:	18 16       	cp	r1, r24
     47e:	0c f0       	brlt	.+2      	; 0x482 <init+0xd8>
     480:	10 e0       	ldi	r17, 0x00	; 0
     482:	11 23       	and	r17, r17
     484:	61 f1       	breq	.+88     	; 0x4de <init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     486:	6b 81       	ldd	r22, Y+3	; 0x03
     488:	7c 81       	ldd	r23, Y+4	; 0x04
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e2       	ldi	r20, 0x20	; 32
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	0e 94 bf 10 	call	0x217e	; 0x217e <__mulsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	bc 01       	movw	r22, r24
     4a0:	cd 01       	movw	r24, r26
     4a2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fixunssfsi>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	9c 87       	std	Y+12, r25	; 0x0c
     4ac:	8b 87       	std	Y+11, r24	; 0x0b
     4ae:	12 c0       	rjmp	.+36     	; 0x4d4 <init+0x12a>
     4b0:	89 e1       	ldi	r24, 0x19	; 25
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	9e 87       	std	Y+14, r25	; 0x0e
     4b6:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     4bc:	8c 01       	movw	r16, r24
     4be:	c8 01       	movw	r24, r16
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <init+0x116>
     4c4:	8c 01       	movw	r16, r24
     4c6:	1e 87       	std	Y+14, r17	; 0x0e
     4c8:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     4cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	9c 87       	std	Y+12, r25	; 0x0c
     4d2:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	51 f7       	brne	.-44     	; 0x4b0 <init+0x106>
     4dc:	17 c0       	rjmp	.+46     	; 0x50c <init+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4de:	6f 81       	ldd	r22, Y+7	; 0x07
     4e0:	78 85       	ldd	r23, Y+8	; 0x08
     4e2:	89 85       	ldd	r24, Y+9	; 0x09
     4e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fixunssfsi>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	9c 87       	std	Y+12, r25	; 0x0c
     4f0:	8b 87       	std	Y+11, r24	; 0x0b
     4f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     4f6:	98 8b       	std	Y+16, r25	; 0x10
     4f8:	8f 87       	std	Y+15, r24	; 0x0f
     4fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     4fc:	98 89       	ldd	r25, Y+16	; 0x10
     4fe:	8c 01       	movw	r16, r24
     500:	f8 01       	movw	r30, r16
     502:	31 97       	sbiw	r30, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <init+0x158>
     506:	8f 01       	movw	r16, r30
     508:	18 8b       	std	Y+16, r17	; 0x10
     50a:	0f 87       	std	Y+15, r16	; 0x0f
		m_wait(100);
		m_green(OFF);
     50c:	8d e2       	ldi	r24, 0x2D	; 45
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2d e2       	ldi	r18, 0x2D	; 45
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	24 60       	ori	r18, 0x04	; 4
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
     51e:	8e e2       	ldi	r24, 0x2E	; 46
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	2e e2       	ldi	r18, 0x2E	; 46
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	24 60       	ori	r18, 0x04	; 4
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a8 ec       	ldi	r26, 0xC8	; 200
     536:	b2 e4       	ldi	r27, 0x42	; 66
     538:	89 8b       	std	Y+17, r24	; 0x11
     53a:	9a 8b       	std	Y+18, r25	; 0x12
     53c:	ab 8b       	std	Y+19, r26	; 0x13
     53e:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     540:	69 89       	ldd	r22, Y+17	; 0x11
     542:	7a 89       	ldd	r23, Y+18	; 0x12
     544:	8b 89       	ldd	r24, Y+19	; 0x13
     546:	9c 89       	ldd	r25, Y+20	; 0x14
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4a e7       	ldi	r20, 0x7A	; 122
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	0e 94 bf 10 	call	0x217e	; 0x217e <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	8d 8b       	std	Y+21, r24	; 0x15
     55a:	9e 8b       	std	Y+22, r25	; 0x16
     55c:	af 8b       	std	Y+23, r26	; 0x17
     55e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	6d 89       	ldd	r22, Y+21	; 0x15
     564:	7e 89       	ldd	r23, Y+22	; 0x16
     566:	8f 89       	ldd	r24, Y+23	; 0x17
     568:	98 8d       	ldd	r25, Y+24	; 0x18
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	0e 94 19 12 	call	0x2432	; 0x2432 <__ltsf2>
     576:	88 23       	and	r24, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <init+0x1d2>
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	11 23       	and	r17, r17
     57e:	29 f0       	breq	.+10     	; 0x58a <init+0x1e0>
		__ticks = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9a 8f       	std	Y+26, r25	; 0x1a
     586:	89 8f       	std	Y+25, r24	; 0x19
     588:	46 c0       	rjmp	.+140    	; 0x616 <init+0x26c>
	else if (__tmp > 65535)
     58a:	11 e0       	ldi	r17, 0x01	; 1
     58c:	6d 89       	ldd	r22, Y+21	; 0x15
     58e:	7e 89       	ldd	r23, Y+22	; 0x16
     590:	8f 89       	ldd	r24, Y+23	; 0x17
     592:	98 8d       	ldd	r25, Y+24	; 0x18
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 b9 11 	call	0x2372	; 0x2372 <__gtsf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <init+0x1fc>
     5a4:	10 e0       	ldi	r17, 0x00	; 0
     5a6:	11 23       	and	r17, r17
     5a8:	61 f1       	breq	.+88     	; 0x602 <init+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	69 89       	ldd	r22, Y+17	; 0x11
     5ac:	7a 89       	ldd	r23, Y+18	; 0x12
     5ae:	8b 89       	ldd	r24, Y+19	; 0x13
     5b0:	9c 89       	ldd	r25, Y+20	; 0x14
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e2       	ldi	r20, 0x20	; 32
     5b8:	51 e4       	ldi	r21, 0x41	; 65
     5ba:	0e 94 bf 10 	call	0x217e	; 0x217e <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9a 8f       	std	Y+26, r25	; 0x1a
     5d0:	89 8f       	std	Y+25, r24	; 0x19
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <init+0x24e>
     5d4:	89 e1       	ldi	r24, 0x19	; 25
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 8f       	std	Y+28, r25	; 0x1c
     5da:	8b 8f       	std	Y+27, r24	; 0x1b
     5dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5de:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5e0:	8c 01       	movw	r16, r24
     5e2:	c8 01       	movw	r24, r16
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <init+0x23a>
     5e8:	8c 01       	movw	r16, r24
     5ea:	1c 8f       	std	Y+28, r17	; 0x1c
     5ec:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ee:	89 8d       	ldd	r24, Y+25	; 0x19
     5f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	9a 8f       	std	Y+26, r25	; 0x1a
     5f6:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f8:	89 8d       	ldd	r24, Y+25	; 0x19
     5fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	51 f7       	brne	.-44     	; 0x5d4 <init+0x22a>
     600:	17 c0       	rjmp	.+46     	; 0x630 <init+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     602:	6d 89       	ldd	r22, Y+21	; 0x15
     604:	7e 89       	ldd	r23, Y+22	; 0x16
     606:	8f 89       	ldd	r24, Y+23	; 0x17
     608:	98 8d       	ldd	r25, Y+24	; 0x18
     60a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fixunssfsi>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	9a 8f       	std	Y+26, r25	; 0x1a
     614:	89 8f       	std	Y+25, r24	; 0x19
     616:	89 8d       	ldd	r24, Y+25	; 0x19
     618:	9a 8d       	ldd	r25, Y+26	; 0x1a
     61a:	9e 8f       	std	Y+30, r25	; 0x1e
     61c:	8d 8f       	std	Y+29, r24	; 0x1d
     61e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     620:	9e 8d       	ldd	r25, Y+30	; 0x1e
     622:	8c 01       	movw	r16, r24
     624:	f8 01       	movw	r30, r16
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <init+0x27c>
     62a:	8f 01       	movw	r16, r30
     62c:	1e 8f       	std	Y+30, r17	; 0x1e
     62e:	0d 8f       	std	Y+29, r16	; 0x1d
{
	m_clockdivide(0);
	
	m_usb_init();
	while(!m_usb_isconnected());
	for(int i=0;i<4;i++)
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	84 30       	cpi	r24, 0x04	; 4
     640:	91 05       	cpc	r25, r1
     642:	0c f4       	brge	.+2      	; 0x646 <init+0x29c>
     644:	d1 ce       	rjmp	.-606    	; 0x3e8 <init+0x3e>
		m_wait(100);
		m_green(OFF);
		m_wait(100);
	}
	
	set(DDRB, 2);
     646:	84 e2       	ldi	r24, 0x24	; 36
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	24 e2       	ldi	r18, 0x24	; 36
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	24 60       	ori	r18, 0x04	; 4
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
	set(DDRB, 3);
     658:	84 e2       	ldi	r24, 0x24	; 36
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	24 e2       	ldi	r18, 0x24	; 36
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	28 60       	ori	r18, 0x08	; 8
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
	
	
	
     66a:	6e 96       	adiw	r28, 0x1e	; 30
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <m_usb_init>:
 *
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	HW_CONFIG();
     688:	87 ed       	ldi	r24, 0xD7	; 215
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
        USB_FREEZE();				// enable USB
     692:	88 ed       	ldi	r24, 0xD8	; 216
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	20 ea       	ldi	r18, 0xA0	; 160
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     69c:	89 e4       	ldi	r24, 0x49	; 73
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	22 e1       	ldi	r18, 0x12	; 18
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     6a6:	00 00       	nop
     6a8:	89 e4       	ldi	r24, 0x49	; 73
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	81 70       	andi	r24, 0x01	; 1
     6b6:	90 70       	andi	r25, 0x00	; 0
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	b1 f3       	breq	.-20     	; 0x6a8 <m_usb_init+0x28>
        USB_CONFIG();				// start USB clock
     6bc:	88 ed       	ldi	r24, 0xD8	; 216
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	20 e9       	ldi	r18, 0x90	; 144
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
        UDCON = 0;				// enable attach resistor
     6c6:	80 ee       	ldi	r24, 0xE0	; 224
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	10 82       	st	Z, r1
	usb_configuration = 0;
     6ce:	10 92 10 01 	sts	0x0110, r1
	cdc_line_rtsdtr = 0;
     6d2:	10 92 13 01 	sts	0x0113, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     6d6:	82 ee       	ldi	r24, 0xE2	; 226
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2c e0       	ldi	r18, 0x0C	; 12
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	sei();
     6e0:	78 94       	sei
}
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
	return (char)usb_configuration;
     6f0:	80 91 10 01 	lds	r24, 0x0110
}
     6f4:	cf 91       	pop	r28
     6f6:	df 91       	pop	r29
     6f8:	08 95       	ret

000006fa <m_usb_rx_char>:

// get the next character, or -1 if nothing received
char m_usb_rx_char(void)
{
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	00 d0       	rcall	.+0      	; 0x700 <m_usb_rx_char+0x6>
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     704:	8f e5       	ldi	r24, 0x5F	; 95
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
     70c:	89 83       	std	Y+1, r24	; 0x01
	cli();
     70e:	f8 94       	cli
	if (!usb_configuration) {
     710:	80 91 10 01 	lds	r24, 0x0110
     714:	88 23       	and	r24, r24
     716:	39 f4       	brne	.+14     	; 0x726 <m_usb_rx_char+0x2c>
		SREG = intr_state;
     718:	8f e5       	ldi	r24, 0x5F	; 95
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	29 81       	ldd	r18, Y+1	; 0x01
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
		return -1;
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	30 c0       	rjmp	.+96     	; 0x786 <m_usb_rx_char+0x8c>
	}
	UENUM = CDC_RX_ENDPOINT;
     726:	89 ee       	ldi	r24, 0xE9	; 233
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	23 e0       	ldi	r18, 0x03	; 3
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
     730:	88 ee       	ldi	r24, 0xE8	; 232
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	80 72       	andi	r24, 0x20	; 32
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	39 f4       	brne	.+14     	; 0x752 <m_usb_rx_char+0x58>
		// no data in buffer
		SREG = intr_state;
     744:	8f e5       	ldi	r24, 0x5F	; 95
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
		return -1;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	1a c0       	rjmp	.+52     	; 0x786 <m_usb_rx_char+0x8c>
	}
	// take one byte out of the buffer
	c = UEDATX;
     752:	81 ef       	ldi	r24, 0xF1	; 241
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	8a 83       	std	Y+2, r24	; 0x02
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     75c:	88 ee       	ldi	r24, 0xE8	; 232
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	fc 01       	movw	r30, r24
     762:	80 81       	ld	r24, Z
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	80 72       	andi	r24, 0x20	; 32
     76a:	90 70       	andi	r25, 0x00	; 0
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	29 f4       	brne	.+10     	; 0x77a <m_usb_rx_char+0x80>
     770:	88 ee       	ldi	r24, 0xE8	; 232
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2b e6       	ldi	r18, 0x6B	; 107
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
	SREG = intr_state;
     77a:	8f e5       	ldi	r24, 0x5F	; 95
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
	return (char)c;
     784:	8a 81       	ldd	r24, Y+2	; 0x02
}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <m_usb_rx_available>:

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	00 d0       	rcall	.+0      	; 0x796 <m_usb_rx_available+0x6>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
	uint8_t n=0, intr_state;
     79a:	19 82       	std	Y+1, r1	; 0x01

	intr_state = SREG;
     79c:	8f e5       	ldi	r24, 0x5F	; 95
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	8a 83       	std	Y+2, r24	; 0x02
	cli();
     7a6:	f8 94       	cli
	if (usb_configuration) {
     7a8:	80 91 10 01 	lds	r24, 0x0110
     7ac:	88 23       	and	r24, r24
     7ae:	51 f0       	breq	.+20     	; 0x7c4 <m_usb_rx_available+0x34>
		UENUM = CDC_RX_ENDPOINT;
     7b0:	89 ee       	ldi	r24, 0xE9	; 233
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	23 e0       	ldi	r18, 0x03	; 3
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
		n = UEBCLX;
     7ba:	82 ef       	ldi	r24, 0xF2	; 242
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	fc 01       	movw	r30, r24
     7c0:	80 81       	ld	r24, Z
     7c2:	89 83       	std	Y+1, r24	; 0x01
	}
	SREG = intr_state;
     7c4:	8f e5       	ldi	r24, 0x5F	; 95
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	2a 81       	ldd	r18, Y+2	; 0x02
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
	return (unsigned char)n;
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <m_usb_rx_flush>:

// discard any buffered input
void m_usb_rx_flush(void)
{
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	0f 92       	push	r0
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t intr_state;

	if (usb_configuration) {
     7e4:	80 91 10 01 	lds	r24, 0x0110
     7e8:	88 23       	and	r24, r24
     7ea:	01 f1       	breq	.+64     	; 0x82c <m_usb_rx_flush+0x52>
		intr_state = SREG;
     7ec:	8f e5       	ldi	r24, 0x5F	; 95
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	89 83       	std	Y+1, r24	; 0x01
		cli();
     7f6:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     7f8:	89 ee       	ldi	r24, 0xE9	; 233
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	23 e0       	ldi	r18, 0x03	; 3
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
		while ((UEINTX & (1<<RWAL))) {
     802:	05 c0       	rjmp	.+10     	; 0x80e <m_usb_rx_flush+0x34>
			UEINTX = 0x6B; 
     804:	88 ee       	ldi	r24, 0xE8	; 232
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2b e6       	ldi	r18, 0x6B	; 107
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     80e:	88 ee       	ldi	r24, 0xE8	; 232
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	fc 01       	movw	r30, r24
     814:	80 81       	ld	r24, Z
     816:	88 2f       	mov	r24, r24
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	80 72       	andi	r24, 0x20	; 32
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	89 f7       	brne	.-30     	; 0x804 <m_usb_rx_flush+0x2a>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     822:	8f e5       	ldi	r24, 0x5F	; 95
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	29 81       	ldd	r18, Y+1	; 0x01
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
	}
}
     82c:	0f 90       	pop	r0
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <m_usb_tx_char>:

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	00 d0       	rcall	.+0      	; 0x83a <m_usb_tx_char+0x6>
     83a:	0f 92       	push	r0
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     842:	80 91 10 01 	lds	r24, 0x0110
     846:	88 23       	and	r24, r24
     848:	11 f4       	brne	.+4      	; 0x84e <m_usb_tx_char+0x1a>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	73 c0       	rjmp	.+230    	; 0x934 <m_usb_tx_char+0x100>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     84e:	8f e5       	ldi	r24, 0x5F	; 95
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	80 81       	ld	r24, Z
     856:	89 83       	std	Y+1, r24	; 0x01
	cli();
     858:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     85a:	89 ee       	ldi	r24, 0xE9	; 233
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	24 e0       	ldi	r18, 0x04	; 4
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     864:	80 91 12 01 	lds	r24, 0x0112
     868:	88 23       	and	r24, r24
     86a:	99 f0       	breq	.+38     	; 0x892 <m_usb_tx_char+0x5e>
		if (!(UEINTX & (1<<RWAL))) {
     86c:	88 ee       	ldi	r24, 0xE8	; 232
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	80 72       	andi	r24, 0x20	; 32
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	00 97       	sbiw	r24, 0x00	; 0
     87e:	39 f4       	brne	.+14     	; 0x88e <m_usb_tx_char+0x5a>
			SREG = intr_state;
     880:	8f e5       	ldi	r24, 0x5F	; 95
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	29 81       	ldd	r18, Y+1	; 0x01
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
			return -1;
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	53 c0       	rjmp	.+166    	; 0x934 <m_usb_tx_char+0x100>
		}
		transmit_previous_timeout = 0;
     88e:	10 92 12 01 	sts	0x0112, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     892:	84 ee       	ldi	r24, 0xE4	; 228
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	80 81       	ld	r24, Z
     89a:	87 5e       	subi	r24, 0xE7	; 231
     89c:	8a 83       	std	Y+2, r24	; 0x02
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     89e:	88 ee       	ldi	r24, 0xE8	; 232
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	80 72       	andi	r24, 0x20	; 32
     8ac:	90 70       	andi	r25, 0x00	; 0
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	81 f0       	breq	.+32     	; 0x8d2 <m_usb_tx_char+0x9e>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     8b2:	81 ef       	ldi	r24, 0xF1	; 241
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2b 81       	ldd	r18, Y+3	; 0x03
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     8bc:	88 ee       	ldi	r24, 0xE8	; 232
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	80 72       	andi	r24, 0x20	; 32
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	21 f1       	breq	.+72     	; 0x918 <m_usb_tx_char+0xe4>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <m_usb_tx_char+0xee>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     8d2:	8f e5       	ldi	r24, 0x5F	; 95
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	29 81       	ldd	r18, Y+1	; 0x01
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     8dc:	84 ee       	ldi	r24, 0xE4	; 228
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	90 81       	ld	r25, Z
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	98 17       	cp	r25, r24
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <m_usb_tx_char+0xc0>
			transmit_previous_timeout = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 12 01 	sts	0x0112, r24
			return -1;
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	20 c0       	rjmp	.+64     	; 0x934 <m_usb_tx_char+0x100>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     8f4:	80 91 10 01 	lds	r24, 0x0110
     8f8:	88 23       	and	r24, r24
     8fa:	11 f4       	brne	.+4      	; 0x900 <m_usb_tx_char+0xcc>
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	1a c0       	rjmp	.+52     	; 0x934 <m_usb_tx_char+0x100>
		// get ready to try checking again
		intr_state = SREG;
     900:	8f e5       	ldi	r24, 0x5F	; 95
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	80 81       	ld	r24, Z
     908:	89 83       	std	Y+1, r24	; 0x01
		cli();
     90a:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     90c:	89 ee       	ldi	r24, 0xE9	; 233
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	24 e0       	ldi	r18, 0x04	; 4
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
	}
     916:	c3 cf       	rjmp	.-122    	; 0x89e <m_usb_tx_char+0x6a>
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     918:	88 ee       	ldi	r24, 0xE8	; 232
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	2a e3       	ldi	r18, 0x3A	; 58
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	80 93 11 01 	sts	0x0111, r24
	SREG = intr_state;
     928:	8f e5       	ldi	r24, 0x5F	; 95
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	29 81       	ldd	r18, Y+1	; 0x01
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
	return 0;
     932:	80 e0       	ldi	r24, 0x00	; 0
}
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	08 95       	ret

00000940 <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	00 d0       	rcall	.+0      	; 0x946 <usb_serial_putchar_nowait+0x6>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t intr_state;

	if (!usb_configuration) return -1;
     94c:	80 91 10 01 	lds	r24, 0x0110
     950:	88 23       	and	r24, r24
     952:	11 f4       	brne	.+4      	; 0x958 <usb_serial_putchar_nowait+0x18>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	39 c0       	rjmp	.+114    	; 0x9ca <usb_serial_putchar_nowait+0x8a>
	intr_state = SREG;
     958:	8f e5       	ldi	r24, 0x5F	; 95
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	89 83       	std	Y+1, r24	; 0x01
	cli();
     962:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     964:	89 ee       	ldi	r24, 0xE9	; 233
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	24 e0       	ldi	r18, 0x04	; 4
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
     96e:	88 ee       	ldi	r24, 0xE8	; 232
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	fc 01       	movw	r30, r24
     974:	80 81       	ld	r24, Z
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	80 72       	andi	r24, 0x20	; 32
     97c:	90 70       	andi	r25, 0x00	; 0
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	39 f4       	brne	.+14     	; 0x990 <usb_serial_putchar_nowait+0x50>
		// buffer is full
		SREG = intr_state;
     982:	8f e5       	ldi	r24, 0x5F	; 95
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	29 81       	ldd	r18, Y+1	; 0x01
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
		return -1;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	1d c0       	rjmp	.+58     	; 0x9ca <usb_serial_putchar_nowait+0x8a>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     990:	81 ef       	ldi	r24, 0xF1	; 241
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2a 81       	ldd	r18, Y+2	; 0x02
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     99a:	88 ee       	ldi	r24, 0xE8	; 232
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	80 72       	andi	r24, 0x20	; 32
     9a8:	90 70       	andi	r25, 0x00	; 0
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	29 f4       	brne	.+10     	; 0x9b8 <usb_serial_putchar_nowait+0x78>
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	2a e3       	ldi	r18, 0x3A	; 58
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	80 93 11 01 	sts	0x0111, r24
	SREG = intr_state;
     9be:	8f e5       	ldi	r24, 0x5F	; 95
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	29 81       	ldd	r18, Y+1	; 0x01
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
	return 0;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
}
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	27 97       	sbiw	r28, 0x07	; 7
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	9d 83       	std	Y+5, r25	; 0x05
     9ea:	8c 83       	std	Y+4, r24	; 0x04
     9ec:	7f 83       	std	Y+7, r23	; 0x07
     9ee:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     9f0:	80 91 10 01 	lds	r24, 0x0110
     9f4:	88 23       	and	r24, r24
     9f6:	11 f4       	brne	.+4      	; 0x9fc <usb_serial_write+0x28>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	ed c3       	rjmp	.+2010   	; 0x11d6 <__stack+0x6d7>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     9fc:	8f e5       	ldi	r24, 0x5F	; 95
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	89 83       	std	Y+1, r24	; 0x01
	cli();
     a06:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     a08:	89 ee       	ldi	r24, 0xE9	; 233
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	24 e0       	ldi	r18, 0x04	; 4
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     a12:	80 91 12 01 	lds	r24, 0x0112
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <usb_serial_write+0x48>
     a1a:	d2 c3       	rjmp	.+1956   	; 0x11c0 <__stack+0x6c1>
		if (!(UEINTX & (1<<RWAL))) {
     a1c:	88 ee       	ldi	r24, 0xE8	; 232
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	fc 01       	movw	r30, r24
     a22:	80 81       	ld	r24, Z
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	80 72       	andi	r24, 0x20	; 32
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	39 f4       	brne	.+14     	; 0xa3e <usb_serial_write+0x6a>
			SREG = intr_state;
     a30:	8f e5       	ldi	r24, 0x5F	; 95
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	29 81       	ldd	r18, Y+1	; 0x01
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
			return -1;
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	cc c3       	rjmp	.+1944   	; 0x11d6 <__stack+0x6d7>
		}
		transmit_previous_timeout = 0;
     a3e:	10 92 12 01 	sts	0x0112, r1
	}
	// each iteration of this loop transmits a packet
	while (size) {
     a42:	be c3       	rjmp	.+1916   	; 0x11c0 <__stack+0x6c1>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     a44:	84 ee       	ldi	r24, 0xE4	; 228
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	fc 01       	movw	r30, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	87 5e       	subi	r24, 0xE7	; 231
     a4e:	8b 83       	std	Y+3, r24	; 0x03
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     a50:	88 ee       	ldi	r24, 0xE8	; 232
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	80 72       	andi	r24, 0x20	; 32
     a5e:	90 70       	andi	r25, 0x00	; 0
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	91 f0       	breq	.+36     	; 0xa88 <usb_serial_write+0xb4>
			cli();
			UENUM = CDC_TX_ENDPOINT;
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     a64:	82 ef       	ldi	r24, 0xF2	; 242
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	90 e4       	ldi	r25, 0x40	; 64
     a6e:	f9 2f       	mov	r31, r25
     a70:	f8 1b       	sub	r31, r24
     a72:	8f 2f       	mov	r24, r31
     a74:	8a 83       	std	Y+2, r24	; 0x02
		if (write_size > size) write_size = size;
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	28 2f       	mov	r18, r24
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	8e 81       	ldd	r24, Y+6	; 0x06
     a7e:	9f 81       	ldd	r25, Y+7	; 0x07
     a80:	82 17       	cp	r24, r18
     a82:	93 07       	cpc	r25, r19
     a84:	20 f1       	brcs	.+72     	; 0xace <usb_serial_write+0xfa>
     a86:	25 c0       	rjmp	.+74     	; 0xad2 <usb_serial_write+0xfe>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
     a88:	8f e5       	ldi	r24, 0x5F	; 95
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     a92:	84 ee       	ldi	r24, 0xE4	; 228
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	fc 01       	movw	r30, r24
     a98:	90 81       	ld	r25, Z
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	98 17       	cp	r25, r24
     a9e:	29 f4       	brne	.+10     	; 0xaaa <usb_serial_write+0xd6>
				transmit_previous_timeout = 1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 12 01 	sts	0x0112, r24
				return -1;
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	96 c3       	rjmp	.+1836   	; 0x11d6 <__stack+0x6d7>
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     aaa:	80 91 10 01 	lds	r24, 0x0110
     aae:	88 23       	and	r24, r24
     ab0:	11 f4       	brne	.+4      	; 0xab6 <usb_serial_write+0xe2>
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	90 c3       	rjmp	.+1824   	; 0x11d6 <__stack+0x6d7>
			// get ready to try checking again
			intr_state = SREG;
     ab6:	8f e5       	ldi	r24, 0x5F	; 95
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	89 83       	std	Y+1, r24	; 0x01
			cli();
     ac0:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     ac2:	89 ee       	ldi	r24, 0xE9	; 233
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	24 e0       	ldi	r18, 0x04	; 4
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
		}
     acc:	c1 cf       	rjmp	.-126    	; 0xa50 <usb_serial_write+0x7c>

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
     ace:	8e 81       	ldd	r24, Y+6	; 0x06
     ad0:	8a 83       	std	Y+2, r24	; 0x02
		size -= write_size;
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	2e 81       	ldd	r18, Y+6	; 0x06
     ada:	3f 81       	ldd	r19, Y+7	; 0x07
     adc:	a9 01       	movw	r20, r18
     ade:	48 1b       	sub	r20, r24
     ae0:	59 0b       	sbc	r21, r25
     ae2:	ca 01       	movw	r24, r20
     ae4:	9f 83       	std	Y+7, r25	; 0x07
     ae6:	8e 83       	std	Y+6, r24	; 0x06

		// write the packet
		switch (write_size) {
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	aa 27       	eor	r26, r26
     af0:	97 fd       	sbrc	r25, 7
     af2:	a0 95       	com	r26
     af4:	ba 2f       	mov	r27, r26
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	20 e4       	ldi	r18, 0x40	; 64
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	84 1b       	sub	r24, r20
     b00:	95 0b       	sbc	r25, r21
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	08 f4       	brcc	.+2      	; 0xb0a <__stack+0xb>
     b08:	3c c3       	rjmp	.+1656   	; 0x1182 <__stack+0x683>
     b0a:	8a 5a       	subi	r24, 0xAA	; 170
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	05 90       	lpm	r0, Z+
     b16:	f4 91       	lpm	r31, Z+
     b18:	e0 2d       	mov	r30, r0
     b1a:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     b1c:	81 ef       	ldi	r24, 0xF1	; 241
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	2c 81       	ldd	r18, Y+4	; 0x04
     b22:	3d 81       	ldd	r19, Y+5	; 0x05
     b24:	f9 01       	movw	r30, r18
     b26:	20 81       	ld	r18, Z
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
     b2c:	8c 81       	ldd	r24, Y+4	; 0x04
     b2e:	9d 81       	ldd	r25, Y+5	; 0x05
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9d 83       	std	Y+5, r25	; 0x05
     b34:	8c 83       	std	Y+4, r24	; 0x04
			case 63: UEDATX = *buffer++;
     b36:	81 ef       	ldi	r24, 0xF1	; 241
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	2c 81       	ldd	r18, Y+4	; 0x04
     b3c:	3d 81       	ldd	r19, Y+5	; 0x05
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	9d 81       	ldd	r25, Y+5	; 0x05
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	9d 83       	std	Y+5, r25	; 0x05
     b4e:	8c 83       	std	Y+4, r24	; 0x04
			case 62: UEDATX = *buffer++;
     b50:	81 ef       	ldi	r24, 0xF1	; 241
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	2c 81       	ldd	r18, Y+4	; 0x04
     b56:	3d 81       	ldd	r19, Y+5	; 0x05
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
     b60:	8c 81       	ldd	r24, Y+4	; 0x04
     b62:	9d 81       	ldd	r25, Y+5	; 0x05
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	9d 83       	std	Y+5, r25	; 0x05
     b68:	8c 83       	std	Y+4, r24	; 0x04
			case 61: UEDATX = *buffer++;
     b6a:	81 ef       	ldi	r24, 0xF1	; 241
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	2c 81       	ldd	r18, Y+4	; 0x04
     b70:	3d 81       	ldd	r19, Y+5	; 0x05
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	9d 83       	std	Y+5, r25	; 0x05
     b82:	8c 83       	std	Y+4, r24	; 0x04
			case 60: UEDATX = *buffer++;
     b84:	81 ef       	ldi	r24, 0xF1	; 241
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	2c 81       	ldd	r18, Y+4	; 0x04
     b8a:	3d 81       	ldd	r19, Y+5	; 0x05
     b8c:	f9 01       	movw	r30, r18
     b8e:	20 81       	ld	r18, Z
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9d 83       	std	Y+5, r25	; 0x05
     b9c:	8c 83       	std	Y+4, r24	; 0x04
			case 59: UEDATX = *buffer++;
     b9e:	81 ef       	ldi	r24, 0xF1	; 241
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	2c 81       	ldd	r18, Y+4	; 0x04
     ba4:	3d 81       	ldd	r19, Y+5	; 0x05
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	9d 81       	ldd	r25, Y+5	; 0x05
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	9d 83       	std	Y+5, r25	; 0x05
     bb6:	8c 83       	std	Y+4, r24	; 0x04
			case 58: UEDATX = *buffer++;
     bb8:	81 ef       	ldi	r24, 0xF1	; 241
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2c 81       	ldd	r18, Y+4	; 0x04
     bbe:	3d 81       	ldd	r19, Y+5	; 0x05
     bc0:	f9 01       	movw	r30, r18
     bc2:	20 81       	ld	r18, Z
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	9d 81       	ldd	r25, Y+5	; 0x05
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	9d 83       	std	Y+5, r25	; 0x05
     bd0:	8c 83       	std	Y+4, r24	; 0x04
			case 57: UEDATX = *buffer++;
     bd2:	81 ef       	ldi	r24, 0xF1	; 241
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	2c 81       	ldd	r18, Y+4	; 0x04
     bd8:	3d 81       	ldd	r19, Y+5	; 0x05
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	9d 81       	ldd	r25, Y+5	; 0x05
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9d 83       	std	Y+5, r25	; 0x05
     bea:	8c 83       	std	Y+4, r24	; 0x04
			case 56: UEDATX = *buffer++;
     bec:	81 ef       	ldi	r24, 0xF1	; 241
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	2c 81       	ldd	r18, Y+4	; 0x04
     bf2:	3d 81       	ldd	r19, Y+5	; 0x05
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	9d 83       	std	Y+5, r25	; 0x05
     c04:	8c 83       	std	Y+4, r24	; 0x04
			case 55: UEDATX = *buffer++;
     c06:	81 ef       	ldi	r24, 0xF1	; 241
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	3d 81       	ldd	r19, Y+5	; 0x05
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	9d 81       	ldd	r25, Y+5	; 0x05
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	9d 83       	std	Y+5, r25	; 0x05
     c1e:	8c 83       	std	Y+4, r24	; 0x04
			case 54: UEDATX = *buffer++;
     c20:	81 ef       	ldi	r24, 0xF1	; 241
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	2c 81       	ldd	r18, Y+4	; 0x04
     c26:	3d 81       	ldd	r19, Y+5	; 0x05
     c28:	f9 01       	movw	r30, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
     c30:	8c 81       	ldd	r24, Y+4	; 0x04
     c32:	9d 81       	ldd	r25, Y+5	; 0x05
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	9d 83       	std	Y+5, r25	; 0x05
     c38:	8c 83       	std	Y+4, r24	; 0x04
			case 53: UEDATX = *buffer++;
     c3a:	81 ef       	ldi	r24, 0xF1	; 241
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2c 81       	ldd	r18, Y+4	; 0x04
     c40:	3d 81       	ldd	r19, Y+5	; 0x05
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	9d 83       	std	Y+5, r25	; 0x05
     c52:	8c 83       	std	Y+4, r24	; 0x04
			case 52: UEDATX = *buffer++;
     c54:	81 ef       	ldi	r24, 0xF1	; 241
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	2c 81       	ldd	r18, Y+4	; 0x04
     c5a:	3d 81       	ldd	r19, Y+5	; 0x05
     c5c:	f9 01       	movw	r30, r18
     c5e:	20 81       	ld	r18, Z
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
     c64:	8c 81       	ldd	r24, Y+4	; 0x04
     c66:	9d 81       	ldd	r25, Y+5	; 0x05
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	9d 83       	std	Y+5, r25	; 0x05
     c6c:	8c 83       	std	Y+4, r24	; 0x04
			case 51: UEDATX = *buffer++;
     c6e:	81 ef       	ldi	r24, 0xF1	; 241
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9d 83       	std	Y+5, r25	; 0x05
     c86:	8c 83       	std	Y+4, r24	; 0x04
			case 50: UEDATX = *buffer++;
     c88:	81 ef       	ldi	r24, 0xF1	; 241
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	2c 81       	ldd	r18, Y+4	; 0x04
     c8e:	3d 81       	ldd	r19, Y+5	; 0x05
     c90:	f9 01       	movw	r30, r18
     c92:	20 81       	ld	r18, Z
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	9d 83       	std	Y+5, r25	; 0x05
     ca0:	8c 83       	std	Y+4, r24	; 0x04
			case 49: UEDATX = *buffer++;
     ca2:	81 ef       	ldi	r24, 0xF1	; 241
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	2c 81       	ldd	r18, Y+4	; 0x04
     ca8:	3d 81       	ldd	r19, Y+5	; 0x05
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	9d 83       	std	Y+5, r25	; 0x05
     cba:	8c 83       	std	Y+4, r24	; 0x04
			case 48: UEDATX = *buffer++;
     cbc:	81 ef       	ldi	r24, 0xF1	; 241
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	2c 81       	ldd	r18, Y+4	; 0x04
     cc2:	3d 81       	ldd	r19, Y+5	; 0x05
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9d 83       	std	Y+5, r25	; 0x05
     cd4:	8c 83       	std	Y+4, r24	; 0x04
			case 47: UEDATX = *buffer++;
     cd6:	81 ef       	ldi	r24, 0xF1	; 241
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	9d 83       	std	Y+5, r25	; 0x05
     cee:	8c 83       	std	Y+4, r24	; 0x04
			case 46: UEDATX = *buffer++;
     cf0:	81 ef       	ldi	r24, 0xF1	; 241
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2c 81       	ldd	r18, Y+4	; 0x04
     cf6:	3d 81       	ldd	r19, Y+5	; 0x05
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	9d 83       	std	Y+5, r25	; 0x05
     d08:	8c 83       	std	Y+4, r24	; 0x04
			case 45: UEDATX = *buffer++;
     d0a:	81 ef       	ldi	r24, 0xF1	; 241
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	2c 81       	ldd	r18, Y+4	; 0x04
     d10:	3d 81       	ldd	r19, Y+5	; 0x05
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	9d 83       	std	Y+5, r25	; 0x05
     d22:	8c 83       	std	Y+4, r24	; 0x04
			case 44: UEDATX = *buffer++;
     d24:	81 ef       	ldi	r24, 0xF1	; 241
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	2c 81       	ldd	r18, Y+4	; 0x04
     d2a:	3d 81       	ldd	r19, Y+5	; 0x05
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	9d 83       	std	Y+5, r25	; 0x05
     d3c:	8c 83       	std	Y+4, r24	; 0x04
			case 43: UEDATX = *buffer++;
     d3e:	81 ef       	ldi	r24, 0xF1	; 241
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	2c 81       	ldd	r18, Y+4	; 0x04
     d44:	3d 81       	ldd	r19, Y+5	; 0x05
     d46:	f9 01       	movw	r30, r18
     d48:	20 81       	ld	r18, Z
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	9d 83       	std	Y+5, r25	; 0x05
     d56:	8c 83       	std	Y+4, r24	; 0x04
			case 42: UEDATX = *buffer++;
     d58:	81 ef       	ldi	r24, 0xF1	; 241
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	9d 83       	std	Y+5, r25	; 0x05
     d70:	8c 83       	std	Y+4, r24	; 0x04
			case 41: UEDATX = *buffer++;
     d72:	81 ef       	ldi	r24, 0xF1	; 241
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	2c 81       	ldd	r18, Y+4	; 0x04
     d78:	3d 81       	ldd	r19, Y+5	; 0x05
     d7a:	f9 01       	movw	r30, r18
     d7c:	20 81       	ld	r18, Z
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	9d 83       	std	Y+5, r25	; 0x05
     d8a:	8c 83       	std	Y+4, r24	; 0x04
			case 40: UEDATX = *buffer++;
     d8c:	81 ef       	ldi	r24, 0xF1	; 241
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	2c 81       	ldd	r18, Y+4	; 0x04
     d92:	3d 81       	ldd	r19, Y+5	; 0x05
     d94:	f9 01       	movw	r30, r18
     d96:	20 81       	ld	r18, Z
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9d 83       	std	Y+5, r25	; 0x05
     da4:	8c 83       	std	Y+4, r24	; 0x04
			case 39: UEDATX = *buffer++;
     da6:	81 ef       	ldi	r24, 0xF1	; 241
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	9d 83       	std	Y+5, r25	; 0x05
     dbe:	8c 83       	std	Y+4, r24	; 0x04
			case 38: UEDATX = *buffer++;
     dc0:	81 ef       	ldi	r24, 0xF1	; 241
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	f9 01       	movw	r30, r18
     dca:	20 81       	ld	r18, Z
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	9d 81       	ldd	r25, Y+5	; 0x05
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	9d 83       	std	Y+5, r25	; 0x05
     dd8:	8c 83       	std	Y+4, r24	; 0x04
			case 37: UEDATX = *buffer++;
     dda:	81 ef       	ldi	r24, 0xF1	; 241
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	f9 01       	movw	r30, r18
     de4:	20 81       	ld	r18, Z
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	9d 83       	std	Y+5, r25	; 0x05
     df2:	8c 83       	std	Y+4, r24	; 0x04
			case 36: UEDATX = *buffer++;
     df4:	81 ef       	ldi	r24, 0xF1	; 241
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	2c 81       	ldd	r18, Y+4	; 0x04
     dfa:	3d 81       	ldd	r19, Y+5	; 0x05
     dfc:	f9 01       	movw	r30, r18
     dfe:	20 81       	ld	r18, Z
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	9d 83       	std	Y+5, r25	; 0x05
     e0c:	8c 83       	std	Y+4, r24	; 0x04
			case 35: UEDATX = *buffer++;
     e0e:	81 ef       	ldi	r24, 0xF1	; 241
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	f9 01       	movw	r30, r18
     e18:	20 81       	ld	r18, Z
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	9d 83       	std	Y+5, r25	; 0x05
     e26:	8c 83       	std	Y+4, r24	; 0x04
			case 34: UEDATX = *buffer++;
     e28:	81 ef       	ldi	r24, 0xF1	; 241
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2c 81       	ldd	r18, Y+4	; 0x04
     e2e:	3d 81       	ldd	r19, Y+5	; 0x05
     e30:	f9 01       	movw	r30, r18
     e32:	20 81       	ld	r18, Z
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	9d 83       	std	Y+5, r25	; 0x05
     e40:	8c 83       	std	Y+4, r24	; 0x04
			case 33: UEDATX = *buffer++;
     e42:	81 ef       	ldi	r24, 0xF1	; 241
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	2c 81       	ldd	r18, Y+4	; 0x04
     e48:	3d 81       	ldd	r19, Y+5	; 0x05
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	9d 83       	std	Y+5, r25	; 0x05
     e5a:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     e5c:	81 ef       	ldi	r24, 0xF1	; 241
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	2c 81       	ldd	r18, Y+4	; 0x04
     e62:	3d 81       	ldd	r19, Y+5	; 0x05
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	fc 01       	movw	r30, r24
     e6a:	20 83       	st	Z, r18
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	9d 83       	std	Y+5, r25	; 0x05
     e74:	8c 83       	std	Y+4, r24	; 0x04
			case 31: UEDATX = *buffer++;
     e76:	81 ef       	ldi	r24, 0xF1	; 241
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2c 81       	ldd	r18, Y+4	; 0x04
     e7c:	3d 81       	ldd	r19, Y+5	; 0x05
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	9d 83       	std	Y+5, r25	; 0x05
     e8e:	8c 83       	std	Y+4, r24	; 0x04
			case 30: UEDATX = *buffer++;
     e90:	81 ef       	ldi	r24, 0xF1	; 241
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	9d 83       	std	Y+5, r25	; 0x05
     ea8:	8c 83       	std	Y+4, r24	; 0x04
			case 29: UEDATX = *buffer++;
     eaa:	81 ef       	ldi	r24, 0xF1	; 241
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	9d 83       	std	Y+5, r25	; 0x05
     ec2:	8c 83       	std	Y+4, r24	; 0x04
			case 28: UEDATX = *buffer++;
     ec4:	81 ef       	ldi	r24, 0xF1	; 241
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	f9 01       	movw	r30, r18
     ece:	20 81       	ld	r18, Z
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	9d 83       	std	Y+5, r25	; 0x05
     edc:	8c 83       	std	Y+4, r24	; 0x04
			case 27: UEDATX = *buffer++;
     ede:	81 ef       	ldi	r24, 0xF1	; 241
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	9d 83       	std	Y+5, r25	; 0x05
     ef6:	8c 83       	std	Y+4, r24	; 0x04
			case 26: UEDATX = *buffer++;
     ef8:	81 ef       	ldi	r24, 0xF1	; 241
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9d 83       	std	Y+5, r25	; 0x05
     f10:	8c 83       	std	Y+4, r24	; 0x04
			case 25: UEDATX = *buffer++;
     f12:	81 ef       	ldi	r24, 0xF1	; 241
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	f9 01       	movw	r30, r18
     f1c:	20 81       	ld	r18, Z
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9d 83       	std	Y+5, r25	; 0x05
     f2a:	8c 83       	std	Y+4, r24	; 0x04
			case 24: UEDATX = *buffer++;
     f2c:	81 ef       	ldi	r24, 0xF1	; 241
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2c 81       	ldd	r18, Y+4	; 0x04
     f32:	3d 81       	ldd	r19, Y+5	; 0x05
     f34:	f9 01       	movw	r30, r18
     f36:	20 81       	ld	r18, Z
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	9d 81       	ldd	r25, Y+5	; 0x05
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9d 83       	std	Y+5, r25	; 0x05
     f44:	8c 83       	std	Y+4, r24	; 0x04
			case 23: UEDATX = *buffer++;
     f46:	81 ef       	ldi	r24, 0xF1	; 241
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2c 81       	ldd	r18, Y+4	; 0x04
     f4c:	3d 81       	ldd	r19, Y+5	; 0x05
     f4e:	f9 01       	movw	r30, r18
     f50:	20 81       	ld	r18, Z
     f52:	fc 01       	movw	r30, r24
     f54:	20 83       	st	Z, r18
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	9d 81       	ldd	r25, Y+5	; 0x05
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9d 83       	std	Y+5, r25	; 0x05
     f5e:	8c 83       	std	Y+4, r24	; 0x04
			case 22: UEDATX = *buffer++;
     f60:	81 ef       	ldi	r24, 0xF1	; 241
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9d 83       	std	Y+5, r25	; 0x05
     f78:	8c 83       	std	Y+4, r24	; 0x04
			case 21: UEDATX = *buffer++;
     f7a:	81 ef       	ldi	r24, 0xF1	; 241
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	9d 83       	std	Y+5, r25	; 0x05
     f92:	8c 83       	std	Y+4, r24	; 0x04
			case 20: UEDATX = *buffer++;
     f94:	81 ef       	ldi	r24, 0xF1	; 241
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	f9 01       	movw	r30, r18
     f9e:	20 81       	ld	r18, Z
     fa0:	fc 01       	movw	r30, r24
     fa2:	20 83       	st	Z, r18
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	9d 83       	std	Y+5, r25	; 0x05
     fac:	8c 83       	std	Y+4, r24	; 0x04
			case 19: UEDATX = *buffer++;
     fae:	81 ef       	ldi	r24, 0xF1	; 241
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	f9 01       	movw	r30, r18
     fb8:	20 81       	ld	r18, Z
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9d 83       	std	Y+5, r25	; 0x05
     fc6:	8c 83       	std	Y+4, r24	; 0x04
			case 18: UEDATX = *buffer++;
     fc8:	81 ef       	ldi	r24, 0xF1	; 241
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	2c 81       	ldd	r18, Y+4	; 0x04
     fce:	3d 81       	ldd	r19, Y+5	; 0x05
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9d 83       	std	Y+5, r25	; 0x05
     fe0:	8c 83       	std	Y+4, r24	; 0x04
			case 17: UEDATX = *buffer++;
     fe2:	81 ef       	ldi	r24, 0xF1	; 241
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	2c 81       	ldd	r18, Y+4	; 0x04
     fe8:	3d 81       	ldd	r19, Y+5	; 0x05
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	9d 83       	std	Y+5, r25	; 0x05
     ffa:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     ffc:	81 ef       	ldi	r24, 0xF1	; 241
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	f9 01       	movw	r30, r18
    1006:	20 81       	ld	r18, Z
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	9d 83       	std	Y+5, r25	; 0x05
    1014:	8c 83       	std	Y+4, r24	; 0x04
			case 15: UEDATX = *buffer++;
    1016:	81 ef       	ldi	r24, 0xF1	; 241
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	8c 83       	std	Y+4, r24	; 0x04
			case 14: UEDATX = *buffer++;
    1030:	81 ef       	ldi	r24, 0xF1	; 241
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	9d 83       	std	Y+5, r25	; 0x05
    1048:	8c 83       	std	Y+4, r24	; 0x04
			case 13: UEDATX = *buffer++;
    104a:	81 ef       	ldi	r24, 0xF1	; 241
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	9d 83       	std	Y+5, r25	; 0x05
    1062:	8c 83       	std	Y+4, r24	; 0x04
			case 12: UEDATX = *buffer++;
    1064:	81 ef       	ldi	r24, 0xF1	; 241
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	9d 83       	std	Y+5, r25	; 0x05
    107c:	8c 83       	std	Y+4, r24	; 0x04
			case 11: UEDATX = *buffer++;
    107e:	81 ef       	ldi	r24, 0xF1	; 241
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	fc 01       	movw	r30, r24
    108c:	20 83       	st	Z, r18
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	9d 83       	std	Y+5, r25	; 0x05
    1096:	8c 83       	std	Y+4, r24	; 0x04
			case 10: UEDATX = *buffer++;
    1098:	81 ef       	ldi	r24, 0xF1	; 241
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	2c 81       	ldd	r18, Y+4	; 0x04
    109e:	3d 81       	ldd	r19, Y+5	; 0x05
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	9d 83       	std	Y+5, r25	; 0x05
    10b0:	8c 83       	std	Y+4, r24	; 0x04
			case  9: UEDATX = *buffer++;
    10b2:	81 ef       	ldi	r24, 0xF1	; 241
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	2c 81       	ldd	r18, Y+4	; 0x04
    10b8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ba:	f9 01       	movw	r30, r18
    10bc:	20 81       	ld	r18, Z
    10be:	fc 01       	movw	r30, r24
    10c0:	20 83       	st	Z, r18
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	9d 83       	std	Y+5, r25	; 0x05
    10ca:	8c 83       	std	Y+4, r24	; 0x04
			#endif
			case  8: UEDATX = *buffer++;
    10cc:	81 ef       	ldi	r24, 0xF1	; 241
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	9d 83       	std	Y+5, r25	; 0x05
    10e4:	8c 83       	std	Y+4, r24	; 0x04
			case  7: UEDATX = *buffer++;
    10e6:	81 ef       	ldi	r24, 0xF1	; 241
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	f9 01       	movw	r30, r18
    10f0:	20 81       	ld	r18, Z
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 83       	st	Z, r18
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	9d 83       	std	Y+5, r25	; 0x05
    10fe:	8c 83       	std	Y+4, r24	; 0x04
			case  6: UEDATX = *buffer++;
    1100:	81 ef       	ldi	r24, 0xF1	; 241
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	f9 01       	movw	r30, r18
    110a:	20 81       	ld	r18, Z
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	9d 83       	std	Y+5, r25	; 0x05
    1118:	8c 83       	std	Y+4, r24	; 0x04
			case  5: UEDATX = *buffer++;
    111a:	81 ef       	ldi	r24, 0xF1	; 241
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	f9 01       	movw	r30, r18
    1124:	20 81       	ld	r18, Z
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
			case  4: UEDATX = *buffer++;
    1134:	81 ef       	ldi	r24, 0xF1	; 241
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	2c 81       	ldd	r18, Y+4	; 0x04
    113a:	3d 81       	ldd	r19, Y+5	; 0x05
    113c:	f9 01       	movw	r30, r18
    113e:	20 81       	ld	r18, Z
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	9d 83       	std	Y+5, r25	; 0x05
    114c:	8c 83       	std	Y+4, r24	; 0x04
			case  3: UEDATX = *buffer++;
    114e:	81 ef       	ldi	r24, 0xF1	; 241
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	f9 01       	movw	r30, r18
    1158:	20 81       	ld	r18, Z
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	9d 83       	std	Y+5, r25	; 0x05
    1166:	8c 83       	std	Y+4, r24	; 0x04
			case  2: UEDATX = *buffer++;
    1168:	81 ef       	ldi	r24, 0xF1	; 241
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	9d 83       	std	Y+5, r25	; 0x05
    1180:	8c 83       	std	Y+4, r24	; 0x04
			default:
			case  1: UEDATX = *buffer++;
    1182:	81 ef       	ldi	r24, 0xF1	; 241
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	fc 01       	movw	r30, r24
    1190:	20 83       	st	Z, r18
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	9d 83       	std	Y+5, r25	; 0x05
    119a:	8c 83       	std	Y+4, r24	; 0x04
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    119c:	88 ee       	ldi	r24, 0xE8	; 232
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	80 72       	andi	r24, 0x20	; 32
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	29 f4       	brne	.+10     	; 0x11ba <__stack+0x6bb>
    11b0:	88 ee       	ldi	r24, 0xE8	; 232
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	2a e3       	ldi	r18, 0x3A	; 58
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    11ba:	85 e0       	ldi	r24, 0x05	; 5
    11bc:	80 93 11 01 	sts	0x0111, r24
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__stack+0x6cb>
    11c8:	3d cc       	rjmp	.-1926   	; 0xa44 <usb_serial_write+0x70>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    11ca:	8f e5       	ldi	r24, 0x5F	; 95
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	return 0;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
}
    11d6:	27 96       	adiw	r28, 0x07	; 7
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <m_usb_tx_push>:
// immediately transmit any buffered output.
// This doesn't actually transmit the data - that is impossible!
// USB devices only transmit when the host allows, so the best
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t intr_state;

	intr_state = SREG;
    11f2:	8f e5       	ldi	r24, 0x5F	; 95
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	89 83       	std	Y+1, r24	; 0x01
	cli();
    11fc:	f8 94       	cli
	if (transmit_flush_timer) {
    11fe:	80 91 11 01 	lds	r24, 0x0111
    1202:	88 23       	and	r24, r24
    1204:	61 f0       	breq	.+24     	; 0x121e <m_usb_tx_push+0x36>
		UENUM = CDC_TX_ENDPOINT;
    1206:	89 ee       	ldi	r24, 0xE9	; 233
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	24 e0       	ldi	r18, 0x04	; 4
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
		UEINTX = 0x3A;
    1210:	88 ee       	ldi	r24, 0xE8	; 232
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	2a e3       	ldi	r18, 0x3A	; 58
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
		transmit_flush_timer = 0;
    121a:	10 92 11 01 	sts	0x0111, r1
	}
	SREG = intr_state;
    121e:	8f e5       	ldi	r24, 0x5F	; 95
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	29 81       	ldd	r18, Y+1	; 0x01
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
}
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	return *(uint32_t *)cdc_line_coding;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	fc 01       	movw	r30, r24
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	a2 81       	ldd	r26, Z+2	; 0x02
    1244:	b3 81       	ldd	r27, Z+3	; 0x03
}
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[4];
    1258:	80 91 04 01 	lds	r24, 0x0104
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[5];
    126a:	80 91 05 01 	lds	r24, 0x0105
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_coding[6];
    127c:	80 91 06 01 	lds	r24, 0x0106
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	return cdc_line_rtsdtr;
    128e:	80 91 13 01 	lds	r24, 0x0113
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <usb_serial_set_control+0x6>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t intr_state;

	intr_state = SREG;
    12a4:	8f e5       	ldi	r24, 0x5F	; 95
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	80 81       	ld	r24, Z
    12ac:	89 83       	std	Y+1, r24	; 0x01
	cli();
    12ae:	f8 94       	cli
	if (!usb_configuration) {
    12b0:	80 91 10 01 	lds	r24, 0x0110
    12b4:	88 23       	and	r24, r24
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <usb_serial_set_control+0x2e>
		// we're not enumerated/configured
		SREG = intr_state;
    12b8:	8f e5       	ldi	r24, 0x5F	; 95
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	29 81       	ldd	r18, Y+1	; 0x01
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
		return -1;
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	4d c0       	rjmp	.+154    	; 0x1360 <usb_serial_set_control+0xc8>
	}

	UENUM = CDC_ACM_ENDPOINT;
    12c6:	89 ee       	ldi	r24, 0xE9	; 233
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	22 e0       	ldi	r18, 0x02	; 2
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
	if (!(UEINTX & (1<<RWAL))) {
    12d0:	88 ee       	ldi	r24, 0xE8	; 232
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	80 72       	andi	r24, 0x20	; 32
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <usb_serial_set_control+0x5a>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    12e4:	8f e5       	ldi	r24, 0x5F	; 95
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	29 81       	ldd	r18, Y+1	; 0x01
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
		return -1;
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	37 c0       	rjmp	.+110    	; 0x1360 <usb_serial_set_control+0xc8>
	}
	UEDATX = 0xA1;
    12f2:	81 ef       	ldi	r24, 0xF1	; 241
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	21 ea       	ldi	r18, 0xA1	; 161
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
	UEDATX = 0x20;
    12fc:	81 ef       	ldi	r24, 0xF1	; 241
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	20 e2       	ldi	r18, 0x20	; 32
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
	UEDATX = 0;
    1306:	81 ef       	ldi	r24, 0xF1	; 241
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	10 82       	st	Z, r1
	UEDATX = 0;
    130e:	81 ef       	ldi	r24, 0xF1	; 241
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	10 82       	st	Z, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    1316:	81 ef       	ldi	r24, 0xF1	; 241
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	10 82       	st	Z, r1
	UEDATX = 0;
    131e:	81 ef       	ldi	r24, 0xF1	; 241
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	10 82       	st	Z, r1
	UEDATX = 2;
    1326:	81 ef       	ldi	r24, 0xF1	; 241
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
	UEDATX = 0;
    1330:	81 ef       	ldi	r24, 0xF1	; 241
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	fc 01       	movw	r30, r24
    1336:	10 82       	st	Z, r1
	UEDATX = signals;
    1338:	81 ef       	ldi	r24, 0xF1	; 241
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	2a 81       	ldd	r18, Y+2	; 0x02
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
	UEDATX = 0;
    1342:	81 ef       	ldi	r24, 0xF1	; 241
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	fc 01       	movw	r30, r24
    1348:	10 82       	st	Z, r1
	UEINTX = 0x3A;
    134a:	88 ee       	ldi	r24, 0xE8	; 232
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	2a e3       	ldi	r18, 0x3A	; 58
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
	SREG = intr_state;
    1354:	8f e5       	ldi	r24, 0x5F	; 95
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	29 81       	ldd	r18, Y+1	; 0x01
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	return 0;
    135e:	80 e0       	ldi	r24, 0x00	; 0
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <__vector_10+0x1a>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	uint8_t intbits, t;

        intbits = UDINT;
    1388:	81 ee       	ldi	r24, 0xE1	; 225
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	fc 01       	movw	r30, r24
    138e:	80 81       	ld	r24, Z
    1390:	89 83       	std	Y+1, r24	; 0x01
        UDINT = 0;
    1392:	81 ee       	ldi	r24, 0xE1	; 225
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	fc 01       	movw	r30, r24
    1398:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	88 70       	andi	r24, 0x08	; 8
    13a2:	90 70       	andi	r25, 0x00	; 0
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	d9 f0       	breq	.+54     	; 0x13de <__vector_10+0x74>
		UENUM = 0;
    13a8:	89 ee       	ldi	r24, 0xE9	; 233
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	fc 01       	movw	r30, r24
    13ae:	10 82       	st	Z, r1
		UECONX = 1;
    13b0:	8b ee       	ldi	r24, 0xEB	; 235
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	21 e0       	ldi	r18, 0x01	; 1
    13b6:	fc 01       	movw	r30, r24
    13b8:	20 83       	st	Z, r18
		UECFG0X = EP_TYPE_CONTROL;
    13ba:	8c ee       	ldi	r24, 0xEC	; 236
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	fc 01       	movw	r30, r24
    13c0:	10 82       	st	Z, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    13c2:	8d ee       	ldi	r24, 0xED	; 237
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	22 e1       	ldi	r18, 0x12	; 18
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
		UEIENX = (1<<RXSTPE);
    13cc:	80 ef       	ldi	r24, 0xF0	; 240
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	28 e0       	ldi	r18, 0x08	; 8
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
		usb_configuration = 0;
    13d6:	10 92 10 01 	sts	0x0110, r1
		cdc_line_rtsdtr = 0;
    13da:	10 92 13 01 	sts	0x0113, r1
        }
	if (intbits & (1<<SOFI)) {
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	84 70       	andi	r24, 0x04	; 4
    13e6:	90 70       	andi	r25, 0x00	; 0
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	e9 f0       	breq	.+58     	; 0x1426 <__vector_10+0xbc>
		if (usb_configuration) {
    13ec:	80 91 10 01 	lds	r24, 0x0110
    13f0:	88 23       	and	r24, r24
    13f2:	c9 f0       	breq	.+50     	; 0x1426 <__vector_10+0xbc>
			t = transmit_flush_timer;
    13f4:	80 91 11 01 	lds	r24, 0x0111
    13f8:	8a 83       	std	Y+2, r24	; 0x02
			if (t) {
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	88 23       	and	r24, r24
    13fe:	99 f0       	breq	.+38     	; 0x1426 <__vector_10+0xbc>
				transmit_flush_timer = --t;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	81 50       	subi	r24, 0x01	; 1
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 93 11 01 	sts	0x0111, r24
				if (!t) {
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 23       	and	r24, r24
    1410:	51 f4       	brne	.+20     	; 0x1426 <__vector_10+0xbc>
					UENUM = CDC_TX_ENDPOINT;
    1412:	89 ee       	ldi	r24, 0xE9	; 233
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	24 e0       	ldi	r18, 0x04	; 4
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
					UEINTX = 0x3A;
    141c:	88 ee       	ldi	r24, 0xE8	; 232
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	2a e3       	ldi	r18, 0x3A	; 58
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
				}
			}
		}
	}
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	2f 91       	pop	r18
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	while (!(UEINTX & (1<<TXINI))) ;
    144a:	00 00       	nop
    144c:	88 ee       	ldi	r24, 0xE8	; 232
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	fc 01       	movw	r30, r24
    1452:	80 81       	ld	r24, Z
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	81 70       	andi	r24, 0x01	; 1
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	b1 f3       	breq	.-20     	; 0x144c <usb_wait_in_ready+0xa>
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <usb_send_in>:
static inline void usb_send_in(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	UEINTX = ~(1<<TXINI);
    146e:	88 ee       	ldi	r24, 0xE8	; 232
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	2e ef       	ldi	r18, 0xFE	; 254
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <usb_wait_receive_out>:
static inline void usb_wait_receive_out(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	while (!(UEINTX & (1<<RXOUTI))) ;
    1486:	00 00       	nop
    1488:	88 ee       	ldi	r24, 0xE8	; 232
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	fc 01       	movw	r30, r24
    148e:	80 81       	ld	r24, Z
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	84 70       	andi	r24, 0x04	; 4
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	b1 f3       	breq	.-20     	; 0x1488 <usb_wait_receive_out+0xa>
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <usb_ack_out>:
static inline void usb_ack_out(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	UEINTX = ~(1<<RXOUTI);
    14aa:	88 ee       	ldi	r24, 0xE8	; 232
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	2b ef       	ldi	r18, 0xFB	; 251
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    14ba:	1f 92       	push	r1
    14bc:	0f 92       	push	r0
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	0f 92       	push	r0
    14c2:	11 24       	eor	r1, r1
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	e3 97       	sbiw	r28, 0x33	; 51
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	cd bf       	out	0x3d, r28	; 61
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    14f2:	89 ee       	ldi	r24, 0xE9	; 233
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	fc 01       	movw	r30, r24
    14f8:	10 82       	st	Z, r1
        intbits = UEINTX;
    14fa:	88 ee       	ldi	r24, 0xE8	; 232
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	fc 01       	movw	r30, r24
    1500:	80 81       	ld	r24, Z
    1502:	8b 87       	std	Y+11, r24	; 0x0b
        if (intbits & (1<<RXSTPI)) {
    1504:	8b 85       	ldd	r24, Y+11	; 0x0b
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	88 70       	andi	r24, 0x08	; 8
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_11+0x5a>
    1512:	79 c2       	rjmp	.+1266   	; 0x1a06 <__vector_11+0x54c>
                bmRequestType = UEDATX;
    1514:	81 ef       	ldi	r24, 0xF1	; 241
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	8c 87       	std	Y+12, r24	; 0x0c
                bRequest = UEDATX;
    151e:	81 ef       	ldi	r24, 0xF1	; 241
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	8d 87       	std	Y+13, r24	; 0x0d
                wValue = UEDATX;
    1528:	81 ef       	ldi	r24, 0xF1	; 241
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	fc 01       	movw	r30, r24
    152e:	80 81       	ld	r24, Z
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9f 87       	std	Y+15, r25	; 0x0f
    1536:	8e 87       	std	Y+14, r24	; 0x0e
                wValue |= (UEDATX << 8);
    1538:	81 ef       	ldi	r24, 0xF1	; 241
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	80 81       	ld	r24, Z
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	98 2f       	mov	r25, r24
    1546:	88 27       	eor	r24, r24
    1548:	2e 85       	ldd	r18, Y+14	; 0x0e
    154a:	3f 85       	ldd	r19, Y+15	; 0x0f
    154c:	82 2b       	or	r24, r18
    154e:	93 2b       	or	r25, r19
    1550:	9f 87       	std	Y+15, r25	; 0x0f
    1552:	8e 87       	std	Y+14, r24	; 0x0e
                wIndex = UEDATX;
    1554:	81 ef       	ldi	r24, 0xF1	; 241
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	99 8b       	std	Y+17, r25	; 0x11
    1562:	88 8b       	std	Y+16, r24	; 0x10
                wIndex |= (UEDATX << 8);
    1564:	81 ef       	ldi	r24, 0xF1	; 241
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	98 2f       	mov	r25, r24
    1572:	88 27       	eor	r24, r24
    1574:	28 89       	ldd	r18, Y+16	; 0x10
    1576:	39 89       	ldd	r19, Y+17	; 0x11
    1578:	82 2b       	or	r24, r18
    157a:	93 2b       	or	r25, r19
    157c:	99 8b       	std	Y+17, r25	; 0x11
    157e:	88 8b       	std	Y+16, r24	; 0x10
                wLength = UEDATX;
    1580:	81 ef       	ldi	r24, 0xF1	; 241
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9b 8b       	std	Y+19, r25	; 0x13
    158e:	8a 8b       	std	Y+18, r24	; 0x12
                wLength |= (UEDATX << 8);
    1590:	81 ef       	ldi	r24, 0xF1	; 241
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	98 2f       	mov	r25, r24
    159e:	88 27       	eor	r24, r24
    15a0:	2a 89       	ldd	r18, Y+18	; 0x12
    15a2:	3b 89       	ldd	r19, Y+19	; 0x13
    15a4:	82 2b       	or	r24, r18
    15a6:	93 2b       	or	r25, r19
    15a8:	9b 8b       	std	Y+19, r25	; 0x13
    15aa:	8a 8b       	std	Y+18, r24	; 0x12
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    15ac:	88 ee       	ldi	r24, 0xE8	; 232
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	22 ef       	ldi	r18, 0xF2	; 242
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
                if (bRequest == GET_DESCRIPTOR) {
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	86 30       	cpi	r24, 0x06	; 6
    15ba:	09 f0       	breq	.+2      	; 0x15be <__vector_11+0x104>
    15bc:	d6 c0       	rjmp	.+428    	; 0x176a <__vector_11+0x2b0>
			list = (const uint8_t *)descriptor_list;
    15be:	87 eb       	ldi	r24, 0xB7	; 183
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
			for (i=0; ; i++) {
    15c6:	1d 82       	std	Y+5, r1	; 0x05
				if (i >= NUM_DESC_LIST) {
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	86 30       	cpi	r24, 0x06	; 6
    15cc:	30 f0       	brcs	.+12     	; 0x15da <__vector_11+0x120>
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    15ce:	8b ee       	ldi	r24, 0xEB	; 235
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	21 e2       	ldi	r18, 0x21	; 33
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
					return;
    15d8:	1d c2       	rjmp	.+1082   	; 0x1a14 <__vector_11+0x55a>
				}
				desc_val = pgm_read_word(list);
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	9d 8b       	std	Y+21, r25	; 0x15
    15e0:	8c 8b       	std	Y+20, r24	; 0x14
    15e2:	8c 89       	ldd	r24, Y+20	; 0x14
    15e4:	9d 89       	ldd	r25, Y+21	; 0x15
    15e6:	8c 01       	movw	r16, r24
    15e8:	f8 01       	movw	r30, r16
    15ea:	e5 90       	lpm	r14, Z+
    15ec:	f4 90       	lpm	r15, Z+
    15ee:	8f 01       	movw	r16, r30
    15f0:	ff 8a       	std	Y+23, r15	; 0x17
    15f2:	ee 8a       	std	Y+22, r14	; 0x16
    15f4:	1d 8b       	std	Y+21, r17	; 0x15
    15f6:	0c 8b       	std	Y+20, r16	; 0x14
    15f8:	8e 89       	ldd	r24, Y+22	; 0x16
    15fa:	9f 89       	ldd	r25, Y+23	; 0x17
    15fc:	99 8f       	std	Y+25, r25	; 0x19
    15fe:	88 8f       	std	Y+24, r24	; 0x18
				if (desc_val != wValue) {
    1600:	28 8d       	ldd	r18, Y+24	; 0x18
    1602:	39 8d       	ldd	r19, Y+25	; 0x19
    1604:	8e 85       	ldd	r24, Y+14	; 0x0e
    1606:	9f 85       	ldd	r25, Y+15	; 0x0f
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	31 f0       	breq	.+12     	; 0x161a <__vector_11+0x160>
					list += sizeof(struct descriptor_list_struct);
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	07 96       	adiw	r24, 0x07	; 7
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
					continue;
    1618:	5b c0       	rjmp	.+182    	; 0x16d0 <__vector_11+0x216>
				}
				list += 2;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	02 96       	adiw	r24, 0x02	; 2
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
				desc_val = pgm_read_word(list);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	9b 8f       	std	Y+27, r25	; 0x1b
    162a:	8a 8f       	std	Y+26, r24	; 0x1a
    162c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    162e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1630:	8c 01       	movw	r16, r24
    1632:	f8 01       	movw	r30, r16
    1634:	e5 90       	lpm	r14, Z+
    1636:	f4 90       	lpm	r15, Z+
    1638:	8f 01       	movw	r16, r30
    163a:	fd 8e       	std	Y+29, r15	; 0x1d
    163c:	ec 8e       	std	Y+28, r14	; 0x1c
    163e:	1b 8f       	std	Y+27, r17	; 0x1b
    1640:	0a 8f       	std	Y+26, r16	; 0x1a
    1642:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1644:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1646:	99 8f       	std	Y+25, r25	; 0x19
    1648:	88 8f       	std	Y+24, r24	; 0x18
				if (desc_val != wIndex) {
    164a:	28 8d       	ldd	r18, Y+24	; 0x18
    164c:	39 8d       	ldd	r19, Y+25	; 0x19
    164e:	88 89       	ldd	r24, Y+16	; 0x10
    1650:	99 89       	ldd	r25, Y+17	; 0x11
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	31 f0       	breq	.+12     	; 0x1664 <__vector_11+0x1aa>
					list += sizeof(struct descriptor_list_struct)-2;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	05 96       	adiw	r24, 0x05	; 5
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
					continue;
    1662:	36 c0       	rjmp	.+108    	; 0x16d0 <__vector_11+0x216>
				}
				list += 2;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
				desc_addr = (const uint8_t *)pgm_read_word(list);
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	9f 8f       	std	Y+31, r25	; 0x1f
    1674:	8e 8f       	std	Y+30, r24	; 0x1e
    1676:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1678:	9f 8d       	ldd	r25, Y+31	; 0x1f
    167a:	8c 01       	movw	r16, r24
    167c:	f8 01       	movw	r30, r16
    167e:	e5 90       	lpm	r14, Z+
    1680:	f4 90       	lpm	r15, Z+
    1682:	8f 01       	movw	r16, r30
    1684:	f9 a2       	std	Y+33, r15	; 0x21
    1686:	e8 a2       	std	Y+32, r14	; 0x20
    1688:	1f 8f       	std	Y+31, r17	; 0x1f
    168a:	0e 8f       	std	Y+30, r16	; 0x1e
    168c:	88 a1       	ldd	r24, Y+32	; 0x20
    168e:	99 a1       	ldd	r25, Y+33	; 0x21
    1690:	9a 87       	std	Y+10, r25	; 0x0a
    1692:	89 87       	std	Y+9, r24	; 0x09
				list += 2;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	02 96       	adiw	r24, 0x02	; 2
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01
				desc_length = pgm_read_byte(list);
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	9b a3       	std	Y+35, r25	; 0x23
    16a4:	8a a3       	std	Y+34, r24	; 0x22
    16a6:	8a a1       	ldd	r24, Y+34	; 0x22
    16a8:	9b a1       	ldd	r25, Y+35	; 0x23
    16aa:	fc 01       	movw	r30, r24
    16ac:	14 91       	lpm	r17, Z+
    16ae:	1c a3       	std	Y+36, r17	; 0x24
    16b0:	8c a1       	ldd	r24, Y+36	; 0x24
    16b2:	8d a3       	std	Y+37, r24	; 0x25
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    16b4:	8a 89       	ldd	r24, Y+18	; 0x12
    16b6:	9b 89       	ldd	r25, Y+19	; 0x13
    16b8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ba:	91 05       	cpc	r25, r1
    16bc:	19 f0       	breq	.+6      	; 0x16c4 <__vector_11+0x20a>
    16be:	10 f0       	brcs	.+4      	; 0x16c4 <__vector_11+0x20a>
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	8e 83       	std	Y+6, r24	; 0x06
			if (len > desc_length) len = desc_length;
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ca:	89 17       	cp	r24, r25
    16cc:	28 f0       	brcs	.+10     	; 0x16d8 <__vector_11+0x21e>
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <__vector_11+0x222>
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	8d 83       	std	Y+5, r24	; 0x05
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    16d6:	78 cf       	rjmp	.-272    	; 0x15c8 <__vector_11+0x10e>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	8e 83       	std	Y+6, r24	; 0x06
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    16dc:	88 ee       	ldi	r24, 0xE8	; 232
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 83       	std	Y+5, r24	; 0x05
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	85 70       	andi	r24, 0x05	; 5
    16ee:	90 70       	andi	r25, 0x00	; 0
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	a1 f3       	breq	.-24     	; 0x16dc <__vector_11+0x222>
				if (i & (1<<RXOUTI)) return;	// abort
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	84 70       	andi	r24, 0x04	; 4
    16fc:	90 70       	andi	r25, 0x00	; 0
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f0       	breq	.+2      	; 0x1704 <__vector_11+0x24a>
    1702:	87 c1       	rjmp	.+782    	; 0x1a12 <__vector_11+0x558>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	81 31       	cpi	r24, 0x11	; 17
    1708:	08 f0       	brcs	.+2      	; 0x170c <__vector_11+0x252>
    170a:	80 e1       	ldi	r24, 0x10	; 16
    170c:	8e a3       	std	Y+38, r24	; 0x26
				for (i = n; i; i--) {
    170e:	8e a1       	ldd	r24, Y+38	; 0x26
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	17 c0       	rjmp	.+46     	; 0x1742 <__vector_11+0x288>
					UEDATX = pgm_read_byte(desc_addr++);
    1714:	81 ef       	ldi	r24, 0xF1	; 241
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	29 85       	ldd	r18, Y+9	; 0x09
    171a:	3a 85       	ldd	r19, Y+10	; 0x0a
    171c:	38 a7       	std	Y+40, r19	; 0x28
    171e:	2f a3       	std	Y+39, r18	; 0x27
    1720:	29 85       	ldd	r18, Y+9	; 0x09
    1722:	3a 85       	ldd	r19, Y+10	; 0x0a
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	3a 87       	std	Y+10, r19	; 0x0a
    172a:	29 87       	std	Y+9, r18	; 0x09
    172c:	2f a1       	ldd	r18, Y+39	; 0x27
    172e:	38 a5       	ldd	r19, Y+40	; 0x28
    1730:	f9 01       	movw	r30, r18
    1732:	14 91       	lpm	r17, Z+
    1734:	19 a7       	std	Y+41, r17	; 0x29
    1736:	29 a5       	ldd	r18, Y+41	; 0x29
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	88 23       	and	r24, r24
    1746:	31 f7       	brne	.-52     	; 0x1714 <__vector_11+0x25a>
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	8e a1       	ldd	r24, Y+38	; 0x26
    174c:	f9 2f       	mov	r31, r25
    174e:	f8 1b       	sub	r31, r24
    1750:	8f 2f       	mov	r24, r31
    1752:	8e 83       	std	Y+6, r24	; 0x06
				usb_send_in();
    1754:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			} while (len || n == ENDPOINT0_SIZE);
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	88 23       	and	r24, r24
    175c:	09 f0       	breq	.+2      	; 0x1760 <__vector_11+0x2a6>
    175e:	be cf       	rjmp	.-132    	; 0x16dc <__vector_11+0x222>
    1760:	8e a1       	ldd	r24, Y+38	; 0x26
    1762:	80 31       	cpi	r24, 0x10	; 16
    1764:	09 f4       	brne	.+2      	; 0x1768 <__vector_11+0x2ae>
    1766:	ba cf       	rjmp	.-140    	; 0x16dc <__vector_11+0x222>
			return;
    1768:	55 c1       	rjmp	.+682    	; 0x1a14 <__vector_11+0x55a>
                }
		if (bRequest == SET_ADDRESS) {
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	85 30       	cpi	r24, 0x05	; 5
    176e:	59 f4       	brne	.+22     	; 0x1786 <__vector_11+0x2cc>
			usb_send_in();
    1770:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			usb_wait_in_ready();
    1774:	0e 94 21 0a 	call	0x1442	; 0x1442 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    1778:	83 ee       	ldi	r24, 0xE3	; 227
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	2e 85       	ldd	r18, Y+14	; 0x0e
    177e:	20 68       	ori	r18, 0x80	; 128
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
			return;
    1784:	47 c1       	rjmp	.+654    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	89 30       	cpi	r24, 0x09	; 9
    178a:	09 f0       	breq	.+2      	; 0x178e <__vector_11+0x2d4>
    178c:	6a c0       	rjmp	.+212    	; 0x1862 <__vector_11+0x3a8>
    178e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1790:	88 23       	and	r24, r24
    1792:	09 f0       	breq	.+2      	; 0x1796 <__vector_11+0x2dc>
    1794:	66 c0       	rjmp	.+204    	; 0x1862 <__vector_11+0x3a8>
			usb_configuration = wValue;
    1796:	8e 85       	ldd	r24, Y+14	; 0x0e
    1798:	80 93 10 01 	sts	0x0110, r24
			cdc_line_rtsdtr = 0;
    179c:	10 92 13 01 	sts	0x0113, r1
			transmit_flush_timer = 0;
    17a0:	10 92 11 01 	sts	0x0111, r1
			usb_send_in();
    17a4:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			cfg = endpoint_config_table;
    17a8:	8e e2       	ldi	r24, 0x2E	; 46
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
			for (i=1; i<5; i++) {
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	48 c0       	rjmp	.+144    	; 0x1846 <__vector_11+0x38c>
				UENUM = i;
    17b6:	89 ee       	ldi	r24, 0xE9	; 233
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	2d 81       	ldd	r18, Y+5	; 0x05
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
				en = pgm_read_byte(cfg++);
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	9b a7       	std	Y+43, r25	; 0x2b
    17c6:	8a a7       	std	Y+42, r24	; 0x2a
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	8a a5       	ldd	r24, Y+42	; 0x2a
    17d4:	9b a5       	ldd	r25, Y+43	; 0x2b
    17d6:	fc 01       	movw	r30, r24
    17d8:	14 91       	lpm	r17, Z+
    17da:	1c a7       	std	Y+44, r17	; 0x2c
    17dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    17de:	8d a7       	std	Y+45, r24	; 0x2d
				UECONX = en;
    17e0:	8b ee       	ldi	r24, 0xEB	; 235
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	2d a5       	ldd	r18, Y+45	; 0x2d
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
				if (en) {
    17ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ec:	88 23       	and	r24, r24
    17ee:	41 f1       	breq	.+80     	; 0x1840 <__vector_11+0x386>
					UECFG0X = pgm_read_byte(cfg++);
    17f0:	8c ee       	ldi	r24, 0xEC	; 236
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	3f a7       	std	Y+47, r19	; 0x2f
    17fa:	2e a7       	std	Y+46, r18	; 0x2e
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	3c 83       	std	Y+4, r19	; 0x04
    1806:	2b 83       	std	Y+3, r18	; 0x03
    1808:	2e a5       	ldd	r18, Y+46	; 0x2e
    180a:	3f a5       	ldd	r19, Y+47	; 0x2f
    180c:	f9 01       	movw	r30, r18
    180e:	14 91       	lpm	r17, Z+
    1810:	18 ab       	std	Y+48, r17	; 0x30
    1812:	28 a9       	ldd	r18, Y+48	; 0x30
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    1818:	8d ee       	ldi	r24, 0xED	; 237
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	3a ab       	std	Y+50, r19	; 0x32
    1822:	29 ab       	std	Y+49, r18	; 0x31
    1824:	2b 81       	ldd	r18, Y+3	; 0x03
    1826:	3c 81       	ldd	r19, Y+4	; 0x04
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	3c 83       	std	Y+4, r19	; 0x04
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	29 a9       	ldd	r18, Y+49	; 0x31
    1832:	3a a9       	ldd	r19, Y+50	; 0x32
    1834:	f9 01       	movw	r30, r18
    1836:	14 91       	lpm	r17, Z+
    1838:	1b ab       	std	Y+51, r17	; 0x33
    183a:	2b a9       	ldd	r18, Y+51	; 0x33
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	85 30       	cpi	r24, 0x05	; 5
    184a:	08 f4       	brcc	.+2      	; 0x184e <__vector_11+0x394>
    184c:	b4 cf       	rjmp	.-152    	; 0x17b6 <__vector_11+0x2fc>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    184e:	8a ee       	ldi	r24, 0xEA	; 234
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	2e e1       	ldi	r18, 0x1E	; 30
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
        		UERST = 0;
    1858:	8a ee       	ldi	r24, 0xEA	; 234
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	fc 01       	movw	r30, r24
    185e:	10 82       	st	Z, r1
			return;
    1860:	d9 c0       	rjmp	.+434    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	71 f4       	brne	.+28     	; 0x1884 <__vector_11+0x3ca>
    1868:	8c 85       	ldd	r24, Y+12	; 0x0c
    186a:	80 38       	cpi	r24, 0x80	; 128
    186c:	59 f4       	brne	.+22     	; 0x1884 <__vector_11+0x3ca>
			usb_wait_in_ready();
    186e:	0e 94 21 0a 	call	0x1442	; 0x1442 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    1872:	81 ef       	ldi	r24, 0xF1	; 241
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	20 91 10 01 	lds	r18, 0x0110
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18
			usb_send_in();
    187e:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			return;
    1882:	c8 c0       	rjmp	.+400    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	81 32       	cpi	r24, 0x21	; 33
    1888:	09 f5       	brne	.+66     	; 0x18cc <__vector_11+0x412>
    188a:	8c 85       	ldd	r24, Y+12	; 0x0c
    188c:	81 3a       	cpi	r24, 0xA1	; 161
    188e:	f1 f4       	brne	.+60     	; 0x18cc <__vector_11+0x412>
			usb_wait_in_ready();
    1890:	0e 94 21 0a 	call	0x1442	; 0x1442 <usb_wait_in_ready>
			p = cdc_line_coding;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	98 87       	std	Y+8, r25	; 0x08
    189a:	8f 83       	std	Y+7, r24	; 0x07
			for (i=0; i<7; i++) {
    189c:	1d 82       	std	Y+5, r1	; 0x05
    189e:	10 c0       	rjmp	.+32     	; 0x18c0 <__vector_11+0x406>
				UEDATX = *p++;
    18a0:	81 ef       	ldi	r24, 0xF1	; 241
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	2f 81       	ldd	r18, Y+7	; 0x07
    18a6:	38 85       	ldd	r19, Y+8	; 0x08
    18a8:	f9 01       	movw	r30, r18
    18aa:	20 81       	ld	r18, Z
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
    18b0:	8f 81       	ldd	r24, Y+7	; 0x07
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	98 87       	std	Y+8, r25	; 0x08
    18b8:	8f 83       	std	Y+7, r24	; 0x07
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	87 30       	cpi	r24, 0x07	; 7
    18c4:	68 f3       	brcs	.-38     	; 0x18a0 <__vector_11+0x3e6>
				UEDATX = *p++;
			}
			usb_send_in();
    18c6:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			return;
    18ca:	a4 c0       	rjmp	.+328    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	80 32       	cpi	r24, 0x20	; 32
    18d0:	19 f5       	brne	.+70     	; 0x1918 <__vector_11+0x45e>
    18d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d4:	81 32       	cpi	r24, 0x21	; 33
    18d6:	01 f5       	brne	.+64     	; 0x1918 <__vector_11+0x45e>
			usb_wait_receive_out();
    18d8:	0e 94 3f 0a 	call	0x147e	; 0x147e <usb_wait_receive_out>
			p = cdc_line_coding;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	8f 83       	std	Y+7, r24	; 0x07
			for (i=0; i<7; i++) {
    18e4:	1d 82       	std	Y+5, r1	; 0x05
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <__vector_11+0x44e>
				*p++ = UEDATX;
    18e8:	81 ef       	ldi	r24, 0xF1	; 241
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 81       	ld	r18, Z
    18f0:	8f 81       	ldd	r24, Y+7	; 0x07
    18f2:	98 85       	ldd	r25, Y+8	; 0x08
    18f4:	fc 01       	movw	r30, r24
    18f6:	20 83       	st	Z, r18
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	8f 83       	std	Y+7, r24	; 0x07
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	87 30       	cpi	r24, 0x07	; 7
    190c:	68 f3       	brcs	.-38     	; 0x18e8 <__vector_11+0x42e>
				*p++ = UEDATX;
			}
			usb_ack_out();
    190e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <usb_ack_out>
			usb_send_in();
    1912:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			return;
    1916:	7e c0       	rjmp	.+252    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	82 32       	cpi	r24, 0x22	; 34
    191c:	59 f4       	brne	.+22     	; 0x1934 <__vector_11+0x47a>
    191e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1920:	81 32       	cpi	r24, 0x21	; 33
    1922:	41 f4       	brne	.+16     	; 0x1934 <__vector_11+0x47a>
			cdc_line_rtsdtr = wValue;
    1924:	8e 85       	ldd	r24, Y+14	; 0x0e
    1926:	80 93 13 01 	sts	0x0113, r24
			usb_wait_in_ready();
    192a:	0e 94 21 0a 	call	0x1442	; 0x1442 <usb_wait_in_ready>
			usb_send_in();
    192e:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			return;
    1932:	70 c0       	rjmp	.+224    	; 0x1a14 <__vector_11+0x55a>
		}
		if (bRequest == GET_STATUS) {
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	88 23       	and	r24, r24
    1938:	39 f5       	brne	.+78     	; 0x1988 <__vector_11+0x4ce>
			usb_wait_in_ready();
    193a:	0e 94 21 0a 	call	0x1442	; 0x1442 <usb_wait_in_ready>
			i = 0;
    193e:	1d 82       	std	Y+5, r1	; 0x05
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1940:	8c 85       	ldd	r24, Y+12	; 0x0c
    1942:	82 38       	cpi	r24, 0x82	; 130
    1944:	a9 f4       	brne	.+42     	; 0x1970 <__vector_11+0x4b6>
				UENUM = wIndex;
    1946:	89 ee       	ldi	r24, 0xE9	; 233
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	28 89       	ldd	r18, Y+16	; 0x10
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
				if (UECONX & (1<<STALLRQ)) i = 1;
    1950:	8b ee       	ldi	r24, 0xEB	; 235
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	80 72       	andi	r24, 0x20	; 32
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	11 f0       	breq	.+4      	; 0x1968 <__vector_11+0x4ae>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8d 83       	std	Y+5, r24	; 0x05
				UENUM = 0;
    1968:	89 ee       	ldi	r24, 0xE9	; 233
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	10 82       	st	Z, r1
			}
			#endif
			UEDATX = i;
    1970:	81 ef       	ldi	r24, 0xF1	; 241
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18
			UEDATX = 0;
    197a:	81 ef       	ldi	r24, 0xF1	; 241
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	fc 01       	movw	r30, r24
    1980:	10 82       	st	Z, r1
			usb_send_in();
    1982:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
			return;
    1986:	46 c0       	rjmp	.+140    	; 0x1a14 <__vector_11+0x55a>
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1988:	8d 85       	ldd	r24, Y+13	; 0x0d
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	19 f0       	breq	.+6      	; 0x1994 <__vector_11+0x4da>
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	c9 f5       	brne	.+114    	; 0x1a06 <__vector_11+0x54c>
		  && bmRequestType == 0x02 && wValue == 0) {
    1994:	8c 85       	ldd	r24, Y+12	; 0x0c
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	b1 f5       	brne	.+108    	; 0x1a06 <__vector_11+0x54c>
    199a:	8e 85       	ldd	r24, Y+14	; 0x0e
    199c:	9f 85       	ldd	r25, Y+15	; 0x0f
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	91 f5       	brne	.+100    	; 0x1a06 <__vector_11+0x54c>
			i = wIndex & 0x7F;
    19a2:	88 89       	ldd	r24, Y+16	; 0x10
    19a4:	8f 77       	andi	r24, 0x7F	; 127
    19a6:	8d 83       	std	Y+5, r24	; 0x05
			if (i >= 1 && i <= MAX_ENDPOINT) {
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	88 23       	and	r24, r24
    19ac:	61 f1       	breq	.+88     	; 0x1a06 <__vector_11+0x54c>
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	85 30       	cpi	r24, 0x05	; 5
    19b2:	48 f5       	brcc	.+82     	; 0x1a06 <__vector_11+0x54c>
				usb_send_in();
    19b4:	0e 94 33 0a 	call	0x1466	; 0x1466 <usb_send_in>
				UENUM = i;
    19b8:	89 ee       	ldi	r24, 0xE9	; 233
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
				if (bRequest == SET_FEATURE) {
    19c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	31 f4       	brne	.+12     	; 0x19d4 <__vector_11+0x51a>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    19c8:	8b ee       	ldi	r24, 0xEB	; 235
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	21 e2       	ldi	r18, 0x21	; 33
    19ce:	fc 01       	movw	r30, r24
    19d0:	20 83       	st	Z, r18
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
					UERST = 0;
				}
				return;
    19d2:	20 c0       	rjmp	.+64     	; 0x1a14 <__vector_11+0x55a>
				usb_send_in();
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    19d4:	8b ee       	ldi	r24, 0xEB	; 235
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	29 e1       	ldi	r18, 0x19	; 25
    19da:	fc 01       	movw	r30, r24
    19dc:	20 83       	st	Z, r18
					UERST = (1 << i);
    19de:	8a ee       	ldi	r24, 0xEA	; 234
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	2d 81       	ldd	r18, Y+5	; 0x05
    19e4:	42 2f       	mov	r20, r18
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	21 e0       	ldi	r18, 0x01	; 1
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	04 2e       	mov	r0, r20
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <__vector_11+0x53a>
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <__vector_11+0x536>
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18
					UERST = 0;
    19fc:	8a ee       	ldi	r24, 0xEA	; 234
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	fc 01       	movw	r30, r24
    1a02:	10 82       	st	Z, r1
				}
				return;
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <__vector_11+0x55a>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1a06:	8b ee       	ldi	r24, 0xEB	; 235
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	21 e2       	ldi	r18, 0x21	; 33
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <__vector_11+0x55a>
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
    1a12:	00 00       	nop
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1a14:	e3 96       	adiw	r28, 0x33	; 51
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1a48:	1f 93       	push	r17
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <print_P+0x8>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <print_P+0xa>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <print_P+0xc>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	fc 01       	movw	r30, r24
    1a74:	14 91       	lpm	r17, Z+
    1a76:	1b 83       	std	Y+3, r17	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	8c 83       	std	Y+4, r24	; 0x04
		if (!c) break;
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	88 23       	and	r24, r24
    1a80:	51 f0       	breq	.+20     	; 0x1a96 <print_P+0x4e>
		if (c == '\n') usb_tx_char('\r');
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <print_P+0x46>
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>
		usb_tx_char(c);
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>
	}
    1a94:	e3 cf       	rjmp	.-58     	; 0x1a5c <print_P+0x14>
}
    1a96:	00 00       	nop
    1a98:	26 96       	adiw	r28, 0x06	; 6
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	08 95       	ret

00001aac <phex1>:

void phex1(unsigned char c)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	0f 92       	push	r0
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	89 83       	std	Y+1, r24	; 0x01
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	8a 30       	cpi	r24, 0x0A	; 10
    1abc:	10 f4       	brcc	.+4      	; 0x1ac2 <phex1+0x16>
    1abe:	80 e3       	ldi	r24, 0x30	; 48
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <phex1+0x18>
    1ac2:	87 e3       	ldi	r24, 0x37	; 55
    1ac4:	99 81       	ldd	r25, Y+1	; 0x01
    1ac6:	89 0f       	add	r24, r25
    1ac8:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>
}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <phex>:

void phex(unsigned char c)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	89 83       	std	Y+1, r24	; 0x01
	phex1(c >> 4);
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	82 95       	swap	r24
    1ae4:	8f 70       	andi	r24, 0x0F	; 15
    1ae6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <phex1>
	phex1(c & 15);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	8f 70       	andi	r24, 0x0F	; 15
    1aee:	0e 94 56 0d 	call	0x1aac	; 0x1aac <phex1>
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <m_usb_tx_hex+0x6>
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
	phex(i >> 8);
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	89 2f       	mov	r24, r25
    1b0e:	99 27       	eor	r25, r25
    1b10:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <phex>
	phex(i);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <phex>
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <m_usb_tx_hexchar>:

void m_usb_tx_hexchar(unsigned char i)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	phex(i);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <phex>
}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <m_usb_tx_int>:

void m_usb_tx_int(int i)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	28 97       	sbiw	r28, 0x08	; 8
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	8f 83       	std	Y+7, r24	; 0x07
	char string[6] = {0,0,0,0,0,0};
    1b56:	26 e0       	ldi	r18, 0x06	; 6
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	32 2f       	mov	r19, r18
    1b60:	11 92       	st	Z+, r1
    1b62:	3a 95       	dec	r19
    1b64:	e9 f7       	brne	.-6      	; 0x1b60 <m_usb_tx_int+0x22>
	itoa(i,string,10);
    1b66:	8f 81       	ldd	r24, Y+7	; 0x07
    1b68:	98 85       	ldd	r25, Y+8	; 0x08
    1b6a:	9e 01       	movw	r18, r28
    1b6c:	2f 5f       	subi	r18, 0xFF	; 255
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	b9 01       	movw	r22, r18
    1b72:	4a e0       	ldi	r20, 0x0A	; 10
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	0e 94 62 14 	call	0x28c4	; 0x28c4 <itoa>
	for(i=0;i<6;i++){
    1b7a:	18 86       	std	Y+8, r1	; 0x08
    1b7c:	1f 82       	std	Y+7, r1	; 0x07
    1b7e:	1b c0       	rjmp	.+54     	; 0x1bb6 <m_usb_tx_int+0x78>
        if(string[i]){
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
    1b82:	98 85       	ldd	r25, Y+8	; 0x08
    1b84:	9e 01       	movw	r18, r28
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	82 0f       	add	r24, r18
    1b8c:	93 1f       	adc	r25, r19
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	88 23       	and	r24, r24
    1b94:	59 f0       	breq	.+22     	; 0x1bac <m_usb_tx_int+0x6e>
            m_usb_tx_char(string[i]);
    1b96:	8f 81       	ldd	r24, Y+7	; 0x07
    1b98:	98 85       	ldd	r25, Y+8	; 0x08
    1b9a:	9e 01       	movw	r18, r28
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
    1ba8:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
    1bac:	8f 81       	ldd	r24, Y+7	; 0x07
    1bae:	98 85       	ldd	r25, Y+8	; 0x08
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	98 87       	std	Y+8, r25	; 0x08
    1bb4:	8f 83       	std	Y+7, r24	; 0x07
    1bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb8:	98 85       	ldd	r25, Y+8	; 0x08
    1bba:	86 30       	cpi	r24, 0x06	; 6
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	04 f3       	brlt	.-64     	; 0x1b80 <m_usb_tx_int+0x42>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1bc0:	28 96       	adiw	r28, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <m_usb_tx_uint>:

void m_usb_tx_uint(unsigned int i)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	27 97       	sbiw	r28, 0x07	; 7
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	9f 83       	std	Y+7, r25	; 0x07
    1be8:	8e 83       	std	Y+6, r24	; 0x06
	char string[5] = {0,0,0,0,0};
    1bea:	25 e0       	ldi	r18, 0x05	; 5
    1bec:	ce 01       	movw	r24, r28
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	32 2f       	mov	r19, r18
    1bf4:	11 92       	st	Z+, r1
    1bf6:	3a 95       	dec	r19
    1bf8:	e9 f7       	brne	.-6      	; 0x1bf4 <m_usb_tx_uint+0x22>
	utoa(i,string,10);
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	9e 01       	movw	r18, r28
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	b9 01       	movw	r22, r18
    1c06:	4a e0       	ldi	r20, 0x0A	; 10
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <utoa>
	for(i=0;i<5;i++){
    1c0e:	1f 82       	std	Y+7, r1	; 0x07
    1c10:	1e 82       	std	Y+6, r1	; 0x06
    1c12:	1b c0       	rjmp	.+54     	; 0x1c4a <m_usb_tx_uint+0x78>
        if(string[i]){
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	9f 81       	ldd	r25, Y+7	; 0x07
    1c18:	9e 01       	movw	r18, r28
    1c1a:	2f 5f       	subi	r18, 0xFF	; 255
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	fc 01       	movw	r30, r24
    1c24:	80 81       	ld	r24, Z
    1c26:	88 23       	and	r24, r24
    1c28:	59 f0       	breq	.+22     	; 0x1c40 <m_usb_tx_uint+0x6e>
            m_usb_tx_char(string[i]);
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2e:	9e 01       	movw	r18, r28
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	fc 01       	movw	r30, r24
    1c3a:	80 81       	ld	r24, Z
    1c3c:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	9f 83       	std	Y+7, r25	; 0x07
    1c48:	8e 83       	std	Y+6, r24	; 0x06
    1c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4e:	85 30       	cpi	r24, 0x05	; 5
    1c50:	91 05       	cpc	r25, r1
    1c52:	00 f3       	brcs	.-64     	; 0x1c14 <m_usb_tx_uint+0x42>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1c54:	27 96       	adiw	r28, 0x07	; 7
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <m_usb_tx_long>:

void m_usb_tx_long(long i)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	2f 97       	sbiw	r28, 0x0f	; 15
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	6c 87       	std	Y+12, r22	; 0x0c
    1c7c:	7d 87       	std	Y+13, r23	; 0x0d
    1c7e:	8e 87       	std	Y+14, r24	; 0x0e
    1c80:	9f 87       	std	Y+15, r25	; 0x0f
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    1c82:	2b e0       	ldi	r18, 0x0B	; 11
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	fc 01       	movw	r30, r24
    1c8a:	32 2f       	mov	r19, r18
    1c8c:	11 92       	st	Z+, r1
    1c8e:	3a 95       	dec	r19
    1c90:	e9 f7       	brne	.-6      	; 0x1c8c <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    1c92:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c94:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c96:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c98:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	9e 01       	movw	r18, r28
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	a9 01       	movw	r20, r18
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	0e 94 83 14 	call	0x2906	; 0x2906 <ltoa>
	for(i=0;i<11;i++){
    1cae:	1c 86       	std	Y+12, r1	; 0x0c
    1cb0:	1d 86       	std	Y+13, r1	; 0x0d
    1cb2:	1e 86       	std	Y+14, r1	; 0x0e
    1cb4:	1f 86       	std	Y+15, r1	; 0x0f
    1cb6:	21 c0       	rjmp	.+66     	; 0x1cfa <m_usb_tx_long+0x94>
        if(string[i]){
    1cb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cba:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cbc:	9e 01       	movw	r18, r28
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	82 0f       	add	r24, r18
    1cc4:	93 1f       	adc	r25, r19
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <m_usb_tx_long+0x7e>
            m_usb_tx_char(string[i]);
    1cce:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2f 5f       	subi	r18, 0xFF	; 255
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    1ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ce6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ce8:	ae 85       	ldd	r26, Y+14	; 0x0e
    1cea:	bf 85       	ldd	r27, Y+15	; 0x0f
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	b1 1d       	adc	r27, r1
    1cf2:	8c 87       	std	Y+12, r24	; 0x0c
    1cf4:	9d 87       	std	Y+13, r25	; 0x0d
    1cf6:	ae 87       	std	Y+14, r26	; 0x0e
    1cf8:	bf 87       	std	Y+15, r27	; 0x0f
    1cfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cfc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cfe:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d00:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d02:	8b 30       	cpi	r24, 0x0B	; 11
    1d04:	91 05       	cpc	r25, r1
    1d06:	a1 05       	cpc	r26, r1
    1d08:	b1 05       	cpc	r27, r1
    1d0a:	b4 f2       	brlt	.-84     	; 0x1cb8 <m_usb_tx_long+0x52>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1d0c:	2f 96       	adiw	r28, 0x0f	; 15
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <m_usb_tx_ulong>:

void m_usb_tx_ulong(unsigned long i)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	2e 97       	sbiw	r28, 0x0e	; 14
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	6b 87       	std	Y+11, r22	; 0x0b
    1d34:	7c 87       	std	Y+12, r23	; 0x0c
    1d36:	8d 87       	std	Y+13, r24	; 0x0d
    1d38:	9e 87       	std	Y+14, r25	; 0x0e
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    1d3a:	2a e0       	ldi	r18, 0x0A	; 10
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	fc 01       	movw	r30, r24
    1d42:	32 2f       	mov	r19, r18
    1d44:	11 92       	st	Z+, r1
    1d46:	3a 95       	dec	r19
    1d48:	e9 f7       	brne	.-6      	; 0x1d44 <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    1d4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d4e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d50:	be 85       	ldd	r27, Y+14	; 0x0e
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	9e 01       	movw	r18, r28
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	2a e0       	ldi	r18, 0x0A	; 10
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	0e 94 b7 14 	call	0x296e	; 0x296e <ultoa>
	for(i=0;i<10;i++){
    1d66:	1b 86       	std	Y+11, r1	; 0x0b
    1d68:	1c 86       	std	Y+12, r1	; 0x0c
    1d6a:	1d 86       	std	Y+13, r1	; 0x0d
    1d6c:	1e 86       	std	Y+14, r1	; 0x0e
    1d6e:	21 c0       	rjmp	.+66     	; 0x1db2 <m_usb_tx_ulong+0x94>
        if(string[i]){
    1d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d72:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d74:	9e 01       	movw	r18, r28
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	82 0f       	add	r24, r18
    1d7c:	93 1f       	adc	r25, r19
    1d7e:	fc 01       	movw	r30, r24
    1d80:	80 81       	ld	r24, Z
    1d82:	88 23       	and	r24, r24
    1d84:	59 f0       	breq	.+22     	; 0x1d9c <m_usb_tx_ulong+0x7e>
            m_usb_tx_char(string[i]);
    1d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d8a:	9e 01       	movw	r18, r28
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	82 0f       	add	r24, r18
    1d92:	93 1f       	adc	r25, r19
    1d94:	fc 01       	movw	r30, r24
    1d96:	80 81       	ld	r24, Z
    1d98:	0e 94 1a 04 	call	0x834	; 0x834 <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    1d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1da0:	ad 85       	ldd	r26, Y+13	; 0x0d
    1da2:	be 85       	ldd	r27, Y+14	; 0x0e
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	a1 1d       	adc	r26, r1
    1da8:	b1 1d       	adc	r27, r1
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	9c 87       	std	Y+12, r25	; 0x0c
    1dae:	ad 87       	std	Y+13, r26	; 0x0d
    1db0:	be 87       	std	Y+14, r27	; 0x0e
    1db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db6:	ad 85       	ldd	r26, Y+13	; 0x0d
    1db8:	be 85       	ldd	r27, Y+14	; 0x0e
    1dba:	8a 30       	cpi	r24, 0x0A	; 10
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	a1 05       	cpc	r26, r1
    1dc0:	b1 05       	cpc	r27, r1
    1dc2:	b0 f2       	brcs	.-84     	; 0x1d70 <m_usb_tx_ulong+0x52>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
    1dc4:	2e 96       	adiw	r28, 0x0e	; 14
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <__fixunssfsi>:
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	7b 01       	movw	r14, r22
    1de0:	8c 01       	movw	r16, r24
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	5f e4       	ldi	r21, 0x4F	; 79
    1dea:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__gesf2>
    1dee:	87 fd       	sbrc	r24, 7
    1df0:	11 c0       	rjmp	.+34     	; 0x1e14 <__fixunssfsi+0x3e>
    1df2:	c8 01       	movw	r24, r16
    1df4:	b7 01       	movw	r22, r14
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	5f e4       	ldi	r21, 0x4F	; 79
    1dfe:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    1e02:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixsfsi>
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	20 50       	subi	r18, 0x00	; 0
    1e0c:	30 40       	sbci	r19, 0x00	; 0
    1e0e:	40 40       	sbci	r20, 0x00	; 0
    1e10:	50 48       	sbci	r21, 0x80	; 128
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <__fixunssfsi+0x4a>
    1e14:	c8 01       	movw	r24, r16
    1e16:	b7 01       	movw	r22, r14
    1e18:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixsfsi>
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	ac 01       	movw	r20, r24
    1e20:	b9 01       	movw	r22, r18
    1e22:	ca 01       	movw	r24, r20
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	08 95       	ret

00001e2e <_fpadd_parts>:
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ed e1       	ldi	r30, 0x1D	; 29
    1e34:	ff e0       	ldi	r31, 0x0F	; 15
    1e36:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x8>
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	ea 01       	movw	r28, r20
    1e3e:	80 81       	ld	r24, Z
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	08 f4       	brcc	.+2      	; 0x1e46 <_fpadd_parts+0x18>
    1e44:	38 c1       	rjmp	.+624    	; 0x20b6 <_fpadd_parts+0x288>
    1e46:	db 01       	movw	r26, r22
    1e48:	9c 91       	ld	r25, X
    1e4a:	92 30       	cpi	r25, 0x02	; 2
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <_fpadd_parts+0x22>
    1e4e:	30 c1       	rjmp	.+608    	; 0x20b0 <_fpadd_parts+0x282>
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	59 f4       	brne	.+22     	; 0x1e6a <_fpadd_parts+0x3c>
    1e54:	94 30       	cpi	r25, 0x04	; 4
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <_fpadd_parts+0x2c>
    1e58:	2e c1       	rjmp	.+604    	; 0x20b6 <_fpadd_parts+0x288>
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	8c 91       	ld	r24, X
    1e60:	11 97       	sbiw	r26, 0x01	; 1
    1e62:	98 17       	cp	r25, r24
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <_fpadd_parts+0x3a>
    1e66:	21 c1       	rjmp	.+578    	; 0x20aa <_fpadd_parts+0x27c>
    1e68:	26 c1       	rjmp	.+588    	; 0x20b6 <_fpadd_parts+0x288>
    1e6a:	94 30       	cpi	r25, 0x04	; 4
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <_fpadd_parts+0x42>
    1e6e:	20 c1       	rjmp	.+576    	; 0x20b0 <_fpadd_parts+0x282>
    1e70:	92 30       	cpi	r25, 0x02	; 2
    1e72:	b1 f4       	brne	.+44     	; 0x1ea0 <_fpadd_parts+0x72>
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <_fpadd_parts+0x4c>
    1e78:	1e c1       	rjmp	.+572    	; 0x20b6 <_fpadd_parts+0x288>
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	af 01       	movw	r20, r30
    1e7e:	28 e0       	ldi	r18, 0x08	; 8
    1e80:	da 01       	movw	r26, r20
    1e82:	0d 90       	ld	r0, X+
    1e84:	ad 01       	movw	r20, r26
    1e86:	dc 01       	movw	r26, r24
    1e88:	0d 92       	st	X+, r0
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	c1 f7       	brne	.-16     	; 0x1e80 <_fpadd_parts+0x52>
    1e90:	db 01       	movw	r26, r22
    1e92:	11 96       	adiw	r26, 0x01	; 1
    1e94:	8c 91       	ld	r24, X
    1e96:	11 97       	sbiw	r26, 0x01	; 1
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	89 23       	and	r24, r25
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	0a c1       	rjmp	.+532    	; 0x20b4 <_fpadd_parts+0x286>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <_fpadd_parts+0x78>
    1ea4:	05 c1       	rjmp	.+522    	; 0x20b0 <_fpadd_parts+0x282>
    1ea6:	c2 80       	ldd	r12, Z+2	; 0x02
    1ea8:	d3 80       	ldd	r13, Z+3	; 0x03
    1eaa:	db 01       	movw	r26, r22
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	6d 90       	ld	r6, X+
    1eb0:	7c 90       	ld	r7, X
    1eb2:	13 97       	sbiw	r26, 0x03	; 3
    1eb4:	24 81       	ldd	r18, Z+4	; 0x04
    1eb6:	35 81       	ldd	r19, Z+5	; 0x05
    1eb8:	46 81       	ldd	r20, Z+6	; 0x06
    1eba:	57 81       	ldd	r21, Z+7	; 0x07
    1ebc:	14 96       	adiw	r26, 0x04	; 4
    1ebe:	ed 90       	ld	r14, X+
    1ec0:	fd 90       	ld	r15, X+
    1ec2:	0d 91       	ld	r16, X+
    1ec4:	1c 91       	ld	r17, X
    1ec6:	17 97       	sbiw	r26, 0x07	; 7
    1ec8:	c6 01       	movw	r24, r12
    1eca:	86 19       	sub	r24, r6
    1ecc:	97 09       	sbc	r25, r7
    1ece:	5c 01       	movw	r10, r24
    1ed0:	97 ff       	sbrs	r25, 7
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <_fpadd_parts+0xae>
    1ed4:	aa 24       	eor	r10, r10
    1ed6:	bb 24       	eor	r11, r11
    1ed8:	a8 1a       	sub	r10, r24
    1eda:	b9 0a       	sbc	r11, r25
    1edc:	b0 e2       	ldi	r27, 0x20	; 32
    1ede:	ab 16       	cp	r10, r27
    1ee0:	b1 04       	cpc	r11, r1
    1ee2:	0c f0       	brlt	.+2      	; 0x1ee6 <_fpadd_parts+0xb8>
    1ee4:	61 c0       	rjmp	.+194    	; 0x1fa8 <_fpadd_parts+0x17a>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	19 06       	cpc	r1, r25
    1eea:	6c f5       	brge	.+90     	; 0x1f46 <_fpadd_parts+0x118>
    1eec:	37 01       	movw	r6, r14
    1eee:	48 01       	movw	r8, r16
    1ef0:	0a 2c       	mov	r0, r10
    1ef2:	04 c0       	rjmp	.+8      	; 0x1efc <_fpadd_parts+0xce>
    1ef4:	96 94       	lsr	r9
    1ef6:	87 94       	ror	r8
    1ef8:	77 94       	ror	r7
    1efa:	67 94       	ror	r6
    1efc:	0a 94       	dec	r0
    1efe:	d2 f7       	brpl	.-12     	; 0x1ef4 <_fpadd_parts+0xc6>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e0       	ldi	r26, 0x00	; 0
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	0a 2c       	mov	r0, r10
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <_fpadd_parts+0xe6>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	aa 1f       	adc	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	0a 94       	dec	r0
    1f16:	d2 f7       	brpl	.-12     	; 0x1f0c <_fpadd_parts+0xde>
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	a1 09       	sbc	r26, r1
    1f1c:	b1 09       	sbc	r27, r1
    1f1e:	8e 21       	and	r24, r14
    1f20:	9f 21       	and	r25, r15
    1f22:	a0 23       	and	r26, r16
    1f24:	b1 23       	and	r27, r17
    1f26:	ee 24       	eor	r14, r14
    1f28:	ff 24       	eor	r15, r15
    1f2a:	87 01       	movw	r16, r14
    1f2c:	e3 94       	inc	r14
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	a1 05       	cpc	r26, r1
    1f32:	b1 05       	cpc	r27, r1
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <_fpadd_parts+0x10e>
    1f36:	ee 24       	eor	r14, r14
    1f38:	ff 24       	eor	r15, r15
    1f3a:	87 01       	movw	r16, r14
    1f3c:	e6 28       	or	r14, r6
    1f3e:	f7 28       	or	r15, r7
    1f40:	08 29       	or	r16, r8
    1f42:	19 29       	or	r17, r9
    1f44:	3c c0       	rjmp	.+120    	; 0x1fbe <_fpadd_parts+0x190>
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	d1 f1       	breq	.+116    	; 0x1fbe <_fpadd_parts+0x190>
    1f4a:	ca 0c       	add	r12, r10
    1f4c:	db 1c       	adc	r13, r11
    1f4e:	39 01       	movw	r6, r18
    1f50:	4a 01       	movw	r8, r20
    1f52:	0a 2c       	mov	r0, r10
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <_fpadd_parts+0x130>
    1f56:	96 94       	lsr	r9
    1f58:	87 94       	ror	r8
    1f5a:	77 94       	ror	r7
    1f5c:	67 94       	ror	r6
    1f5e:	0a 94       	dec	r0
    1f60:	d2 f7       	brpl	.-12     	; 0x1f56 <_fpadd_parts+0x128>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	0a 2c       	mov	r0, r10
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <_fpadd_parts+0x148>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	aa 1f       	adc	r26, r26
    1f74:	bb 1f       	adc	r27, r27
    1f76:	0a 94       	dec	r0
    1f78:	d2 f7       	brpl	.-12     	; 0x1f6e <_fpadd_parts+0x140>
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	a1 09       	sbc	r26, r1
    1f7e:	b1 09       	sbc	r27, r1
    1f80:	82 23       	and	r24, r18
    1f82:	93 23       	and	r25, r19
    1f84:	a4 23       	and	r26, r20
    1f86:	b5 23       	and	r27, r21
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	a1 05       	cpc	r26, r1
    1f94:	b1 05       	cpc	r27, r1
    1f96:	19 f4       	brne	.+6      	; 0x1f9e <_fpadd_parts+0x170>
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	a9 01       	movw	r20, r18
    1f9e:	26 29       	or	r18, r6
    1fa0:	37 29       	or	r19, r7
    1fa2:	48 29       	or	r20, r8
    1fa4:	59 29       	or	r21, r9
    1fa6:	0b c0       	rjmp	.+22     	; 0x1fbe <_fpadd_parts+0x190>
    1fa8:	6c 14       	cp	r6, r12
    1faa:	7d 04       	cpc	r7, r13
    1fac:	24 f4       	brge	.+8      	; 0x1fb6 <_fpadd_parts+0x188>
    1fae:	ee 24       	eor	r14, r14
    1fb0:	ff 24       	eor	r15, r15
    1fb2:	87 01       	movw	r16, r14
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <_fpadd_parts+0x190>
    1fb6:	63 01       	movw	r12, r6
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	81 81       	ldd	r24, Z+1	; 0x01
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	89 17       	cp	r24, r25
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <_fpadd_parts+0x19c>
    1fc8:	45 c0       	rjmp	.+138    	; 0x2054 <_fpadd_parts+0x226>
    1fca:	88 23       	and	r24, r24
    1fcc:	49 f0       	breq	.+18     	; 0x1fe0 <_fpadd_parts+0x1b2>
    1fce:	d8 01       	movw	r26, r16
    1fd0:	c7 01       	movw	r24, r14
    1fd2:	82 1b       	sub	r24, r18
    1fd4:	93 0b       	sbc	r25, r19
    1fd6:	a4 0b       	sbc	r26, r20
    1fd8:	b5 0b       	sbc	r27, r21
    1fda:	9c 01       	movw	r18, r24
    1fdc:	ad 01       	movw	r20, r26
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <_fpadd_parts+0x1ba>
    1fe0:	2e 19       	sub	r18, r14
    1fe2:	3f 09       	sbc	r19, r15
    1fe4:	40 0b       	sbc	r20, r16
    1fe6:	51 0b       	sbc	r21, r17
    1fe8:	57 fd       	sbrc	r21, 7
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <_fpadd_parts+0x1c6>
    1fec:	19 82       	std	Y+1, r1	; 0x01
    1fee:	db 82       	std	Y+3, r13	; 0x03
    1ff0:	ca 82       	std	Y+2, r12	; 0x02
    1ff2:	0b c0       	rjmp	.+22     	; 0x200a <_fpadd_parts+0x1dc>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	db 82       	std	Y+3, r13	; 0x03
    1ffa:	ca 82       	std	Y+2, r12	; 0x02
    1ffc:	50 95       	com	r21
    1ffe:	40 95       	com	r20
    2000:	30 95       	com	r19
    2002:	21 95       	neg	r18
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	4f 4f       	sbci	r20, 0xFF	; 255
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	2c 83       	std	Y+4, r18	; 0x04
    200c:	3d 83       	std	Y+5, r19	; 0x05
    200e:	4e 83       	std	Y+6, r20	; 0x06
    2010:	5f 83       	std	Y+7, r21	; 0x07
    2012:	0d c0       	rjmp	.+26     	; 0x202e <_fpadd_parts+0x200>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	aa 1f       	adc	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	8c 83       	std	Y+4, r24	; 0x04
    201e:	9d 83       	std	Y+5, r25	; 0x05
    2020:	ae 83       	std	Y+6, r26	; 0x06
    2022:	bf 83       	std	Y+7, r27	; 0x07
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9b 83       	std	Y+3, r25	; 0x03
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	ae 81       	ldd	r26, Y+6	; 0x06
    2034:	bf 81       	ldd	r27, Y+7	; 0x07
    2036:	9c 01       	movw	r18, r24
    2038:	ad 01       	movw	r20, r26
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	30 40       	sbci	r19, 0x00	; 0
    203e:	40 40       	sbci	r20, 0x00	; 0
    2040:	50 40       	sbci	r21, 0x00	; 0
    2042:	2f 3f       	cpi	r18, 0xFF	; 255
    2044:	ef ef       	ldi	r30, 0xFF	; 255
    2046:	3e 07       	cpc	r19, r30
    2048:	ef ef       	ldi	r30, 0xFF	; 255
    204a:	4e 07       	cpc	r20, r30
    204c:	ef e3       	ldi	r30, 0x3F	; 63
    204e:	5e 07       	cpc	r21, r30
    2050:	08 f3       	brcs	.-62     	; 0x2014 <_fpadd_parts+0x1e6>
    2052:	0b c0       	rjmp	.+22     	; 0x206a <_fpadd_parts+0x23c>
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	db 82       	std	Y+3, r13	; 0x03
    2058:	ca 82       	std	Y+2, r12	; 0x02
    205a:	2e 0d       	add	r18, r14
    205c:	3f 1d       	adc	r19, r15
    205e:	40 1f       	adc	r20, r16
    2060:	51 1f       	adc	r21, r17
    2062:	2c 83       	std	Y+4, r18	; 0x04
    2064:	3d 83       	std	Y+5, r19	; 0x05
    2066:	4e 83       	std	Y+6, r20	; 0x06
    2068:	5f 83       	std	Y+7, r21	; 0x07
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	88 83       	st	Y, r24
    206e:	2c 81       	ldd	r18, Y+4	; 0x04
    2070:	3d 81       	ldd	r19, Y+5	; 0x05
    2072:	4e 81       	ldd	r20, Y+6	; 0x06
    2074:	5f 81       	ldd	r21, Y+7	; 0x07
    2076:	57 ff       	sbrs	r21, 7
    2078:	1d c0       	rjmp	.+58     	; 0x20b4 <_fpadd_parts+0x286>
    207a:	da 01       	movw	r26, r20
    207c:	c9 01       	movw	r24, r18
    207e:	81 70       	andi	r24, 0x01	; 1
    2080:	90 70       	andi	r25, 0x00	; 0
    2082:	a0 70       	andi	r26, 0x00	; 0
    2084:	b0 70       	andi	r27, 0x00	; 0
    2086:	56 95       	lsr	r21
    2088:	47 95       	ror	r20
    208a:	37 95       	ror	r19
    208c:	27 95       	ror	r18
    208e:	82 2b       	or	r24, r18
    2090:	93 2b       	or	r25, r19
    2092:	a4 2b       	or	r26, r20
    2094:	b5 2b       	or	r27, r21
    2096:	8c 83       	std	Y+4, r24	; 0x04
    2098:	9d 83       	std	Y+5, r25	; 0x05
    209a:	ae 83       	std	Y+6, r26	; 0x06
    209c:	bf 83       	std	Y+7, r27	; 0x07
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	9b 83       	std	Y+3, r25	; 0x03
    20a6:	8a 83       	std	Y+2, r24	; 0x02
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <_fpadd_parts+0x286>
    20aa:	e7 e0       	ldi	r30, 0x07	; 7
    20ac:	f1 e0       	ldi	r31, 0x01	; 1
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <_fpadd_parts+0x288>
    20b0:	fb 01       	movw	r30, r22
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <_fpadd_parts+0x288>
    20b4:	fe 01       	movw	r30, r28
    20b6:	cf 01       	movw	r24, r30
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	ee e0       	ldi	r30, 0x0E	; 14
    20be:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x8>

000020c2 <__addsf3>:
    20c2:	a0 e2       	ldi	r26, 0x20	; 32
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e6       	ldi	r30, 0x67	; 103
    20c8:	f0 e1       	ldi	r31, 0x10	; 16
    20ca:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__+0x18>
    20ce:	69 83       	std	Y+1, r22	; 0x01
    20d0:	7a 83       	std	Y+2, r23	; 0x02
    20d2:	8b 83       	std	Y+3, r24	; 0x03
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	2d 83       	std	Y+5, r18	; 0x05
    20d8:	3e 83       	std	Y+6, r19	; 0x06
    20da:	4f 83       	std	Y+7, r20	; 0x07
    20dc:	58 87       	std	Y+8, r21	; 0x08
    20de:	89 e0       	ldi	r24, 0x09	; 9
    20e0:	e8 2e       	mov	r14, r24
    20e2:	f1 2c       	mov	r15, r1
    20e4:	ec 0e       	add	r14, r28
    20e6:	fd 1e       	adc	r15, r29
    20e8:	ce 01       	movw	r24, r28
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	b7 01       	movw	r22, r14
    20ee:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    20f2:	8e 01       	movw	r16, r28
    20f4:	0f 5e       	subi	r16, 0xEF	; 239
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	05 96       	adiw	r24, 0x05	; 5
    20fc:	b8 01       	movw	r22, r16
    20fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    2102:	c7 01       	movw	r24, r14
    2104:	b8 01       	movw	r22, r16
    2106:	ae 01       	movw	r20, r28
    2108:	47 5e       	subi	r20, 0xE7	; 231
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_fpadd_parts>
    2110:	0e 94 9b 12 	call	0x2536	; 0x2536 <__pack_f>
    2114:	a0 96       	adiw	r28, 0x20	; 32
    2116:	e6 e0       	ldi	r30, 0x06	; 6
    2118:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

0000211c <__subsf3>:
    211c:	a0 e2       	ldi	r26, 0x20	; 32
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e4 e9       	ldi	r30, 0x94	; 148
    2122:	f0 e1       	ldi	r31, 0x10	; 16
    2124:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__+0x18>
    2128:	69 83       	std	Y+1, r22	; 0x01
    212a:	7a 83       	std	Y+2, r23	; 0x02
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	2d 83       	std	Y+5, r18	; 0x05
    2132:	3e 83       	std	Y+6, r19	; 0x06
    2134:	4f 83       	std	Y+7, r20	; 0x07
    2136:	58 87       	std	Y+8, r21	; 0x08
    2138:	8e 01       	movw	r16, r28
    213a:	07 5f       	subi	r16, 0xF7	; 247
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	b8 01       	movw	r22, r16
    2144:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    2148:	91 e1       	ldi	r25, 0x11	; 17
    214a:	e9 2e       	mov	r14, r25
    214c:	f1 2c       	mov	r15, r1
    214e:	ec 0e       	add	r14, r28
    2150:	fd 1e       	adc	r15, r29
    2152:	ce 01       	movw	r24, r28
    2154:	05 96       	adiw	r24, 0x05	; 5
    2156:	b7 01       	movw	r22, r14
    2158:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    215c:	8a 89       	ldd	r24, Y+18	; 0x12
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	89 27       	eor	r24, r25
    2162:	8a 8b       	std	Y+18, r24	; 0x12
    2164:	c8 01       	movw	r24, r16
    2166:	b7 01       	movw	r22, r14
    2168:	ae 01       	movw	r20, r28
    216a:	47 5e       	subi	r20, 0xE7	; 231
    216c:	5f 4f       	sbci	r21, 0xFF	; 255
    216e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_fpadd_parts>
    2172:	0e 94 9b 12 	call	0x2536	; 0x2536 <__pack_f>
    2176:	a0 96       	adiw	r28, 0x20	; 32
    2178:	e6 e0       	ldi	r30, 0x06	; 6
    217a:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

0000217e <__mulsf3>:
    217e:	a0 e2       	ldi	r26, 0x20	; 32
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 ec       	ldi	r30, 0xC5	; 197
    2184:	f0 e1       	ldi	r31, 0x10	; 16
    2186:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__>
    218a:	69 83       	std	Y+1, r22	; 0x01
    218c:	7a 83       	std	Y+2, r23	; 0x02
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	2d 83       	std	Y+5, r18	; 0x05
    2194:	3e 83       	std	Y+6, r19	; 0x06
    2196:	4f 83       	std	Y+7, r20	; 0x07
    2198:	58 87       	std	Y+8, r21	; 0x08
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	be 01       	movw	r22, r28
    21a0:	67 5f       	subi	r22, 0xF7	; 247
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    21a8:	ce 01       	movw	r24, r28
    21aa:	05 96       	adiw	r24, 0x05	; 5
    21ac:	be 01       	movw	r22, r28
    21ae:	6f 5e       	subi	r22, 0xEF	; 239
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    21b6:	99 85       	ldd	r25, Y+9	; 0x09
    21b8:	92 30       	cpi	r25, 0x02	; 2
    21ba:	78 f0       	brcs	.+30     	; 0x21da <__mulsf3+0x5c>
    21bc:	89 89       	ldd	r24, Y+17	; 0x11
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	c0 f0       	brcs	.+48     	; 0x21f2 <__mulsf3+0x74>
    21c2:	94 30       	cpi	r25, 0x04	; 4
    21c4:	19 f4       	brne	.+6      	; 0x21cc <__mulsf3+0x4e>
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	41 f4       	brne	.+16     	; 0x21da <__mulsf3+0x5c>
    21ca:	cb c0       	rjmp	.+406    	; 0x2362 <__mulsf3+0x1e4>
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <__mulsf3+0x58>
    21d0:	92 30       	cpi	r25, 0x02	; 2
    21d2:	79 f4       	brne	.+30     	; 0x21f2 <__mulsf3+0x74>
    21d4:	c6 c0       	rjmp	.+396    	; 0x2362 <__mulsf3+0x1e4>
    21d6:	92 30       	cpi	r25, 0x02	; 2
    21d8:	51 f4       	brne	.+20     	; 0x21ee <__mulsf3+0x70>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    21de:	9a 89       	ldd	r25, Y+18	; 0x12
    21e0:	29 17       	cp	r18, r25
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__mulsf3+0x68>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	8a 87       	std	Y+10, r24	; 0x0a
    21e8:	ce 01       	movw	r24, r28
    21ea:	09 96       	adiw	r24, 0x09	; 9
    21ec:	bc c0       	rjmp	.+376    	; 0x2366 <__mulsf3+0x1e8>
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	51 f4       	brne	.+20     	; 0x2206 <__mulsf3+0x88>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    21f6:	9a 89       	ldd	r25, Y+18	; 0x12
    21f8:	29 17       	cp	r18, r25
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__mulsf3+0x80>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	8a 8b       	std	Y+18, r24	; 0x12
    2200:	ce 01       	movw	r24, r28
    2202:	41 96       	adiw	r24, 0x11	; 17
    2204:	b0 c0       	rjmp	.+352    	; 0x2366 <__mulsf3+0x1e8>
    2206:	6d 84       	ldd	r6, Y+13	; 0x0d
    2208:	7e 84       	ldd	r7, Y+14	; 0x0e
    220a:	8f 84       	ldd	r8, Y+15	; 0x0f
    220c:	98 88       	ldd	r9, Y+16	; 0x10
    220e:	ed 88       	ldd	r14, Y+21	; 0x15
    2210:	fe 88       	ldd	r15, Y+22	; 0x16
    2212:	0f 89       	ldd	r16, Y+23	; 0x17
    2214:	18 8d       	ldd	r17, Y+24	; 0x18
    2216:	e0 e2       	ldi	r30, 0x20	; 32
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	dc 01       	movw	r26, r24
    2220:	aa 24       	eor	r10, r10
    2222:	bb 24       	eor	r11, r11
    2224:	65 01       	movw	r12, r10
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	a9 01       	movw	r20, r18
    222c:	b3 01       	movw	r22, r6
    222e:	61 70       	andi	r22, 0x01	; 1
    2230:	70 70       	andi	r23, 0x00	; 0
    2232:	61 15       	cp	r22, r1
    2234:	71 05       	cpc	r23, r1
    2236:	d1 f0       	breq	.+52     	; 0x226c <__mulsf3+0xee>
    2238:	2e 0d       	add	r18, r14
    223a:	3f 1d       	adc	r19, r15
    223c:	40 1f       	adc	r20, r16
    223e:	51 1f       	adc	r21, r17
    2240:	15 01       	movw	r2, r10
    2242:	26 01       	movw	r4, r12
    2244:	28 0e       	add	r2, r24
    2246:	39 1e       	adc	r3, r25
    2248:	4a 1e       	adc	r4, r26
    224a:	5b 1e       	adc	r5, r27
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e0       	ldi	r26, 0x00	; 0
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	2e 15       	cp	r18, r14
    2256:	3f 05       	cpc	r19, r15
    2258:	40 07       	cpc	r20, r16
    225a:	51 07       	cpc	r21, r17
    225c:	18 f0       	brcs	.+6      	; 0x2264 <__mulsf3+0xe6>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	dc 01       	movw	r26, r24
    2264:	82 0d       	add	r24, r2
    2266:	93 1d       	adc	r25, r3
    2268:	a4 1d       	adc	r26, r4
    226a:	b5 1d       	adc	r27, r5
    226c:	aa 0c       	add	r10, r10
    226e:	bb 1c       	adc	r11, r11
    2270:	cc 1c       	adc	r12, r12
    2272:	dd 1c       	adc	r13, r13
    2274:	17 ff       	sbrs	r17, 7
    2276:	09 c0       	rjmp	.+18     	; 0x228a <__mulsf3+0x10c>
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	26 2e       	mov	r2, r22
    227c:	31 2c       	mov	r3, r1
    227e:	41 2c       	mov	r4, r1
    2280:	51 2c       	mov	r5, r1
    2282:	a2 28       	or	r10, r2
    2284:	b3 28       	or	r11, r3
    2286:	c4 28       	or	r12, r4
    2288:	d5 28       	or	r13, r5
    228a:	31 97       	sbiw	r30, 0x01	; 1
    228c:	49 f0       	breq	.+18     	; 0x22a0 <__mulsf3+0x122>
    228e:	ee 0c       	add	r14, r14
    2290:	ff 1c       	adc	r15, r15
    2292:	00 1f       	adc	r16, r16
    2294:	11 1f       	adc	r17, r17
    2296:	96 94       	lsr	r9
    2298:	87 94       	ror	r8
    229a:	77 94       	ror	r7
    229c:	67 94       	ror	r6
    229e:	c6 cf       	rjmp	.-116    	; 0x222c <__mulsf3+0xae>
    22a0:	6b 89       	ldd	r22, Y+19	; 0x13
    22a2:	7c 89       	ldd	r23, Y+20	; 0x14
    22a4:	eb 85       	ldd	r30, Y+11	; 0x0b
    22a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    22a8:	6e 0f       	add	r22, r30
    22aa:	7f 1f       	adc	r23, r31
    22ac:	6e 5f       	subi	r22, 0xFE	; 254
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	7c 8f       	std	Y+28, r23	; 0x1c
    22b2:	6b 8f       	std	Y+27, r22	; 0x1b
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    22b8:	7a 89       	ldd	r23, Y+18	; 0x12
    22ba:	e7 17       	cp	r30, r23
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <__mulsf3+0x142>
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	6a 8f       	std	Y+26, r22	; 0x1a
    22c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    22c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    22c6:	10 c0       	rjmp	.+32     	; 0x22e8 <__mulsf3+0x16a>
    22c8:	fc 01       	movw	r30, r24
    22ca:	e1 70       	andi	r30, 0x01	; 1
    22cc:	f0 70       	andi	r31, 0x00	; 0
    22ce:	30 97       	sbiw	r30, 0x00	; 0
    22d0:	29 f0       	breq	.+10     	; 0x22dc <__mulsf3+0x15e>
    22d2:	56 95       	lsr	r21
    22d4:	47 95       	ror	r20
    22d6:	37 95       	ror	r19
    22d8:	27 95       	ror	r18
    22da:	50 68       	ori	r21, 0x80	; 128
    22dc:	b6 95       	lsr	r27
    22de:	a7 95       	ror	r26
    22e0:	97 95       	ror	r25
    22e2:	87 95       	ror	r24
    22e4:	6f 5f       	subi	r22, 0xFF	; 255
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	b7 fd       	sbrc	r27, 7
    22ea:	ee cf       	rjmp	.-36     	; 0x22c8 <__mulsf3+0x14a>
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <__mulsf3+0x188>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	aa 1f       	adc	r26, r26
    22f4:	bb 1f       	adc	r27, r27
    22f6:	57 fd       	sbrc	r21, 7
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	44 1f       	adc	r20, r20
    2300:	55 1f       	adc	r21, r21
    2302:	61 50       	subi	r22, 0x01	; 1
    2304:	70 40       	sbci	r23, 0x00	; 0
    2306:	80 30       	cpi	r24, 0x00	; 0
    2308:	e0 e0       	ldi	r30, 0x00	; 0
    230a:	9e 07       	cpc	r25, r30
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	ae 07       	cpc	r26, r30
    2310:	e0 e4       	ldi	r30, 0x40	; 64
    2312:	be 07       	cpc	r27, r30
    2314:	60 f3       	brcs	.-40     	; 0x22ee <__mulsf3+0x170>
    2316:	6b 8f       	std	Y+27, r22	; 0x1b
    2318:	7c 8f       	std	Y+28, r23	; 0x1c
    231a:	6f e7       	ldi	r22, 0x7F	; 127
    231c:	e6 2e       	mov	r14, r22
    231e:	f1 2c       	mov	r15, r1
    2320:	01 2d       	mov	r16, r1
    2322:	11 2d       	mov	r17, r1
    2324:	e8 22       	and	r14, r24
    2326:	f9 22       	and	r15, r25
    2328:	0a 23       	and	r16, r26
    232a:	1b 23       	and	r17, r27
    232c:	60 e4       	ldi	r22, 0x40	; 64
    232e:	e6 16       	cp	r14, r22
    2330:	f1 04       	cpc	r15, r1
    2332:	01 05       	cpc	r16, r1
    2334:	11 05       	cpc	r17, r1
    2336:	61 f4       	brne	.+24     	; 0x2350 <__mulsf3+0x1d2>
    2338:	87 fd       	sbrc	r24, 7
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <__mulsf3+0x1d2>
    233c:	21 15       	cp	r18, r1
    233e:	31 05       	cpc	r19, r1
    2340:	41 05       	cpc	r20, r1
    2342:	51 05       	cpc	r21, r1
    2344:	29 f0       	breq	.+10     	; 0x2350 <__mulsf3+0x1d2>
    2346:	80 5c       	subi	r24, 0xC0	; 192
    2348:	9f 4f       	sbci	r25, 0xFF	; 255
    234a:	af 4f       	sbci	r26, 0xFF	; 255
    234c:	bf 4f       	sbci	r27, 0xFF	; 255
    234e:	80 78       	andi	r24, 0x80	; 128
    2350:	8d 8f       	std	Y+29, r24	; 0x1d
    2352:	9e 8f       	std	Y+30, r25	; 0x1e
    2354:	af 8f       	std	Y+31, r26	; 0x1f
    2356:	b8 a3       	std	Y+32, r27	; 0x20
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	89 8f       	std	Y+25, r24	; 0x19
    235c:	ce 01       	movw	r24, r28
    235e:	49 96       	adiw	r24, 0x19	; 25
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <__mulsf3+0x1e8>
    2362:	87 e0       	ldi	r24, 0x07	; 7
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	0e 94 9b 12 	call	0x2536	; 0x2536 <__pack_f>
    236a:	a0 96       	adiw	r28, 0x20	; 32
    236c:	e2 e1       	ldi	r30, 0x12	; 18
    236e:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__>

00002372 <__gtsf2>:
    2372:	a8 e1       	ldi	r26, 0x18	; 24
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ef eb       	ldi	r30, 0xBF	; 191
    2378:	f1 e1       	ldi	r31, 0x11	; 17
    237a:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__+0x18>
    237e:	69 83       	std	Y+1, r22	; 0x01
    2380:	7a 83       	std	Y+2, r23	; 0x02
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	2d 83       	std	Y+5, r18	; 0x05
    2388:	3e 83       	std	Y+6, r19	; 0x06
    238a:	4f 83       	std	Y+7, r20	; 0x07
    238c:	58 87       	std	Y+8, r21	; 0x08
    238e:	8e 01       	movw	r16, r28
    2390:	07 5f       	subi	r16, 0xF7	; 247
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	ce 01       	movw	r24, r28
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	b8 01       	movw	r22, r16
    239a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    239e:	81 e1       	ldi	r24, 0x11	; 17
    23a0:	e8 2e       	mov	r14, r24
    23a2:	f1 2c       	mov	r15, r1
    23a4:	ec 0e       	add	r14, r28
    23a6:	fd 1e       	adc	r15, r29
    23a8:	ce 01       	movw	r24, r28
    23aa:	05 96       	adiw	r24, 0x05	; 5
    23ac:	b7 01       	movw	r22, r14
    23ae:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	82 30       	cpi	r24, 0x02	; 2
    23b6:	40 f0       	brcs	.+16     	; 0x23c8 <__gtsf2+0x56>
    23b8:	89 89       	ldd	r24, Y+17	; 0x11
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	28 f0       	brcs	.+10     	; 0x23c8 <__gtsf2+0x56>
    23be:	c8 01       	movw	r24, r16
    23c0:	b7 01       	movw	r22, r14
    23c2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__fpcmp_parts_f>
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <__gtsf2+0x58>
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	68 96       	adiw	r28, 0x18	; 24
    23cc:	e6 e0       	ldi	r30, 0x06	; 6
    23ce:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

000023d2 <__gesf2>:
    23d2:	a8 e1       	ldi	r26, 0x18	; 24
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ef ee       	ldi	r30, 0xEF	; 239
    23d8:	f1 e1       	ldi	r31, 0x11	; 17
    23da:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__+0x18>
    23de:	69 83       	std	Y+1, r22	; 0x01
    23e0:	7a 83       	std	Y+2, r23	; 0x02
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	2d 83       	std	Y+5, r18	; 0x05
    23e8:	3e 83       	std	Y+6, r19	; 0x06
    23ea:	4f 83       	std	Y+7, r20	; 0x07
    23ec:	58 87       	std	Y+8, r21	; 0x08
    23ee:	8e 01       	movw	r16, r28
    23f0:	07 5f       	subi	r16, 0xF7	; 247
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	b8 01       	movw	r22, r16
    23fa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    23fe:	81 e1       	ldi	r24, 0x11	; 17
    2400:	e8 2e       	mov	r14, r24
    2402:	f1 2c       	mov	r15, r1
    2404:	ec 0e       	add	r14, r28
    2406:	fd 1e       	adc	r15, r29
    2408:	ce 01       	movw	r24, r28
    240a:	05 96       	adiw	r24, 0x05	; 5
    240c:	b7 01       	movw	r22, r14
    240e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	82 30       	cpi	r24, 0x02	; 2
    2416:	40 f0       	brcs	.+16     	; 0x2428 <__gesf2+0x56>
    2418:	89 89       	ldd	r24, Y+17	; 0x11
    241a:	82 30       	cpi	r24, 0x02	; 2
    241c:	28 f0       	brcs	.+10     	; 0x2428 <__gesf2+0x56>
    241e:	c8 01       	movw	r24, r16
    2420:	b7 01       	movw	r22, r14
    2422:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__fpcmp_parts_f>
    2426:	01 c0       	rjmp	.+2      	; 0x242a <__gesf2+0x58>
    2428:	8f ef       	ldi	r24, 0xFF	; 255
    242a:	68 96       	adiw	r28, 0x18	; 24
    242c:	e6 e0       	ldi	r30, 0x06	; 6
    242e:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

00002432 <__ltsf2>:
    2432:	a8 e1       	ldi	r26, 0x18	; 24
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	ef e1       	ldi	r30, 0x1F	; 31
    2438:	f2 e1       	ldi	r31, 0x12	; 18
    243a:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__+0x18>
    243e:	69 83       	std	Y+1, r22	; 0x01
    2440:	7a 83       	std	Y+2, r23	; 0x02
    2442:	8b 83       	std	Y+3, r24	; 0x03
    2444:	9c 83       	std	Y+4, r25	; 0x04
    2446:	2d 83       	std	Y+5, r18	; 0x05
    2448:	3e 83       	std	Y+6, r19	; 0x06
    244a:	4f 83       	std	Y+7, r20	; 0x07
    244c:	58 87       	std	Y+8, r21	; 0x08
    244e:	8e 01       	movw	r16, r28
    2450:	07 5f       	subi	r16, 0xF7	; 247
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	ce 01       	movw	r24, r28
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	b8 01       	movw	r22, r16
    245a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    245e:	81 e1       	ldi	r24, 0x11	; 17
    2460:	e8 2e       	mov	r14, r24
    2462:	f1 2c       	mov	r15, r1
    2464:	ec 0e       	add	r14, r28
    2466:	fd 1e       	adc	r15, r29
    2468:	ce 01       	movw	r24, r28
    246a:	05 96       	adiw	r24, 0x05	; 5
    246c:	b7 01       	movw	r22, r14
    246e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	40 f0       	brcs	.+16     	; 0x2488 <__ltsf2+0x56>
    2478:	89 89       	ldd	r24, Y+17	; 0x11
    247a:	82 30       	cpi	r24, 0x02	; 2
    247c:	28 f0       	brcs	.+10     	; 0x2488 <__ltsf2+0x56>
    247e:	c8 01       	movw	r24, r16
    2480:	b7 01       	movw	r22, r14
    2482:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__fpcmp_parts_f>
    2486:	01 c0       	rjmp	.+2      	; 0x248a <__ltsf2+0x58>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	68 96       	adiw	r28, 0x18	; 24
    248c:	e6 e0       	ldi	r30, 0x06	; 6
    248e:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

00002492 <__fixsfsi>:
    2492:	ac e0       	ldi	r26, 0x0C	; 12
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f2 e1       	ldi	r31, 0x12	; 18
    249a:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__prologue_saves__+0x20>
    249e:	69 83       	std	Y+1, r22	; 0x01
    24a0:	7a 83       	std	Y+2, r23	; 0x02
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	ce 01       	movw	r24, r28
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	be 01       	movw	r22, r28
    24ac:	6b 5f       	subi	r22, 0xFB	; 251
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__unpack_f>
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	81 f1       	breq	.+96     	; 0x251a <__fixsfsi+0x88>
    24ba:	82 30       	cpi	r24, 0x02	; 2
    24bc:	70 f1       	brcs	.+92     	; 0x251a <__fixsfsi+0x88>
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	21 f4       	brne	.+8      	; 0x24ca <__fixsfsi+0x38>
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	88 23       	and	r24, r24
    24c6:	69 f1       	breq	.+90     	; 0x2522 <__fixsfsi+0x90>
    24c8:	0a c0       	rjmp	.+20     	; 0x24de <__fixsfsi+0x4c>
    24ca:	2f 81       	ldd	r18, Y+7	; 0x07
    24cc:	38 85       	ldd	r19, Y+8	; 0x08
    24ce:	37 fd       	sbrc	r19, 7
    24d0:	24 c0       	rjmp	.+72     	; 0x251a <__fixsfsi+0x88>
    24d2:	6e 81       	ldd	r22, Y+6	; 0x06
    24d4:	2f 31       	cpi	r18, 0x1F	; 31
    24d6:	31 05       	cpc	r19, r1
    24d8:	3c f0       	brlt	.+14     	; 0x24e8 <__fixsfsi+0x56>
    24da:	66 23       	and	r22, r22
    24dc:	11 f1       	breq	.+68     	; 0x2522 <__fixsfsi+0x90>
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	50 e8       	ldi	r21, 0x80	; 128
    24e6:	21 c0       	rjmp	.+66     	; 0x252a <__fixsfsi+0x98>
    24e8:	8e e1       	ldi	r24, 0x1E	; 30
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	82 1b       	sub	r24, r18
    24ee:	93 0b       	sbc	r25, r19
    24f0:	29 85       	ldd	r18, Y+9	; 0x09
    24f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    24f6:	5c 85       	ldd	r21, Y+12	; 0x0c
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <__fixsfsi+0x70>
    24fa:	56 95       	lsr	r21
    24fc:	47 95       	ror	r20
    24fe:	37 95       	ror	r19
    2500:	27 95       	ror	r18
    2502:	8a 95       	dec	r24
    2504:	d2 f7       	brpl	.-12     	; 0x24fa <__fixsfsi+0x68>
    2506:	66 23       	and	r22, r22
    2508:	81 f0       	breq	.+32     	; 0x252a <__fixsfsi+0x98>
    250a:	50 95       	com	r21
    250c:	40 95       	com	r20
    250e:	30 95       	com	r19
    2510:	21 95       	neg	r18
    2512:	3f 4f       	sbci	r19, 0xFF	; 255
    2514:	4f 4f       	sbci	r20, 0xFF	; 255
    2516:	5f 4f       	sbci	r21, 0xFF	; 255
    2518:	08 c0       	rjmp	.+16     	; 0x252a <__fixsfsi+0x98>
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	a9 01       	movw	r20, r18
    2520:	04 c0       	rjmp	.+8      	; 0x252a <__fixsfsi+0x98>
    2522:	2f ef       	ldi	r18, 0xFF	; 255
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f ef       	ldi	r20, 0xFF	; 255
    2528:	5f e7       	ldi	r21, 0x7F	; 127
    252a:	b9 01       	movw	r22, r18
    252c:	ca 01       	movw	r24, r20
    252e:	2c 96       	adiw	r28, 0x0c	; 12
    2530:	e2 e0       	ldi	r30, 0x02	; 2
    2532:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__epilogue_restores__+0x20>

00002536 <__pack_f>:
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	fc 01       	movw	r30, r24
    2544:	24 81       	ldd	r18, Z+4	; 0x04
    2546:	35 81       	ldd	r19, Z+5	; 0x05
    2548:	46 81       	ldd	r20, Z+6	; 0x06
    254a:	57 81       	ldd	r21, Z+7	; 0x07
    254c:	61 81       	ldd	r22, Z+1	; 0x01
    254e:	80 81       	ld	r24, Z
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	20 f4       	brcc	.+8      	; 0x255c <__pack_f+0x26>
    2554:	40 61       	ori	r20, 0x10	; 16
    2556:	ef ef       	ldi	r30, 0xFF	; 255
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	a3 c0       	rjmp	.+326    	; 0x26a2 <__pack_f+0x16c>
    255c:	84 30       	cpi	r24, 0x04	; 4
    255e:	09 f4       	brne	.+2      	; 0x2562 <__pack_f+0x2c>
    2560:	9b c0       	rjmp	.+310    	; 0x2698 <__pack_f+0x162>
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	09 f4       	brne	.+2      	; 0x2568 <__pack_f+0x32>
    2566:	92 c0       	rjmp	.+292    	; 0x268c <__pack_f+0x156>
    2568:	21 15       	cp	r18, r1
    256a:	31 05       	cpc	r19, r1
    256c:	41 05       	cpc	r20, r1
    256e:	51 05       	cpc	r21, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <__pack_f+0x3e>
    2572:	8f c0       	rjmp	.+286    	; 0x2692 <__pack_f+0x15c>
    2574:	02 80       	ldd	r0, Z+2	; 0x02
    2576:	f3 81       	ldd	r31, Z+3	; 0x03
    2578:	e0 2d       	mov	r30, r0
    257a:	8f ef       	ldi	r24, 0xFF	; 255
    257c:	e2 38       	cpi	r30, 0x82	; 130
    257e:	f8 07       	cpc	r31, r24
    2580:	0c f0       	brlt	.+2      	; 0x2584 <__pack_f+0x4e>
    2582:	5a c0       	rjmp	.+180    	; 0x2638 <__pack_f+0x102>
    2584:	c2 e8       	ldi	r28, 0x82	; 130
    2586:	df ef       	ldi	r29, 0xFF	; 255
    2588:	ce 1b       	sub	r28, r30
    258a:	df 0b       	sbc	r29, r31
    258c:	ca 31       	cpi	r28, 0x1A	; 26
    258e:	d1 05       	cpc	r29, r1
    2590:	6c f5       	brge	.+90     	; 0x25ec <__pack_f+0xb6>
    2592:	79 01       	movw	r14, r18
    2594:	8a 01       	movw	r16, r20
    2596:	0c 2e       	mov	r0, r28
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <__pack_f+0x6c>
    259a:	16 95       	lsr	r17
    259c:	07 95       	ror	r16
    259e:	f7 94       	ror	r15
    25a0:	e7 94       	ror	r14
    25a2:	0a 94       	dec	r0
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <__pack_f+0x64>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	0c 2e       	mov	r0, r28
    25b0:	04 c0       	rjmp	.+8      	; 0x25ba <__pack_f+0x84>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	aa 1f       	adc	r26, r26
    25b8:	bb 1f       	adc	r27, r27
    25ba:	0a 94       	dec	r0
    25bc:	d2 f7       	brpl	.-12     	; 0x25b2 <__pack_f+0x7c>
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	a1 09       	sbc	r26, r1
    25c2:	b1 09       	sbc	r27, r1
    25c4:	82 23       	and	r24, r18
    25c6:	93 23       	and	r25, r19
    25c8:	a4 23       	and	r26, r20
    25ca:	b5 23       	and	r27, r21
    25cc:	21 e0       	ldi	r18, 0x01	; 1
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	a1 05       	cpc	r26, r1
    25d8:	b1 05       	cpc	r27, r1
    25da:	19 f4       	brne	.+6      	; 0x25e2 <__pack_f+0xac>
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	a9 01       	movw	r20, r18
    25e2:	2e 29       	or	r18, r14
    25e4:	3f 29       	or	r19, r15
    25e6:	40 2b       	or	r20, r16
    25e8:	51 2b       	or	r21, r17
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <__pack_f+0xbc>
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	a9 01       	movw	r20, r18
    25f2:	da 01       	movw	r26, r20
    25f4:	c9 01       	movw	r24, r18
    25f6:	8f 77       	andi	r24, 0x7F	; 127
    25f8:	90 70       	andi	r25, 0x00	; 0
    25fa:	a0 70       	andi	r26, 0x00	; 0
    25fc:	b0 70       	andi	r27, 0x00	; 0
    25fe:	80 34       	cpi	r24, 0x40	; 64
    2600:	91 05       	cpc	r25, r1
    2602:	a1 05       	cpc	r26, r1
    2604:	b1 05       	cpc	r27, r1
    2606:	39 f4       	brne	.+14     	; 0x2616 <__pack_f+0xe0>
    2608:	27 ff       	sbrs	r18, 7
    260a:	09 c0       	rjmp	.+18     	; 0x261e <__pack_f+0xe8>
    260c:	20 5c       	subi	r18, 0xC0	; 192
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	4f 4f       	sbci	r20, 0xFF	; 255
    2612:	5f 4f       	sbci	r21, 0xFF	; 255
    2614:	04 c0       	rjmp	.+8      	; 0x261e <__pack_f+0xe8>
    2616:	21 5c       	subi	r18, 0xC1	; 193
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	4f 4f       	sbci	r20, 0xFF	; 255
    261c:	5f 4f       	sbci	r21, 0xFF	; 255
    261e:	e1 e0       	ldi	r30, 0x01	; 1
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	20 30       	cpi	r18, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	38 07       	cpc	r19, r24
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	48 07       	cpc	r20, r24
    262c:	80 e4       	ldi	r24, 0x40	; 64
    262e:	58 07       	cpc	r21, r24
    2630:	28 f5       	brcc	.+74     	; 0x267c <__pack_f+0x146>
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	22 c0       	rjmp	.+68     	; 0x267c <__pack_f+0x146>
    2638:	e0 38       	cpi	r30, 0x80	; 128
    263a:	f1 05       	cpc	r31, r1
    263c:	6c f5       	brge	.+90     	; 0x2698 <__pack_f+0x162>
    263e:	e1 58       	subi	r30, 0x81	; 129
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	da 01       	movw	r26, r20
    2644:	c9 01       	movw	r24, r18
    2646:	8f 77       	andi	r24, 0x7F	; 127
    2648:	90 70       	andi	r25, 0x00	; 0
    264a:	a0 70       	andi	r26, 0x00	; 0
    264c:	b0 70       	andi	r27, 0x00	; 0
    264e:	80 34       	cpi	r24, 0x40	; 64
    2650:	91 05       	cpc	r25, r1
    2652:	a1 05       	cpc	r26, r1
    2654:	b1 05       	cpc	r27, r1
    2656:	39 f4       	brne	.+14     	; 0x2666 <__pack_f+0x130>
    2658:	27 ff       	sbrs	r18, 7
    265a:	09 c0       	rjmp	.+18     	; 0x266e <__pack_f+0x138>
    265c:	20 5c       	subi	r18, 0xC0	; 192
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	4f 4f       	sbci	r20, 0xFF	; 255
    2662:	5f 4f       	sbci	r21, 0xFF	; 255
    2664:	04 c0       	rjmp	.+8      	; 0x266e <__pack_f+0x138>
    2666:	21 5c       	subi	r18, 0xC1	; 193
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
    266a:	4f 4f       	sbci	r20, 0xFF	; 255
    266c:	5f 4f       	sbci	r21, 0xFF	; 255
    266e:	57 ff       	sbrs	r21, 7
    2670:	05 c0       	rjmp	.+10     	; 0x267c <__pack_f+0x146>
    2672:	56 95       	lsr	r21
    2674:	47 95       	ror	r20
    2676:	37 95       	ror	r19
    2678:	27 95       	ror	r18
    267a:	31 96       	adiw	r30, 0x01	; 1
    267c:	87 e0       	ldi	r24, 0x07	; 7
    267e:	56 95       	lsr	r21
    2680:	47 95       	ror	r20
    2682:	37 95       	ror	r19
    2684:	27 95       	ror	r18
    2686:	8a 95       	dec	r24
    2688:	d1 f7       	brne	.-12     	; 0x267e <__pack_f+0x148>
    268a:	0b c0       	rjmp	.+22     	; 0x26a2 <__pack_f+0x16c>
    268c:	e0 e0       	ldi	r30, 0x00	; 0
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	05 c0       	rjmp	.+10     	; 0x269c <__pack_f+0x166>
    2692:	e0 e0       	ldi	r30, 0x00	; 0
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	05 c0       	rjmp	.+10     	; 0x26a2 <__pack_f+0x16c>
    2698:	ef ef       	ldi	r30, 0xFF	; 255
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	8e 2f       	mov	r24, r30
    26a4:	87 95       	ror	r24
    26a6:	88 27       	eor	r24, r24
    26a8:	87 95       	ror	r24
    26aa:	94 2f       	mov	r25, r20
    26ac:	9f 77       	andi	r25, 0x7F	; 127
    26ae:	67 95       	ror	r22
    26b0:	66 27       	eor	r22, r22
    26b2:	67 95       	ror	r22
    26b4:	e6 95       	lsr	r30
    26b6:	e2 2e       	mov	r14, r18
    26b8:	a9 2f       	mov	r26, r25
    26ba:	a8 2b       	or	r26, r24
    26bc:	fe 2f       	mov	r31, r30
    26be:	f6 2b       	or	r31, r22
    26c0:	62 2f       	mov	r22, r18
    26c2:	73 2f       	mov	r23, r19
    26c4:	8a 2f       	mov	r24, r26
    26c6:	9f 2f       	mov	r25, r31
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	e6 e0       	ldi	r30, 0x06	; 6
    26ce:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__+0x18>

000026d2 <__unpack_f>:
    26d2:	dc 01       	movw	r26, r24
    26d4:	fb 01       	movw	r30, r22
    26d6:	2c 91       	ld	r18, X
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	3c 91       	ld	r19, X
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	12 96       	adiw	r26, 0x02	; 2
    26e0:	8c 91       	ld	r24, X
    26e2:	12 97       	sbiw	r26, 0x02	; 2
    26e4:	48 2f       	mov	r20, r24
    26e6:	4f 77       	andi	r20, 0x7F	; 127
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	98 2f       	mov	r25, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	99 27       	eor	r25, r25
    26f0:	99 1f       	adc	r25, r25
    26f2:	13 96       	adiw	r26, 0x03	; 3
    26f4:	6c 91       	ld	r22, X
    26f6:	13 97       	sbiw	r26, 0x03	; 3
    26f8:	86 2f       	mov	r24, r22
    26fa:	88 0f       	add	r24, r24
    26fc:	89 2b       	or	r24, r25
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	66 1f       	adc	r22, r22
    2702:	66 27       	eor	r22, r22
    2704:	66 1f       	adc	r22, r22
    2706:	61 83       	std	Z+1, r22	; 0x01
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	39 f5       	brne	.+78     	; 0x275a <__unpack_f+0x88>
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	41 05       	cpc	r20, r1
    2712:	51 05       	cpc	r21, r1
    2714:	11 f4       	brne	.+4      	; 0x271a <__unpack_f+0x48>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	29 c0       	rjmp	.+82     	; 0x276c <__unpack_f+0x9a>
    271a:	82 e8       	ldi	r24, 0x82	; 130
    271c:	9f ef       	ldi	r25, 0xFF	; 255
    271e:	93 83       	std	Z+3, r25	; 0x03
    2720:	82 83       	std	Z+2, r24	; 0x02
    2722:	67 e0       	ldi	r22, 0x07	; 7
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	44 1f       	adc	r20, r20
    272a:	55 1f       	adc	r21, r21
    272c:	6a 95       	dec	r22
    272e:	d1 f7       	brne	.-12     	; 0x2724 <__unpack_f+0x52>
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	80 83       	st	Z, r24
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <__unpack_f+0x76>
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	44 1f       	adc	r20, r20
    273c:	55 1f       	adc	r21, r21
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	93 83       	std	Z+3, r25	; 0x03
    2746:	82 83       	std	Z+2, r24	; 0x02
    2748:	20 30       	cpi	r18, 0x00	; 0
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	38 07       	cpc	r19, r24
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	48 07       	cpc	r20, r24
    2752:	80 e4       	ldi	r24, 0x40	; 64
    2754:	58 07       	cpc	r21, r24
    2756:	78 f3       	brcs	.-34     	; 0x2736 <__unpack_f+0x64>
    2758:	20 c0       	rjmp	.+64     	; 0x279a <__unpack_f+0xc8>
    275a:	8f 3f       	cpi	r24, 0xFF	; 255
    275c:	91 05       	cpc	r25, r1
    275e:	79 f4       	brne	.+30     	; 0x277e <__unpack_f+0xac>
    2760:	21 15       	cp	r18, r1
    2762:	31 05       	cpc	r19, r1
    2764:	41 05       	cpc	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	19 f4       	brne	.+6      	; 0x2770 <__unpack_f+0x9e>
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	80 83       	st	Z, r24
    276e:	08 95       	ret
    2770:	44 ff       	sbrs	r20, 4
    2772:	03 c0       	rjmp	.+6      	; 0x277a <__unpack_f+0xa8>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	80 83       	st	Z, r24
    2778:	10 c0       	rjmp	.+32     	; 0x279a <__unpack_f+0xc8>
    277a:	10 82       	st	Z, r1
    277c:	0e c0       	rjmp	.+28     	; 0x279a <__unpack_f+0xc8>
    277e:	8f 57       	subi	r24, 0x7F	; 127
    2780:	90 40       	sbci	r25, 0x00	; 0
    2782:	93 83       	std	Z+3, r25	; 0x03
    2784:	82 83       	std	Z+2, r24	; 0x02
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	80 83       	st	Z, r24
    278a:	87 e0       	ldi	r24, 0x07	; 7
    278c:	22 0f       	add	r18, r18
    278e:	33 1f       	adc	r19, r19
    2790:	44 1f       	adc	r20, r20
    2792:	55 1f       	adc	r21, r21
    2794:	8a 95       	dec	r24
    2796:	d1 f7       	brne	.-12     	; 0x278c <__unpack_f+0xba>
    2798:	50 64       	ori	r21, 0x40	; 64
    279a:	24 83       	std	Z+4, r18	; 0x04
    279c:	35 83       	std	Z+5, r19	; 0x05
    279e:	46 83       	std	Z+6, r20	; 0x06
    27a0:	57 83       	std	Z+7, r21	; 0x07
    27a2:	08 95       	ret

000027a4 <__fpcmp_parts_f>:
    27a4:	fc 01       	movw	r30, r24
    27a6:	db 01       	movw	r26, r22
    27a8:	90 81       	ld	r25, Z
    27aa:	92 30       	cpi	r25, 0x02	; 2
    27ac:	08 f4       	brcc	.+2      	; 0x27b0 <__fpcmp_parts_f+0xc>
    27ae:	49 c0       	rjmp	.+146    	; 0x2842 <__fpcmp_parts_f+0x9e>
    27b0:	8c 91       	ld	r24, X
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	08 f4       	brcc	.+2      	; 0x27b8 <__fpcmp_parts_f+0x14>
    27b6:	45 c0       	rjmp	.+138    	; 0x2842 <__fpcmp_parts_f+0x9e>
    27b8:	94 30       	cpi	r25, 0x04	; 4
    27ba:	51 f4       	brne	.+20     	; 0x27d0 <__fpcmp_parts_f+0x2c>
    27bc:	61 81       	ldd	r22, Z+1	; 0x01
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	b1 f5       	brne	.+108    	; 0x282e <__fpcmp_parts_f+0x8a>
    27c2:	11 96       	adiw	r26, 0x01	; 1
    27c4:	2c 91       	ld	r18, X
    27c6:	11 97       	sbiw	r26, 0x01	; 1
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	26 1b       	sub	r18, r22
    27cc:	31 09       	sbc	r19, r1
    27ce:	41 c0       	rjmp	.+130    	; 0x2852 <__fpcmp_parts_f+0xae>
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	21 f0       	breq	.+8      	; 0x27dc <__fpcmp_parts_f+0x38>
    27d4:	92 30       	cpi	r25, 0x02	; 2
    27d6:	41 f4       	brne	.+16     	; 0x27e8 <__fpcmp_parts_f+0x44>
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	b1 f1       	breq	.+108    	; 0x2848 <__fpcmp_parts_f+0xa4>
    27dc:	11 96       	adiw	r26, 0x01	; 1
    27de:	8c 91       	ld	r24, X
    27e0:	11 97       	sbiw	r26, 0x01	; 1
    27e2:	88 23       	and	r24, r24
    27e4:	a1 f1       	breq	.+104    	; 0x284e <__fpcmp_parts_f+0xaa>
    27e6:	2d c0       	rjmp	.+90     	; 0x2842 <__fpcmp_parts_f+0x9e>
    27e8:	61 81       	ldd	r22, Z+1	; 0x01
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	01 f1       	breq	.+64     	; 0x282e <__fpcmp_parts_f+0x8a>
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	8c 91       	ld	r24, X
    27f2:	11 97       	sbiw	r26, 0x01	; 1
    27f4:	68 17       	cp	r22, r24
    27f6:	d9 f4       	brne	.+54     	; 0x282e <__fpcmp_parts_f+0x8a>
    27f8:	22 81       	ldd	r18, Z+2	; 0x02
    27fa:	33 81       	ldd	r19, Z+3	; 0x03
    27fc:	12 96       	adiw	r26, 0x02	; 2
    27fe:	8d 91       	ld	r24, X+
    2800:	9c 91       	ld	r25, X
    2802:	13 97       	sbiw	r26, 0x03	; 3
    2804:	82 17       	cp	r24, r18
    2806:	93 07       	cpc	r25, r19
    2808:	94 f0       	brlt	.+36     	; 0x282e <__fpcmp_parts_f+0x8a>
    280a:	28 17       	cp	r18, r24
    280c:	39 07       	cpc	r19, r25
    280e:	bc f0       	brlt	.+46     	; 0x283e <__fpcmp_parts_f+0x9a>
    2810:	24 81       	ldd	r18, Z+4	; 0x04
    2812:	35 81       	ldd	r19, Z+5	; 0x05
    2814:	46 81       	ldd	r20, Z+6	; 0x06
    2816:	57 81       	ldd	r21, Z+7	; 0x07
    2818:	14 96       	adiw	r26, 0x04	; 4
    281a:	8d 91       	ld	r24, X+
    281c:	9d 91       	ld	r25, X+
    281e:	0d 90       	ld	r0, X+
    2820:	bc 91       	ld	r27, X
    2822:	a0 2d       	mov	r26, r0
    2824:	82 17       	cp	r24, r18
    2826:	93 07       	cpc	r25, r19
    2828:	a4 07       	cpc	r26, r20
    282a:	b5 07       	cpc	r27, r21
    282c:	18 f4       	brcc	.+6      	; 0x2834 <__fpcmp_parts_f+0x90>
    282e:	66 23       	and	r22, r22
    2830:	41 f0       	breq	.+16     	; 0x2842 <__fpcmp_parts_f+0x9e>
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__fpcmp_parts_f+0xaa>
    2834:	28 17       	cp	r18, r24
    2836:	39 07       	cpc	r19, r25
    2838:	4a 07       	cpc	r20, r26
    283a:	5b 07       	cpc	r21, r27
    283c:	28 f4       	brcc	.+10     	; 0x2848 <__fpcmp_parts_f+0xa4>
    283e:	66 23       	and	r22, r22
    2840:	31 f0       	breq	.+12     	; 0x284e <__fpcmp_parts_f+0xaa>
    2842:	21 e0       	ldi	r18, 0x01	; 1
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	05 c0       	rjmp	.+10     	; 0x2852 <__fpcmp_parts_f+0xae>
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <__fpcmp_parts_f+0xae>
    284e:	2f ef       	ldi	r18, 0xFF	; 255
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	c9 01       	movw	r24, r18
    2854:	08 95       	ret

00002856 <__prologue_saves__>:
    2856:	2f 92       	push	r2
    2858:	3f 92       	push	r3
    285a:	4f 92       	push	r4
    285c:	5f 92       	push	r5
    285e:	6f 92       	push	r6
    2860:	7f 92       	push	r7
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	ca 1b       	sub	r28, r26
    2880:	db 0b       	sbc	r29, r27
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	09 94       	ijmp

0000288e <__epilogue_restores__>:
    288e:	2a 88       	ldd	r2, Y+18	; 0x12
    2890:	39 88       	ldd	r3, Y+17	; 0x11
    2892:	48 88       	ldd	r4, Y+16	; 0x10
    2894:	5f 84       	ldd	r5, Y+15	; 0x0f
    2896:	6e 84       	ldd	r6, Y+14	; 0x0e
    2898:	7d 84       	ldd	r7, Y+13	; 0x0d
    289a:	8c 84       	ldd	r8, Y+12	; 0x0c
    289c:	9b 84       	ldd	r9, Y+11	; 0x0b
    289e:	aa 84       	ldd	r10, Y+10	; 0x0a
    28a0:	b9 84       	ldd	r11, Y+9	; 0x09
    28a2:	c8 84       	ldd	r12, Y+8	; 0x08
    28a4:	df 80       	ldd	r13, Y+7	; 0x07
    28a6:	ee 80       	ldd	r14, Y+6	; 0x06
    28a8:	fd 80       	ldd	r15, Y+5	; 0x05
    28aa:	0c 81       	ldd	r16, Y+4	; 0x04
    28ac:	1b 81       	ldd	r17, Y+3	; 0x03
    28ae:	aa 81       	ldd	r26, Y+2	; 0x02
    28b0:	b9 81       	ldd	r27, Y+1	; 0x01
    28b2:	ce 0f       	add	r28, r30
    28b4:	d1 1d       	adc	r29, r1
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	ed 01       	movw	r28, r26
    28c2:	08 95       	ret

000028c4 <itoa>:
    28c4:	fb 01       	movw	r30, r22
    28c6:	9f 01       	movw	r18, r30
    28c8:	e8 94       	clt
    28ca:	42 30       	cpi	r20, 0x02	; 2
    28cc:	c4 f0       	brlt	.+48     	; 0x28fe <itoa+0x3a>
    28ce:	45 32       	cpi	r20, 0x25	; 37
    28d0:	b4 f4       	brge	.+44     	; 0x28fe <itoa+0x3a>
    28d2:	4a 30       	cpi	r20, 0x0A	; 10
    28d4:	29 f4       	brne	.+10     	; 0x28e0 <itoa+0x1c>
    28d6:	97 fb       	bst	r25, 7
    28d8:	1e f4       	brtc	.+6      	; 0x28e0 <itoa+0x1c>
    28da:	90 95       	com	r25
    28dc:	81 95       	neg	r24
    28de:	9f 4f       	sbci	r25, 0xFF	; 255
    28e0:	64 2f       	mov	r22, r20
    28e2:	77 27       	eor	r23, r23
    28e4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__udivmodhi4>
    28e8:	80 5d       	subi	r24, 0xD0	; 208
    28ea:	8a 33       	cpi	r24, 0x3A	; 58
    28ec:	0c f0       	brlt	.+2      	; 0x28f0 <itoa+0x2c>
    28ee:	89 5d       	subi	r24, 0xD9	; 217
    28f0:	81 93       	st	Z+, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	a1 f7       	brne	.-24     	; 0x28e0 <itoa+0x1c>
    28f8:	16 f4       	brtc	.+4      	; 0x28fe <itoa+0x3a>
    28fa:	5d e2       	ldi	r21, 0x2D	; 45
    28fc:	51 93       	st	Z+, r21
    28fe:	10 82       	st	Z, r1
    2900:	c9 01       	movw	r24, r18
    2902:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <strrev>

00002906 <ltoa>:
    2906:	fa 01       	movw	r30, r20
    2908:	cf 93       	push	r28
    290a:	ff 93       	push	r31
    290c:	ef 93       	push	r30
    290e:	22 30       	cpi	r18, 0x02	; 2
    2910:	44 f1       	brlt	.+80     	; 0x2962 <ltoa+0x5c>
    2912:	25 32       	cpi	r18, 0x25	; 37
    2914:	34 f5       	brge	.+76     	; 0x2962 <ltoa+0x5c>
    2916:	c2 2f       	mov	r28, r18
    2918:	e8 94       	clt
    291a:	ca 30       	cpi	r28, 0x0A	; 10
    291c:	49 f4       	brne	.+18     	; 0x2930 <ltoa+0x2a>
    291e:	97 fb       	bst	r25, 7
    2920:	3e f4       	brtc	.+14     	; 0x2930 <ltoa+0x2a>
    2922:	90 95       	com	r25
    2924:	80 95       	com	r24
    2926:	70 95       	com	r23
    2928:	61 95       	neg	r22
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	8f 4f       	sbci	r24, 0xFF	; 255
    292e:	9f 4f       	sbci	r25, 0xFF	; 255
    2930:	2c 2f       	mov	r18, r28
    2932:	33 27       	eor	r19, r19
    2934:	44 27       	eor	r20, r20
    2936:	55 27       	eor	r21, r21
    2938:	ff 93       	push	r31
    293a:	ef 93       	push	r30
    293c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__udivmodsi4>
    2940:	ef 91       	pop	r30
    2942:	ff 91       	pop	r31
    2944:	60 5d       	subi	r22, 0xD0	; 208
    2946:	6a 33       	cpi	r22, 0x3A	; 58
    2948:	0c f0       	brlt	.+2      	; 0x294c <ltoa+0x46>
    294a:	69 5d       	subi	r22, 0xD9	; 217
    294c:	61 93       	st	Z+, r22
    294e:	b9 01       	movw	r22, r18
    2950:	ca 01       	movw	r24, r20
    2952:	60 50       	subi	r22, 0x00	; 0
    2954:	70 40       	sbci	r23, 0x00	; 0
    2956:	80 40       	sbci	r24, 0x00	; 0
    2958:	90 40       	sbci	r25, 0x00	; 0
    295a:	51 f7       	brne	.-44     	; 0x2930 <ltoa+0x2a>
    295c:	16 f4       	brtc	.+4      	; 0x2962 <ltoa+0x5c>
    295e:	cd e2       	ldi	r28, 0x2D	; 45
    2960:	c1 93       	st	Z+, r28
    2962:	10 82       	st	Z, r1
    2964:	8f 91       	pop	r24
    2966:	9f 91       	pop	r25
    2968:	cf 91       	pop	r28
    296a:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <strrev>

0000296e <ultoa>:
    296e:	fa 01       	movw	r30, r20
    2970:	cf 93       	push	r28
    2972:	ff 93       	push	r31
    2974:	ef 93       	push	r30
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	cc f0       	brlt	.+50     	; 0x29ac <ultoa+0x3e>
    297a:	25 32       	cpi	r18, 0x25	; 37
    297c:	bc f4       	brge	.+46     	; 0x29ac <ultoa+0x3e>
    297e:	c2 2f       	mov	r28, r18
    2980:	2c 2f       	mov	r18, r28
    2982:	33 27       	eor	r19, r19
    2984:	44 27       	eor	r20, r20
    2986:	55 27       	eor	r21, r21
    2988:	ff 93       	push	r31
    298a:	ef 93       	push	r30
    298c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__udivmodsi4>
    2990:	ef 91       	pop	r30
    2992:	ff 91       	pop	r31
    2994:	60 5d       	subi	r22, 0xD0	; 208
    2996:	6a 33       	cpi	r22, 0x3A	; 58
    2998:	0c f0       	brlt	.+2      	; 0x299c <ultoa+0x2e>
    299a:	69 5d       	subi	r22, 0xD9	; 217
    299c:	61 93       	st	Z+, r22
    299e:	b9 01       	movw	r22, r18
    29a0:	ca 01       	movw	r24, r20
    29a2:	60 50       	subi	r22, 0x00	; 0
    29a4:	70 40       	sbci	r23, 0x00	; 0
    29a6:	80 40       	sbci	r24, 0x00	; 0
    29a8:	90 40       	sbci	r25, 0x00	; 0
    29aa:	51 f7       	brne	.-44     	; 0x2980 <ultoa+0x12>
    29ac:	10 82       	st	Z, r1
    29ae:	8f 91       	pop	r24
    29b0:	9f 91       	pop	r25
    29b2:	cf 91       	pop	r28
    29b4:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <strrev>

000029b8 <utoa>:
    29b8:	fb 01       	movw	r30, r22
    29ba:	9f 01       	movw	r18, r30
    29bc:	42 30       	cpi	r20, 0x02	; 2
    29be:	74 f0       	brlt	.+28     	; 0x29dc <utoa+0x24>
    29c0:	45 32       	cpi	r20, 0x25	; 37
    29c2:	64 f4       	brge	.+24     	; 0x29dc <utoa+0x24>
    29c4:	64 2f       	mov	r22, r20
    29c6:	77 27       	eor	r23, r23
    29c8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__udivmodhi4>
    29cc:	80 5d       	subi	r24, 0xD0	; 208
    29ce:	8a 33       	cpi	r24, 0x3A	; 58
    29d0:	0c f0       	brlt	.+2      	; 0x29d4 <utoa+0x1c>
    29d2:	89 5d       	subi	r24, 0xD9	; 217
    29d4:	81 93       	st	Z+, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	a1 f7       	brne	.-24     	; 0x29c4 <utoa+0xc>
    29dc:	10 82       	st	Z, r1
    29de:	c9 01       	movw	r24, r18
    29e0:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <strrev>

000029e4 <strrev>:
    29e4:	dc 01       	movw	r26, r24
    29e6:	fc 01       	movw	r30, r24
    29e8:	67 2f       	mov	r22, r23
    29ea:	71 91       	ld	r23, Z+
    29ec:	77 23       	and	r23, r23
    29ee:	e1 f7       	brne	.-8      	; 0x29e8 <strrev+0x4>
    29f0:	32 97       	sbiw	r30, 0x02	; 2
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <strrev+0x18>
    29f4:	7c 91       	ld	r23, X
    29f6:	6d 93       	st	X+, r22
    29f8:	70 83       	st	Z, r23
    29fa:	62 91       	ld	r22, -Z
    29fc:	ae 17       	cp	r26, r30
    29fe:	bf 07       	cpc	r27, r31
    2a00:	c8 f3       	brcs	.-14     	; 0x29f4 <strrev+0x10>
    2a02:	08 95       	ret

00002a04 <__udivmodhi4>:
    2a04:	aa 1b       	sub	r26, r26
    2a06:	bb 1b       	sub	r27, r27
    2a08:	51 e1       	ldi	r21, 0x11	; 17
    2a0a:	07 c0       	rjmp	.+14     	; 0x2a1a <__udivmodhi4_ep>

00002a0c <__udivmodhi4_loop>:
    2a0c:	aa 1f       	adc	r26, r26
    2a0e:	bb 1f       	adc	r27, r27
    2a10:	a6 17       	cp	r26, r22
    2a12:	b7 07       	cpc	r27, r23
    2a14:	10 f0       	brcs	.+4      	; 0x2a1a <__udivmodhi4_ep>
    2a16:	a6 1b       	sub	r26, r22
    2a18:	b7 0b       	sbc	r27, r23

00002a1a <__udivmodhi4_ep>:
    2a1a:	88 1f       	adc	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	5a 95       	dec	r21
    2a20:	a9 f7       	brne	.-22     	; 0x2a0c <__udivmodhi4_loop>
    2a22:	80 95       	com	r24
    2a24:	90 95       	com	r25
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	08 95       	ret

00002a2c <__udivmodsi4>:
    2a2c:	a1 e2       	ldi	r26, 0x21	; 33
    2a2e:	1a 2e       	mov	r1, r26
    2a30:	aa 1b       	sub	r26, r26
    2a32:	bb 1b       	sub	r27, r27
    2a34:	fd 01       	movw	r30, r26
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__udivmodsi4_ep>

00002a38 <__udivmodsi4_loop>:
    2a38:	aa 1f       	adc	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	ee 1f       	adc	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	a2 17       	cp	r26, r18
    2a42:	b3 07       	cpc	r27, r19
    2a44:	e4 07       	cpc	r30, r20
    2a46:	f5 07       	cpc	r31, r21
    2a48:	20 f0       	brcs	.+8      	; 0x2a52 <__udivmodsi4_ep>
    2a4a:	a2 1b       	sub	r26, r18
    2a4c:	b3 0b       	sbc	r27, r19
    2a4e:	e4 0b       	sbc	r30, r20
    2a50:	f5 0b       	sbc	r31, r21

00002a52 <__udivmodsi4_ep>:
    2a52:	66 1f       	adc	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	88 1f       	adc	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	1a 94       	dec	r1
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <__udivmodsi4_loop>
    2a5e:	60 95       	com	r22
    2a60:	70 95       	com	r23
    2a62:	80 95       	com	r24
    2a64:	90 95       	com	r25
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	bd 01       	movw	r22, r26
    2a6c:	cf 01       	movw	r24, r30
    2a6e:	08 95       	ret

00002a70 <_exit>:
    2a70:	f8 94       	cli

00002a72 <__stop_program>:
    2a72:	ff cf       	rjmp	.-2      	; 0x2a72 <__stop_program>
