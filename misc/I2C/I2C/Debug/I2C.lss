
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000344  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008c  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000018a  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d1  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c5  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000111  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	74 c0       	rjmp	.+232    	; 0x11a <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 30       	cpi	r26, 0x05	; 5
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	3c c1       	rjmp	.+632    	; 0x2cc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:

volatile char test_send = 0;


int main(void)
{
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
	init_all();
  5e:	06 d0       	rcall	.+12     	; 0x6c <init_all>
	init_i2c_slave_receiver(ADDRESS, 0, 1);
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	60 e0       	ldi	r22, 0x00	; 0
  64:	41 e0       	ldi	r20, 0x01	; 1
  66:	1b d0       	rcall	.+54     	; 0x9e <init_i2c_slave_receiver>
	sei();
  68:	78 94       	sei
	while(1);
  6a:	ff cf       	rjmp	.-2      	; 0x6a <main+0x14>

0000006c <init_all>:
	
}


void init_all()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 1<<7;
  74:	81 e6       	ldi	r24, 0x61	; 97
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	20 e8       	ldi	r18, 0x80	; 128
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
	CLKPR = 0;
  7e:	81 e6       	ldi	r24, 0x61	; 97
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	fc 01       	movw	r30, r24
  84:	10 82       	st	Z, r1
	DDRB |= ((1<<6) | (1<<7) | 1);
  86:	84 e2       	ldi	r24, 0x24	; 36
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	24 e2       	ldi	r18, 0x24	; 36
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	21 6c       	ori	r18, 0xC1	; 193
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
}
  98:	cf 91       	pop	r28
  9a:	df 91       	pop	r29
  9c:	08 95       	ret

0000009e <init_i2c_slave_receiver>:


void init_i2c_slave_receiver(unsigned char address, unsigned char mask, unsigned char respond_to_announce)
{
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	00 d0       	rcall	.+0      	; 0xa4 <init_i2c_slave_receiver+0x6>
  a4:	0f 92       	push	r0
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
	motor_command[0] = 0;
  b0:	10 92 03 01 	sts	0x0103, r1
	motor_command[1] = 0;
  b4:	10 92 04 01 	sts	0x0104, r1
	DDRD = 0x1F;
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f e1       	ldi	r18, 0x1F	; 31
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	PORTD = 0;
  c2:	8b e2       	ldi	r24, 0x2B	; 43
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	TWAR = address << 1; // sets the slave address
  ca:	8a eb       	ldi	r24, 0xBA	; 186
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	22 0f       	add	r18, r18
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	if(respond_to_announce)
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	88 23       	and	r24, r24
  da:	49 f0       	breq	.+18     	; 0xee <init_i2c_slave_receiver+0x50>
	{
		TWAR |= 1;
  dc:	8a eb       	ldi	r24, 0xBA	; 186
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2a eb       	ldi	r18, 0xBA	; 186
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	21 60       	ori	r18, 0x01	; 1
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	}	
	TWAMR = mask << 1;
  ee:	8d eb       	ldi	r24, 0xBD	; 189
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2a 81       	ldd	r18, Y+2	; 0x02
  f4:	22 0f       	add	r18, r18
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	TWDR = 0xFF;
  fa:	8b eb       	ldi	r24, 0xBB	; 187
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	TWCR = TWI_COMM_MASK;
 104:	8c eb       	ldi	r24, 0xBC	; 188
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	25 ec       	ldi	r18, 0xC5	; 197
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <__vector_24>:

ISR(TWI_vect)
{	
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	0f 92       	push	r0
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	unsigned char status = TWSR & 0xF8;
 13a:	89 eb       	ldi	r24, 0xB9	; 185
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	89 83       	std	Y+1, r24	; 0x01
	PORTD = status >> 2;
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	26 95       	lsr	r18
 14e:	26 95       	lsr	r18
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
	}	
	//PORTB &= ~(1<<7);
	PORTB |= 1;
	//PORTB |= 1<<6;
	//PORTB |= 1<<7;*/
	switch(status)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	80 3a       	cpi	r24, 0xA0	; 160
 15c:	91 05       	cpc	r25, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <__vector_24+0x48>
 160:	5f c0       	rjmp	.+190    	; 0x220 <__vector_24+0x106>
 162:	81 3a       	cpi	r24, 0xA1	; 161
 164:	91 05       	cpc	r25, r1
 166:	8c f4       	brge	.+34     	; 0x18a <__vector_24+0x70>
 168:	80 37       	cpi	r24, 0x70	; 112
 16a:	91 05       	cpc	r25, r1
 16c:	19 f1       	breq	.+70     	; 0x1b4 <__vector_24+0x9a>
 16e:	81 37       	cpi	r24, 0x71	; 113
 170:	91 05       	cpc	r25, r1
 172:	24 f4       	brge	.+8      	; 0x17c <__vector_24+0x62>
 174:	80 36       	cpi	r24, 0x60	; 96
 176:	91 05       	cpc	r25, r1
 178:	e9 f0       	breq	.+58     	; 0x1b4 <__vector_24+0x9a>
			break;
		case(0xf8):
			break;
		default: // Something unexpected happened
			
			break;
 17a:	9a c0       	rjmp	.+308    	; 0x2b0 <__vector_24+0x196>
	}	
	//PORTB &= ~(1<<7);
	PORTB |= 1;
	//PORTB |= 1<<6;
	//PORTB |= 1<<7;*/
	switch(status)
 17c:	80 38       	cpi	r24, 0x80	; 128
 17e:	91 05       	cpc	r25, r1
 180:	09 f1       	breq	.+66     	; 0x1c4 <__vector_24+0xaa>
 182:	80 39       	cpi	r24, 0x90	; 144
 184:	91 05       	cpc	r25, r1
 186:	f1 f0       	breq	.+60     	; 0x1c4 <__vector_24+0xaa>
			break;
		case(0xf8):
			break;
		default: // Something unexpected happened
			
			break;
 188:	93 c0       	rjmp	.+294    	; 0x2b0 <__vector_24+0x196>
	}	
	//PORTB &= ~(1<<7);
	PORTB |= 1;
	//PORTB |= 1<<6;
	//PORTB |= 1<<7;*/
	switch(status)
 18a:	80 3c       	cpi	r24, 0xC0	; 192
 18c:	91 05       	cpc	r25, r1
 18e:	09 f4       	brne	.+2      	; 0x192 <__vector_24+0x78>
 190:	79 c0       	rjmp	.+242    	; 0x284 <__vector_24+0x16a>
 192:	81 3c       	cpi	r24, 0xC1	; 193
 194:	91 05       	cpc	r25, r1
 196:	4c f4       	brge	.+18     	; 0x1aa <__vector_24+0x90>
 198:	88 3a       	cpi	r24, 0xA8	; 168
 19a:	91 05       	cpc	r25, r1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <__vector_24+0x86>
 19e:	46 c0       	rjmp	.+140    	; 0x22c <__vector_24+0x112>
 1a0:	88 3b       	cpi	r24, 0xB8	; 184
 1a2:	91 05       	cpc	r25, r1
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <__vector_24+0x8e>
 1a6:	5f c0       	rjmp	.+190    	; 0x266 <__vector_24+0x14c>
			break;
		case(0xf8):
			break;
		default: // Something unexpected happened
			
			break;
 1a8:	83 c0       	rjmp	.+262    	; 0x2b0 <__vector_24+0x196>
	}	
	//PORTB &= ~(1<<7);
	PORTB |= 1;
	//PORTB |= 1<<6;
	//PORTB |= 1<<7;*/
	switch(status)
 1aa:	88 3c       	cpi	r24, 0xC8	; 200
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <__vector_24+0x98>
 1b0:	69 c0       	rjmp	.+210    	; 0x284 <__vector_24+0x16a>
			TWDR = 0;
			TWCR = TWI_COMM_MASK; // switched to non addressed slave mode, sla will be recog
			PORTB |= 1<<6;
			break;
		case(0xf8):
			break;
 1b2:	7e c0       	rjmp	.+252    	; 0x2b0 <__vector_24+0x196>
	switch(status)
	{
		// The following are commands received in SRx mode
		case(0x60): // own SLA + W has been received, ACK returned
		case(0x70): // own GA has been received, ACK returned
			pointer = 0;
 1b4:	10 92 00 01 	sts	0x0100, r1
			TWCR = TWI_COMM_MASK; // Data byte will be received and ACK returned
 1b8:	8c eb       	ldi	r24, 0xBC	; 188
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	25 ec       	ldi	r18, 0xC5	; 197
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
			break;
 1c2:	76 c0       	rjmp	.+236    	; 0x2b0 <__vector_24+0x196>
		case(0x80): // already addressed with SLA, data has been received and ACK returned
		case(0x90): // already addressed with GA, data has been received and ACK returned
			if(pointer < 2)
 1c4:	80 91 00 01 	lds	r24, 0x0100
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	88 f4       	brcc	.+34     	; 0x1ee <__vector_24+0xd4>
			{
				motor_command[pointer] = TWDR;
 1cc:	80 91 00 01 	lds	r24, 0x0100
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	2b eb       	ldi	r18, 0xBB	; 187
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	8d 5f       	subi	r24, 0xFD	; 253
 1de:	9e 4f       	sbci	r25, 0xFE	; 254
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
				pointer++;
 1e4:	80 91 00 01 	lds	r24, 0x0100
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 00 01 	sts	0x0100, r24
			}		
			if(PORTB & (1<<6))
 1ee:	85 e2       	ldi	r24, 0x25	; 37
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	88 2f       	mov	r24, r24
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	80 74       	andi	r24, 0x40	; 64
 1fc:	90 70       	andi	r25, 0x00	; 0
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	49 f0       	breq	.+18     	; 0x214 <__vector_24+0xfa>
			{
				PORTB |= 1<<7;
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	25 e2       	ldi	r18, 0x25	; 37
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	20 81       	ld	r18, Z
 20e:	20 68       	ori	r18, 0x80	; 128
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
			}			
			TWCR = TWI_COMM_MASK; // Data byte will be received and ACK returned
 214:	8c eb       	ldi	r24, 0xBC	; 188
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	25 ec       	ldi	r18, 0xC5	; 197
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
			break;
 21e:	48 c0       	rjmp	.+144    	; 0x2b0 <__vector_24+0x196>
		case(0xA0): // STOP condition or repeated START condition 
			TWCR = TWI_COMM_MASK; // Switch to the not addressed slave mode, but SLA will be recognized
 220:	8c eb       	ldi	r24, 0xBC	; 188
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	25 ec       	ldi	r18, 0xC5	; 197
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
			break;				
 22a:	42 c0       	rjmp	.+132    	; 0x2b0 <__vector_24+0x196>
		// The following are commands received in STx mode
		case(0xA8): // Own SLA+R has been received, ACK has been returned
			if(motor_command[0] == 0x01)
 22c:	80 91 03 01 	lds	r24, 0x0103
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	51 f4       	brne	.+20     	; 0x248 <__vector_24+0x12e>
			{
				TWDR = 0x08;
 234:	8b eb       	ldi	r24, 0xBB	; 187
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	28 e0       	ldi	r18, 0x08	; 8
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
				TWCR = (TWI_COMM_MASK & (~(1<<TWEA)));
 23e:	8c eb       	ldi	r24, 0xBC	; 188
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	25 e8       	ldi	r18, 0x85	; 133
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
			}
			if(motor_command[0] == 0x02)
 248:	80 91 03 01 	lds	r24, 0x0103
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	69 f5       	brne	.+90     	; 0x2aa <__vector_24+0x190>
			{
				TWDR = 0x0a;
 250:	8b eb       	ldi	r24, 0xBB	; 187
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	2a e0       	ldi	r18, 0x0A	; 10
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
				TWCR = TWI_COMM_MASK;
 25a:	8c eb       	ldi	r24, 0xBC	; 188
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	25 ec       	ldi	r18, 0xC5	; 197
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
			}		
			break;
 264:	25 c0       	rjmp	.+74     	; 0x2b0 <__vector_24+0x196>
		case(0xB8):	// Data byte in TWDR has bee Txed, ACK received
			if(motor_command[0] == 0x02)
 266:	80 91 03 01 	lds	r24, 0x0103
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	01 f5       	brne	.+64     	; 0x2ae <__vector_24+0x194>
			{
				TWDR = 0x09;
 26e:	8b eb       	ldi	r24, 0xBB	; 187
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	29 e0       	ldi	r18, 0x09	; 9
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
				TWCR = TWI_COMM_MASK & (~(1<<TWEA));			
 278:	8c eb       	ldi	r24, 0xBC	; 188
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	25 e8       	ldi	r18, 0x85	; 133
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
			}		
			break;
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <__vector_24+0x196>
		case(0xC8):
		case(0xC0): // Last data byte has been transmitted
			TWDR = 0;
 284:	8b eb       	ldi	r24, 0xBB	; 187
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
			TWCR = TWI_COMM_MASK; // switched to non addressed slave mode, sla will be recog
 28c:	8c eb       	ldi	r24, 0xBC	; 188
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	25 ec       	ldi	r18, 0xC5	; 197
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
			PORTB |= 1<<6;
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	25 e2       	ldi	r18, 0x25	; 37
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	20 64       	ori	r18, 0x40	; 64
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
			break;
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__vector_24+0x196>
			if(motor_command[0] == 0x02)
			{
				TWDR = 0x0a;
				TWCR = TWI_COMM_MASK;
			}		
			break;
 2aa:	00 00       	nop
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <__vector_24+0x196>
			if(motor_command[0] == 0x02)
			{
				TWDR = 0x09;
				TWCR = TWI_COMM_MASK & (~(1<<TWEA));			
			}		
			break;
 2ae:	00 00       	nop
			break;
		default: // Something unexpected happened
			
			break;
	}
 2b0:	0f 90       	pop	r0
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
