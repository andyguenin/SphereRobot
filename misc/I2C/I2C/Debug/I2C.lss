
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000192  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000062  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000131  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017b  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f4  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 30       	cpi	r26, 0x03	; 3
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	63 c0       	rjmp	.+198    	; 0x11a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:




int main(void)
{
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
	init_all();
  5e:	0e d0       	rcall	.+28     	; 0x7c <init_all>
	init_i2c_slave_receiver(ADDRESS, 0, 1);
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	60 e0       	ldi	r22, 0x00	; 0
  64:	41 e0       	ldi	r20, 0x01	; 1
  66:	1a d0       	rcall	.+52     	; 0x9c <init_i2c_slave_receiver>
	while(motor_command[2]!=0x08);
  68:	00 00       	nop
  6a:	80 91 03 01 	lds	r24, 0x0103
  6e:	88 30       	cpi	r24, 0x08	; 8
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0x14>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
	
	
}
  76:	cf 91       	pop	r28
  78:	df 91       	pop	r29
  7a:	08 95       	ret

0000007c <init_all>:


void init_all()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 1<<7;
  84:	81 e6       	ldi	r24, 0x61	; 97
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	20 e8       	ldi	r18, 0x80	; 128
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	CLKPR = 0;
  8e:	81 e6       	ldi	r24, 0x61	; 97
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	fc 01       	movw	r30, r24
  94:	10 82       	st	Z, r1
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	08 95       	ret

0000009c <init_i2c_slave_receiver>:


void init_i2c_slave_receiver(unsigned char address, unsigned char mask, unsigned char respond_to_announce)
{
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	00 d0       	rcall	.+0      	; 0xa2 <init_i2c_slave_receiver+0x6>
  a2:	0f 92       	push	r0
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	6a 83       	std	Y+2, r22	; 0x02
  ac:	4b 83       	std	Y+3, r20	; 0x03
	motor_command[0] = 0;
  ae:	10 92 01 01 	sts	0x0101, r1
	motor_command[1] = 0;
  b2:	10 92 02 01 	sts	0x0102, r1
	DDRD = 0x1F;
  b6:	8a e2       	ldi	r24, 0x2A	; 42
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2f e1       	ldi	r18, 0x1F	; 31
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	PORTD = 0;
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	10 82       	st	Z, r1
	TWAR = address << 1; // sets the slave address
  c8:	8a eb       	ldi	r24, 0xBA	; 186
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	22 0f       	add	r18, r18
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	if(respond_to_announce)
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 23       	and	r24, r24
  d8:	49 f0       	breq	.+18     	; 0xec <init_i2c_slave_receiver+0x50>
	{
		TWAR |= 1;
  da:	8a eb       	ldi	r24, 0xBA	; 186
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2a eb       	ldi	r18, 0xBA	; 186
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	21 60       	ori	r18, 0x01	; 1
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	}	
	TWAMR = mask << 1;
  ec:	8d eb       	ldi	r24, 0xBD	; 189
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a 81       	ldd	r18, Y+2	; 0x02
  f2:	22 0f       	add	r18, r18
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	TWDR = 0xFF;
  f8:	8b eb       	ldi	r24, 0xBB	; 187
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	cli();
 102:	f8 94       	cli
	TWCR = TWI_COMM_MASK;	
 104:	8c eb       	ldi	r24, 0xBC	; 188
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	25 ec       	ldi	r18, 0xC5	; 197
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
