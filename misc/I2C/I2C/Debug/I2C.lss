
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000023e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000991  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000072  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000136  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020f  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e6  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	6a c0       	rjmp	.+212    	; 0x106 <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 30       	cpi	r26, 0x03	; 3
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	b9 c0       	rjmp	.+370    	; 0x1c6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:

volatile char motor_command[2];
volatile char pointer = 0;

int main(void)
{
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
	init_all();
  5e:	0b d0       	rcall	.+22     	; 0x76 <init_all>
	init_i2c_slave_receiver();
  60:	1a d0       	rcall	.+52     	; 0x96 <init_i2c_slave_receiver>
	while(motor_command[2]!=0x08);
  62:	00 00       	nop
  64:	80 91 03 01 	lds	r24, 0x0103
  68:	88 30       	cpi	r24, 0x08	; 8
  6a:	e1 f7       	brne	.-8      	; 0x64 <main+0xe>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
	
	
}
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <init_all>:


void init_all()
{
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 1<<7;
  7e:	81 e6       	ldi	r24, 0x61	; 97
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	20 e8       	ldi	r18, 0x80	; 128
  84:	fc 01       	movw	r30, r24
  86:	20 83       	st	Z, r18
	CLKPR = 0;
  88:	81 e6       	ldi	r24, 0x61	; 97
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	fc 01       	movw	r30, r24
  8e:	10 82       	st	Z, r1
}
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <init_i2c_slave_receiver>:


void init_i2c_slave_receiver()
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	motor_command[0] = 0;
  9e:	10 92 01 01 	sts	0x0101, r1
	motor_command[1] = 0;
  a2:	10 92 02 01 	sts	0x0102, r1
	DDRD = 0x1F;
  a6:	8a e2       	ldi	r24, 0x2A	; 42
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f e1       	ldi	r18, 0x1F	; 31
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	PORTD = 0;
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	10 82       	st	Z, r1
	TWAR = ADDRESS << 1; // sets the slave address
  b8:	8a eb       	ldi	r24, 0xBA	; 186
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	//#ifdef RESPOND_TO_ANNOUNCE
		TWAR |= 1;
  c2:	8a eb       	ldi	r24, 0xBA	; 186
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2a eb       	ldi	r18, 0xBA	; 186
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	21 60       	ori	r18, 0x01	; 1
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	//#endif
	TWDR = 0xFF;
  d4:	8b eb       	ldi	r24, 0xBB	; 187
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	cli();
  de:	f8 94       	cli
	TWCR = TWI_COMM_MASK;
  e0:	8c eb       	ldi	r24, 0xBC	; 188
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	25 ec       	ldi	r18, 0xC5	; 197
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		
	sei();
  ea:	78 94       	sei
	
	while(motor_command[0] !=0x08);
  ec:	00 00       	nop
  ee:	80 91 01 01 	lds	r24, 0x0101
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	e1 f7       	brne	.-8      	; 0xee <init_i2c_slave_receiver+0x58>
	PORTD = 1;
  f6:	8b e2       	ldi	r24, 0x2B	; 43
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <__vector_24>:

ISR(TWI_vect)
{	
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	0f 92       	push	r0
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	unsigned char status = TWSR & 0xF8;
 126:	89 eb       	ldi	r24, 0xB9	; 185
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	89 83       	std	Y+1, r24	; 0x01
//	PORTD = status >> 3;
	switch(status)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	80 38       	cpi	r24, 0x80	; 128
 13a:	91 05       	cpc	r25, r1
 13c:	c9 f0       	breq	.+50     	; 0x170 <__vector_24+0x6a>
 13e:	81 38       	cpi	r24, 0x81	; 129
 140:	91 05       	cpc	r25, r1
 142:	3c f4       	brge	.+14     	; 0x152 <__vector_24+0x4c>
 144:	80 36       	cpi	r24, 0x60	; 96
 146:	91 05       	cpc	r25, r1
 148:	59 f0       	breq	.+22     	; 0x160 <__vector_24+0x5a>
 14a:	80 37       	cpi	r24, 0x70	; 112
 14c:	91 05       	cpc	r25, r1
 14e:	41 f0       	breq	.+16     	; 0x160 <__vector_24+0x5a>
			break;
		case(0xA0):
			TWCR = TWI_COMM_MASK;
			break;		
		default:
			break;
 150:	2c c0       	rjmp	.+88     	; 0x1aa <__vector_24+0xa4>

ISR(TWI_vect)
{	
	unsigned char status = TWSR & 0xF8;
//	PORTD = status >> 3;
	switch(status)
 152:	80 39       	cpi	r24, 0x90	; 144
 154:	91 05       	cpc	r25, r1
 156:	61 f0       	breq	.+24     	; 0x170 <__vector_24+0x6a>
 158:	80 3a       	cpi	r24, 0xA0	; 160
 15a:	91 05       	cpc	r25, r1
 15c:	01 f1       	breq	.+64     	; 0x19e <__vector_24+0x98>
			break;
		case(0xA0):
			TWCR = TWI_COMM_MASK;
			break;		
		default:
			break;
 15e:	25 c0       	rjmp	.+74     	; 0x1aa <__vector_24+0xa4>
//	PORTD = status >> 3;
	switch(status)
	{
		case(0x60):
		case(0x70):
			pointer = 0;
 160:	10 92 00 01 	sts	0x0100, r1
			TWCR = TWI_COMM_MASK;
 164:	8c eb       	ldi	r24, 0xBC	; 188
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	25 ec       	ldi	r18, 0xC5	; 197
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
			break;
 16e:	1d c0       	rjmp	.+58     	; 0x1aa <__vector_24+0xa4>
		case(0x80):
		case(0x90):
			motor_command[pointer] = TWDR;
 170:	80 91 00 01 	lds	r24, 0x0100
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2b eb       	ldi	r18, 0xBB	; 187
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	9e 4f       	sbci	r25, 0xFE	; 254
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
			pointer++;
 188:	80 91 00 01 	lds	r24, 0x0100
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 00 01 	sts	0x0100, r24
			TWCR = TWI_COMM_MASK;
 192:	8c eb       	ldi	r24, 0xBC	; 188
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	25 ec       	ldi	r18, 0xC5	; 197
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
			break;
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_24+0xa4>
		case(0xA0):
			TWCR = TWI_COMM_MASK;
 19e:	8c eb       	ldi	r24, 0xBC	; 188
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	25 ec       	ldi	r18, 0xC5	; 197
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
			break;		
 1a8:	00 00       	nop
		default:
			break;
	}
 1aa:	0f 90       	pop	r0
 1ac:	cf 91       	pop	r28
 1ae:	df 91       	pop	r29
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
